/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	var debug = __webpack_require__(4);
	var bootstrapDebug = debug("Example");
	var app = __webpack_require__(1);
	var dehydratedState = window.App; // Sent from the server
	var Router = __webpack_require__(5);
	var HistoryLocation = Router.HistoryLocation;
	var navigateAction = __webpack_require__(2);
	
	window.React = React; // For chrome dev tool support
	debug.enable("*");
	
	bootstrapDebug("rehydrating app");
	
	function RenderApp(context, Handler) {
	    bootstrapDebug("React Rendering");
	    var mountNode = document.getElementById("app");
	    var Component = React.createFactory(Handler);
	    React.render(Component({ context: context.getComponentContext() }), mountNode, function () {
	        bootstrapDebug("React Rendered");
	    });
	}
	
	app.rehydrate(dehydratedState, function (err, context) {
	    if (err) {
	        throw err;
	    }
	    window.context = context;
	
	    var firstRender = true;
	    Router.run(app.getComponent(), HistoryLocation, function (Handler, state) {
	        if (firstRender) {
	            // Don't call the action on the first render on top of the server rehydration
	            // Otherwise there is a race condition where the action gets executed before
	            // render has been called, which can cause the checksum to fail.
	            RenderApp(context, Handler);
	            firstRender = false;
	        } else {
	            context.executeAction(navigateAction, state, function () {
	                RenderApp(context, Handler);
	            });
	        }
	    });
	});
	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	/*global App, document, window */

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var Fluxible = __webpack_require__(11);
	var MongoClient = __webpack_require__(14).MongoClient;
	
	var app = new Fluxible({
	  component: __webpack_require__(6)
	});
	
	app.registerStore(__webpack_require__(7));
	app.registerStore(__webpack_require__(8));
	app.registerStore(__webpack_require__(9));
	app.registerStore(__webpack_require__(10));
	
	module.exports = app;
	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (actionContext, payload, done) {
	    actionContext.dispatch("CHANGE_ROUTE", payload);
	    done();
	};

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(12);


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = __webpack_require__(13);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	
	/**
	 * Use chrome.storage.local if we are in an app
	 */
	
	var storage;
	
	if (typeof chrome !== 'undefined' && typeof chrome.storage !== 'undefined')
	  storage = chrome.storage.local;
	else
	  storage = localstorage();
	
	/**
	 * Colors.
	 */
	
	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];
	
	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */
	
	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}
	
	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */
	
	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};
	
	
	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */
	
	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	
	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);
	
	  if (!useColors) return args;
	
	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));
	
	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });
	
	  args.splice(lastC, 0, c);
	  return args;
	}
	
	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	
	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}
	
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	
	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      storage.removeItem('debug');
	    } else {
	      storage.debug = namespaces;
	    }
	  } catch(e) {}
	}
	
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	
	function load() {
	  var r;
	  try {
	    r = storage.debug;
	  } catch(e) {}
	  return r;
	}
	
	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */
	
	exports.enable(load());
	
	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */
	
	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.DefaultRoute = __webpack_require__(15);
	exports.Link = __webpack_require__(16);
	exports.NotFoundRoute = __webpack_require__(17);
	exports.Redirect = __webpack_require__(18);
	exports.Route = __webpack_require__(19);
	exports.RouteHandler = __webpack_require__(20);
	
	exports.HashLocation = __webpack_require__(21);
	exports.HistoryLocation = __webpack_require__(22);
	exports.RefreshLocation = __webpack_require__(23);
	exports.StaticLocation = __webpack_require__(24);
	
	exports.ImitateBrowserBehavior = __webpack_require__(25);
	exports.ScrollToTopBehavior = __webpack_require__(26);
	
	exports.History = __webpack_require__(27);
	exports.Navigation = __webpack_require__(28);
	exports.RouteHandlerMixin = __webpack_require__(29);
	exports.State = __webpack_require__(30);
	
	exports.createRoute = __webpack_require__(31).createRoute;
	exports.createDefaultRoute = __webpack_require__(31).createDefaultRoute;
	exports.createNotFoundRoute = __webpack_require__(31).createNotFoundRoute;
	exports.createRedirect = __webpack_require__(31).createRedirect;
	exports.createRoutesFromReactChildren = __webpack_require__(32);
	exports.create = __webpack_require__(33);
	exports.run = __webpack_require__(34);

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	var Route = __webpack_require__(5).Route;
	var DefaultRoute = __webpack_require__(5).DefaultRoute;
	var Application = __webpack_require__(36);
	var Home = __webpack_require__(37);
	var About = __webpack_require__(38);
	var Lead = __webpack_require__(39);
	
	var routes = React.createElement(
	    Route,
	    { name: "app", path: "/", handler: Application },
	    React.createElement(DefaultRoute, { name: "home", handler: Home }),
	    React.createElement(Route, { name: "lead", handler: Lead }),
	    React.createElement(Route, { name: "about", handler: About })
	);
	
	module.exports = routes;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var createStore = __webpack_require__(35);
	
	var ApplicationStore = createStore({
	    storeName: "ApplicationStore",
	    handlers: {
	        CHANGE_ROUTE: "handleNavigate"
	    },
	    initialize: function initialize() {
	        this.currentRoute = null;
	    },
	    handleNavigate: function handleNavigate(route) {
	        if (this.currentRoute && route.path === this.currentRoute.path) {
	            return;
	        }
	
	        this.currentRoute = route;
	        this.emitChange();
	    },
	    getState: function getState() {
	        return {
	            route: this.currentRoute
	        };
	    },
	    dehydrate: function dehydrate() {
	        return this.getState();
	    },
	    rehydrate: function rehydrate(state) {
	        this.currentRoute = state.route;
	    }
	});
	
	module.exports = ApplicationStore;
	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var createStore = __webpack_require__(35);
	
	var ListStore = createStore({
	    storeName: "ListStore",
	    handlers: {
	        RECEIVE_LIST_SUCCESS: "_receiveList"
	    },
	    initialize: function initialize() {
	        this.items = [];
	        //this.items = [{'id':3,'title':'lead3'},{'id':4,'title':'lead4'}];
	    },
	    //receiveMessages: function (items) {
	    //    var self = this;
	    //    items.forEach(function (item) {
	    //        self.items[item.id] = item;
	    //    });
	    //    self.emitChange();
	    //},
	    _receiveList: function _receiveList(items) {
	        this.items = items;
	        this.emitChange();
	    },
	    getAll: function getAll() {
	        return this.items;
	    },
	    get: function get(id) {
	        return this.item[id];
	    },
	    dehydrate: function dehydrate() {
	        return {
	            items: this.items
	        };
	    },
	    rehydrate: function rehydrate(state) {
	        this.items = state.items;
	    }
	});
	
	module.exports = ListStore;
	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var createStore = __webpack_require__(35);
	
	var TimeStore = createStore({
	    storeName: "TimeStore",
	    initialize: function initialize() {
	        this.time = new Date();
	    },
	    handleTimeChange: function handleTimeChange(payload) {
	        this.time = new Date();
	        this.emitChange();
	    },
	    handlers: {
	        CHANGE_ROUTE: "handleTimeChange",
	        UPDATE_TIME: "handleTimeChange"
	    },
	    getState: function getState() {
	        return {
	            time: this.time.toString()
	        };
	    },
	    dehydrate: function dehydrate() {
	        return {
	            time: this.time.toString()
	        };
	    },
	    rehydrate: function rehydrate(state) {
	        this.time = new Date(state.time);
	    }
	});
	
	module.exports = TimeStore;
	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var createStore = __webpack_require__(35);
	
	var PageStore = createStore({
	    storeName: "PageStore",
	    initialize: function initialize() {
	        this.content = "initial content...";
	    },
	    handleContentChange: function handleContentChange(payload) {
	        this.content = "content for page with id " + payload.id;
	        this.emitChange();
	    },
	    handlers: {
	        LOAD_PAGE: "handleContentChange"
	    },
	    getState: function getState() {
	        return {
	            content: this.content
	        };
	    },
	    dehydrate: function dehydrate() {
	        return this.getState();
	    },
	    rehydrate: function rehydrate(state) {
	        this.content = state.content;
	    }
	});
	
	module.exports = PageStore;
	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	module.exports = __webpack_require__(40);
	module.exports.FluxibleMixin = __webpack_require__(41);
	module.exports.FluxibleComponent = __webpack_require__(42);
	
	// @todo: deprecate
	module.exports.Mixin = module.exports.FluxibleMixin;


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */
	
	"use strict";
	
	var DOMPropertyOperations = __webpack_require__(43);
	var EventPluginUtils = __webpack_require__(44);
	var ReactChildren = __webpack_require__(45);
	var ReactComponent = __webpack_require__(46);
	var ReactCompositeComponent = __webpack_require__(47);
	var ReactContext = __webpack_require__(48);
	var ReactCurrentOwner = __webpack_require__(49);
	var ReactElement = __webpack_require__(50);
	var ReactElementValidator = __webpack_require__(51);
	var ReactDOM = __webpack_require__(52);
	var ReactDOMComponent = __webpack_require__(53);
	var ReactDefaultInjection = __webpack_require__(54);
	var ReactInstanceHandles = __webpack_require__(55);
	var ReactLegacyElement = __webpack_require__(56);
	var ReactMount = __webpack_require__(57);
	var ReactMultiChild = __webpack_require__(58);
	var ReactPerf = __webpack_require__(59);
	var ReactPropTypes = __webpack_require__(60);
	var ReactServerRendering = __webpack_require__(61);
	var ReactTextComponent = __webpack_require__(62);
	
	var assign = __webpack_require__(63);
	var deprecated = __webpack_require__(64);
	var onlyChild = __webpack_require__(65);
	
	ReactDefaultInjection.inject();
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	
	if ("production" !== process.env.NODE_ENV) {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	}
	
	// TODO: Drop legacy elements once classes no longer export these factories
	createElement = ReactLegacyElement.wrapCreateElement(
	  createElement
	);
	createFactory = ReactLegacyElement.wrapCreateFactory(
	  createFactory
	);
	
	var render = ReactPerf.measure('React', 'render', ReactMount.render);
	
	var React = {
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    only: onlyChild
	  },
	  DOM: ReactDOM,
	  PropTypes: ReactPropTypes,
	  initializeTouchEvents: function(shouldUseTouch) {
	    EventPluginUtils.useTouchEvents = shouldUseTouch;
	  },
	  createClass: ReactCompositeComponent.createClass,
	  createElement: createElement,
	  createFactory: createFactory,
	  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
	  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
	  render: render,
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  isValidClass: ReactLegacyElement.isValidClass,
	  isValidElement: ReactElement.isValidElement,
	  withContext: ReactContext.withContext,
	
	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign,
	
	  // Deprecations (remove for 0.13)
	  renderComponent: deprecated(
	    'React',
	    'renderComponent',
	    'render',
	    this,
	    render
	  ),
	  renderComponentToString: deprecated(
	    'React',
	    'renderComponentToString',
	    'renderToString',
	    this,
	    ReactServerRendering.renderToString
	  ),
	  renderComponentToStaticMarkup: deprecated(
	    'React',
	    'renderComponentToStaticMarkup',
	    'renderToStaticMarkup',
	    this,
	    ReactServerRendering.renderToStaticMarkup
	  ),
	  isValidComponent: deprecated(
	    'React',
	    'isValidComponent',
	    'isValidElement',
	    this,
	    ReactElement.isValidElement
	  )
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    Component: ReactComponent,
	    CurrentOwner: ReactCurrentOwner,
	    DOMComponent: ReactDOMComponent,
	    DOMPropertyOperations: DOMPropertyOperations,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    MultiChild: ReactMultiChild,
	    TextComponent: ReactTextComponent
	  });
	}
	
	if ("production" !== process.env.NODE_ENV) {
	  var ExecutionEnvironment = __webpack_require__(66);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // If we're in Chrome, look for the devtools marker and provide a download
	    // link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1) {
	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	        console.debug(
	          'Download the React DevTools for a better development experience: ' +
	          'http://fb.me/react-devtools'
	        );
	      }
	    }
	
	    var expectedFeatures = [
	      // shims
	      Array.isArray,
	      Array.prototype.every,
	      Array.prototype.forEach,
	      Array.prototype.indexOf,
	      Array.prototype.map,
	      Date.now,
	      Function.prototype.bind,
	      Object.keys,
	      String.prototype.split,
	      String.prototype.trim,
	
	      // shams
	      Object.create,
	      Object.freeze
	    ];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error(
	          'One or more ES5 shim/shams expected by React are not available: ' +
	          'http://fb.me/react-warning-polyfills'
	        );
	        break;
	      }
	    }
	  }
	}
	
	// Version exists only in the open-source version of React, not in Facebook's
	// internal version.
	React.version = '0.12.2';
	
	module.exports = React;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(90);
	
	/**
	 * The currently active debug mode names, and names to skip.
	 */
	
	exports.names = [];
	exports.skips = [];
	
	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */
	
	exports.formatters = {};
	
	/**
	 * Previously assigned color.
	 */
	
	var prevColor = 0;
	
	/**
	 * Previous log timestamp.
	 */
	
	var prevTime;
	
	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */
	
	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}
	
	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */
	
	function debug(namespace) {
	
	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;
	
	  // define the `enabled` version
	  function enabled() {
	
	    var self = enabled;
	
	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;
	
	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();
	
	    var args = Array.prototype.slice.call(arguments);
	
	    args[0] = exports.coerce(args[0]);
	
	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }
	
	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);
	
	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });
	
	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;
	
	  var fn = exports.enabled(namespace) ? enabled : disabled;
	
	  fn.namespace = namespace;
	
	  return fn;
	}
	
	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */
	
	function enable(namespaces) {
	  exports.save(namespaces);
	
	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;
	
	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}
	
	/**
	 * Disable debug output.
	 *
	 * @api public
	 */
	
	function disable() {
	  exports.enable('');
	}
	
	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */
	
	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */
	
	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	try {
	  exports.BSONPure = __webpack_require__(150).BSONPure;
	  exports.BSONNative = __webpack_require__(150).BSONNative;
	} catch(err) {
	  // do nothing
	}
	
	// export the driver version
	exports.version = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../package\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).version;
	
	[ 'commands/base_command'
	  , 'admin'
	  , 'collection'
	  , 'connection/read_preference'
	  , 'connection/connection'
	  , 'connection/server'
	  , 'connection/mongos'
	  , 'connection/repl_set/repl_set'
	  , 'mongo_client'
	  , 'cursor'
	  , 'db'
	  , 'mongo_client'
	  , 'gridfs/grid'
	  ,	'gridfs/chunk'
	  , 'gridfs/gridstore'].forEach(function (path) {
	  	var module = __webpack_require__(67)("./" + path);
	  	for (var i in module) {
	  		exports[i] = module[i];
	    }
	});
	
	// backwards compat
	exports.ReplSetServers = exports.ReplSet;
	// Add BSON Classes
	exports.Binary = __webpack_require__(150).Binary;
	exports.Code = __webpack_require__(150).Code;
	exports.DBRef = __webpack_require__(150).DBRef;
	exports.Double = __webpack_require__(150).Double;
	exports.Long = __webpack_require__(150).Long;
	exports.MinKey = __webpack_require__(150).MinKey;
	exports.MaxKey = __webpack_require__(150).MaxKey;
	exports.ObjectID = __webpack_require__(150).ObjectID;
	exports.Symbol = __webpack_require__(150).Symbol;
	exports.Timestamp = __webpack_require__(150).Timestamp;  
	// Add BSON Parser
	exports.BSON = __webpack_require__(150).BSONPure.BSON;
	
	// Set up the connect function
	var connect = exports.Db.connect;
	
	// Add the pure and native backward compatible functions
	exports.pure = exports.native = function() {
	  return connect;
	}
	
	// Map all values to the exports value
	for(var name in exports) {
	  connect[name] = exports[name];
	}
	
	// Set our exports to be the connect function
	module.exports = connect;


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	var Configuration = __webpack_require__(68);
	var PropTypes = __webpack_require__(69);
	
	/**
	 * A <DefaultRoute> component is a special kind of <Route> that
	 * renders when its parent matches but none of its siblings do.
	 * Only one such route may be used at any given level in the
	 * route hierarchy.
	 */
	var DefaultRoute = React.createClass({
	
	  displayName: "DefaultRoute",
	
	  mixins: [Configuration],
	
	  propTypes: {
	    name: PropTypes.string,
	    path: PropTypes.falsy,
	    children: PropTypes.falsy,
	    handler: PropTypes.func.isRequired
	  }
	
	});
	
	module.exports = DefaultRoute;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	var classSet = __webpack_require__(70);
	var assign = __webpack_require__(63);
	var Navigation = __webpack_require__(28);
	var State = __webpack_require__(30);
	var PropTypes = __webpack_require__(69);
	var Route = __webpack_require__(31);
	
	function isLeftClickEvent(event) {
	  return event.button === 0;
	}
	
	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}
	
	/**
	 * <Link> components are used to create an <a> element that links to a route.
	 * When that route is active, the link gets an "active" class name (or the
	 * value of its `activeClassName` prop).
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route name="showPost" path="/posts/:postID" handler={Post}/>
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to="showPost" params={{ postID: "123" }} />
	 *
	 * In addition to params, links may pass along query string parameters
	 * using the `query` prop.
	 *
	 *   <Link to="showPost" params={{ postID: "123" }} query={{ show:true }}/>
	 */
	var Link = React.createClass({
	
	  displayName: "Link",
	
	  mixins: [Navigation, State],
	
	  propTypes: {
	    activeClassName: PropTypes.string.isRequired,
	    to: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Route)]),
	    params: PropTypes.object,
	    query: PropTypes.object,
	    activeStyle: PropTypes.object,
	    onClick: PropTypes.func
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      activeClassName: "active"
	    };
	  },
	
	  handleClick: function handleClick(event) {
	    var allowTransition = true;
	    var clickResult;
	
	    if (this.props.onClick) clickResult = this.props.onClick(event);
	
	    if (isModifiedEvent(event) || !isLeftClickEvent(event)) {
	      return;
	    }if (clickResult === false || event.defaultPrevented === true) allowTransition = false;
	
	    event.preventDefault();
	
	    if (allowTransition) this.transitionTo(this.props.to, this.props.params, this.props.query);
	  },
	
	  /**
	   * Returns the value of the "href" attribute to use on the DOM element.
	   */
	  getHref: function getHref() {
	    return this.makeHref(this.props.to, this.props.params, this.props.query);
	  },
	
	  /**
	   * Returns the value of the "class" attribute to use on the DOM element, which contains
	   * the value of the activeClassName property when this <Link> is active.
	   */
	  getClassName: function getClassName() {
	    var classNames = {};
	
	    if (this.props.className) classNames[this.props.className] = true;
	
	    if (this.getActiveState()) classNames[this.props.activeClassName] = true;
	
	    return classSet(classNames);
	  },
	
	  getActiveState: function getActiveState() {
	    return this.isActive(this.props.to, this.props.params, this.props.query);
	  },
	
	  render: function render() {
	    var props = assign({}, this.props, {
	      href: this.getHref(),
	      className: this.getClassName(),
	      onClick: this.handleClick
	    });
	
	    if (props.activeStyle && this.getActiveState()) props.style = props.activeStyle;
	
	    return React.DOM.a(props, this.props.children);
	  }
	
	});
	
	module.exports = Link;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	var Configuration = __webpack_require__(68);
	var PropTypes = __webpack_require__(69);
	
	/**
	 * A <NotFoundRoute> is a special kind of <Route> that
	 * renders when the beginning of its parent's path matches
	 * but none of its siblings do, including any <DefaultRoute>.
	 * Only one such route may be used at any given level in the
	 * route hierarchy.
	 */
	var NotFoundRoute = React.createClass({
	
	  displayName: "NotFoundRoute",
	
	  mixins: [Configuration],
	
	  propTypes: {
	    name: PropTypes.string,
	    path: PropTypes.falsy,
	    children: PropTypes.falsy,
	    handler: PropTypes.func.isRequired
	  }
	
	});
	
	module.exports = NotFoundRoute;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	var Configuration = __webpack_require__(68);
	var PropTypes = __webpack_require__(69);
	
	/**
	 * A <Redirect> component is a special kind of <Route> that always
	 * redirects to another route when it matches.
	 */
	var Redirect = React.createClass({
	
	  displayName: "Redirect",
	
	  mixins: [Configuration],
	
	  propTypes: {
	    path: PropTypes.string,
	    from: PropTypes.string, // Alias for path.
	    to: PropTypes.string,
	    handler: PropTypes.falsy
	  }
	
	});
	
	module.exports = Redirect;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	var Configuration = __webpack_require__(68);
	var PropTypes = __webpack_require__(69);
	var RouteHandler = __webpack_require__(20);
	/**
	 * <Route> components specify components that are rendered to the page when the
	 * URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is requested,
	 * the tree is searched depth-first to find a route whose path matches the URL.
	 * When one is found, all routes in the tree that lead to it are considered
	 * "active" and their components are rendered into the DOM, nested in the same
	 * order as they are in the tree.
	 *
	 * The preferred way to configure a router is using JSX. The XML-like syntax is
	 * a great way to visualize how routes are laid out in an application.
	 *
	 *   var routes = [
	 *     <Route handler={App}>
	 *       <Route name="login" handler={Login}/>
	 *       <Route name="logout" handler={Logout}/>
	 *       <Route name="about" handler={About}/>
	 *     </Route>
	 *   ];
	 *   
	 *   Router.run(routes, function (Handler) {
	 *     React.render(<Handler/>, document.body);
	 *   });
	 *
	 * Handlers for Route components that contain children can render their active
	 * child route using a <RouteHandler> element.
	 *
	 *   var App = React.createClass({
	 *     render: function () {
	 *       return (
	 *         <div class="application">
	 *           <RouteHandler/>
	 *         </div>
	 *       );
	 *     }
	 *   });
	 *
	 * If no handler is provided for the route, it will render a matched child route.
	 */
	var Route = React.createClass({
	
	  displayName: "Route",
	
	  mixins: [Configuration],
	
	  propTypes: {
	    name: PropTypes.string,
	    path: PropTypes.string,
	    handler: PropTypes.func,
	    ignoreScrollBehavior: PropTypes.bool
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      handler: RouteHandler
	    };
	  }
	
	});
	
	module.exports = Route;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	var RouteHandlerMixin = __webpack_require__(29);
	
	/**
	 * A <RouteHandler> component renders the active child route handler
	 * when routes are nested.
	 */
	var RouteHandler = React.createClass({
	
	  displayName: "RouteHandler",
	
	  mixins: [RouteHandlerMixin],
	
	  render: function render() {
	    return this.createChildRouteHandler();
	  }
	
	});
	
	module.exports = RouteHandler;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var LocationActions = __webpack_require__(71);
	var History = __webpack_require__(27);
	
	/**
	 * Returns the current URL path from the `hash` portion of the URL, including
	 * query string.
	 */
	function getHashPath() {
	  return decodeURI(
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  window.location.href.split("#")[1] || "");
	}
	
	var _actionType;
	
	function ensureSlash() {
	  var path = getHashPath();
	
	  if (path.charAt(0) === "/") {
	    return true;
	  }HashLocation.replace("/" + path);
	
	  return false;
	}
	
	var _changeListeners = [];
	
	function notifyChange(type) {
	  if (type === LocationActions.PUSH) History.length += 1;
	
	  var change = {
	    path: getHashPath(),
	    type: type
	  };
	
	  _changeListeners.forEach(function (listener) {
	    listener(change);
	  });
	}
	
	var _isListening = false;
	
	function onHashChange() {
	  if (ensureSlash()) {
	    // If we don't have an _actionType then all we know is the hash
	    // changed. It was probably caused by the user clicking the Back
	    // button, but may have also been the Forward button or manual
	    // manipulation. So just guess 'pop'.
	    notifyChange(_actionType || LocationActions.POP);
	    _actionType = null;
	  }
	}
	
	/**
	 * A Location that uses `window.location.hash`.
	 */
	var HashLocation = {
	
	  addChangeListener: function addChangeListener(listener) {
	    _changeListeners.push(listener);
	
	    // Do this BEFORE listening for hashchange.
	    ensureSlash();
	
	    if (!_isListening) {
	      if (window.addEventListener) {
	        window.addEventListener("hashchange", onHashChange, false);
	      } else {
	        window.attachEvent("onhashchange", onHashChange);
	      }
	
	      _isListening = true;
	    }
	  },
	
	  removeChangeListener: function removeChangeListener(listener) {
	    _changeListeners = _changeListeners.filter(function (l) {
	      return l !== listener;
	    });
	
	    if (_changeListeners.length === 0) {
	      if (window.removeEventListener) {
	        window.removeEventListener("hashchange", onHashChange, false);
	      } else {
	        window.removeEvent("onhashchange", onHashChange);
	      }
	
	      _isListening = false;
	    }
	  },
	
	  push: function push(path) {
	    _actionType = LocationActions.PUSH;
	    window.location.hash = path;
	  },
	
	  replace: function replace(path) {
	    _actionType = LocationActions.REPLACE;
	    window.location.replace(window.location.pathname + window.location.search + "#" + path);
	  },
	
	  pop: function pop() {
	    _actionType = LocationActions.POP;
	    History.back();
	  },
	
	  getCurrentPath: getHashPath,
	
	  toString: function toString() {
	    return "<HashLocation>";
	  }
	
	};
	
	module.exports = HashLocation;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var LocationActions = __webpack_require__(71);
	var History = __webpack_require__(27);
	
	/**
	 * Returns the current URL path from `window.location`, including query string.
	 */
	function getWindowPath() {
	  return decodeURI(window.location.pathname + window.location.search);
	}
	
	var _changeListeners = [];
	
	function notifyChange(type) {
	  var change = {
	    path: getWindowPath(),
	    type: type
	  };
	
	  _changeListeners.forEach(function (listener) {
	    listener(change);
	  });
	}
	
	var _isListening = false;
	
	function onPopState(event) {
	  if (event.state === undefined) {
	    return;
	  } // Ignore extraneous popstate events in WebKit.
	
	  notifyChange(LocationActions.POP);
	}
	
	/**
	 * A Location that uses HTML5 history.
	 */
	var HistoryLocation = {
	
	  addChangeListener: function addChangeListener(listener) {
	    _changeListeners.push(listener);
	
	    if (!_isListening) {
	      if (window.addEventListener) {
	        window.addEventListener("popstate", onPopState, false);
	      } else {
	        window.attachEvent("onpopstate", onPopState);
	      }
	
	      _isListening = true;
	    }
	  },
	
	  removeChangeListener: function removeChangeListener(listener) {
	    _changeListeners = _changeListeners.filter(function (l) {
	      return l !== listener;
	    });
	
	    if (_changeListeners.length === 0) {
	      if (window.addEventListener) {
	        window.removeEventListener("popstate", onPopState, false);
	      } else {
	        window.removeEvent("onpopstate", onPopState);
	      }
	
	      _isListening = false;
	    }
	  },
	
	  push: function push(path) {
	    window.history.pushState({ path: path }, "", path);
	    History.length += 1;
	    notifyChange(LocationActions.PUSH);
	  },
	
	  replace: function replace(path) {
	    window.history.replaceState({ path: path }, "", path);
	    notifyChange(LocationActions.REPLACE);
	  },
	
	  pop: History.back,
	
	  getCurrentPath: getWindowPath,
	
	  toString: function toString() {
	    return "<HistoryLocation>";
	  }
	
	};
	
	module.exports = HistoryLocation;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var HistoryLocation = __webpack_require__(22);
	var History = __webpack_require__(27);
	
	/**
	 * A Location that uses full page refreshes. This is used as
	 * the fallback for HistoryLocation in browsers that do not
	 * support the HTML5 history API.
	 */
	var RefreshLocation = {
	
	  push: function push(path) {
	    window.location = path;
	  },
	
	  replace: function replace(path) {
	    window.location.replace(path);
	  },
	
	  pop: History.back,
	
	  getCurrentPath: HistoryLocation.getCurrentPath,
	
	  toString: function toString() {
	    return "<RefreshLocation>";
	  }
	
	};
	
	module.exports = RefreshLocation;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };
	
	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };
	
	var invariant = __webpack_require__(72);
	
	function throwCannotModify() {
	  invariant(false, "You cannot modify a static location");
	}
	
	/**
	 * A location that only ever contains a single path. Useful in
	 * stateless environments like servers where there is no path history,
	 * only the path that was used in the request.
	 */
	
	var StaticLocation = (function () {
	  function StaticLocation(path) {
	    _classCallCheck(this, StaticLocation);
	
	    this.path = path;
	  }
	
	  _prototypeProperties(StaticLocation, null, {
	    getCurrentPath: {
	      value: function getCurrentPath() {
	        return this.path;
	      },
	      writable: true,
	      configurable: true
	    },
	    toString: {
	      value: function toString() {
	        return "<StaticLocation path=\"" + this.path + "\">";
	      },
	      writable: true,
	      configurable: true
	    }
	  });
	
	  return StaticLocation;
	})();
	
	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	StaticLocation.prototype.push = throwCannotModify;
	StaticLocation.prototype.replace = throwCannotModify;
	StaticLocation.prototype.pop = throwCannotModify;
	
	module.exports = StaticLocation;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var LocationActions = __webpack_require__(71);
	
	/**
	 * A scroll behavior that attempts to imitate the default behavior
	 * of modern browsers.
	 */
	var ImitateBrowserBehavior = {
	
	  updateScrollPosition: function updateScrollPosition(position, actionType) {
	    switch (actionType) {
	      case LocationActions.PUSH:
	      case LocationActions.REPLACE:
	        window.scrollTo(0, 0);
	        break;
	      case LocationActions.POP:
	        if (position) {
	          window.scrollTo(position.x, position.y);
	        } else {
	          window.scrollTo(0, 0);
	        }
	        break;
	    }
	  }
	
	};
	
	module.exports = ImitateBrowserBehavior;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	/**
	 * A scroll behavior that always scrolls to the top of the page
	 * after a transition.
	 */
	var ScrollToTopBehavior = {
	
	  updateScrollPosition: function updateScrollPosition() {
	    window.scrollTo(0, 0);
	  }
	
	};
	
	module.exports = ScrollToTopBehavior;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var invariant = __webpack_require__(72);
	var canUseDOM = __webpack_require__(66).canUseDOM;
	
	var History = {
	
	  /**
	   * The current number of entries in the history.
	   *
	   * Note: This property is read-only.
	   */
	  length: 1,
	
	  /**
	   * Sends the browser back one entry in the history.
	   */
	  back: function back() {
	    invariant(canUseDOM, "Cannot use History.back without a DOM");
	
	    // Do this first so that History.length will
	    // be accurate in location change listeners.
	    History.length -= 1;
	
	    window.history.back();
	  }
	
	};
	
	module.exports = History;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var PropTypes = __webpack_require__(69);
	
	/**
	 * A mixin for components that modify the URL.
	 *
	 * Example:
	 *
	 *   var MyLink = React.createClass({
	 *     mixins: [ Router.Navigation ],
	 *     handleClick: function (event) {
	 *       event.preventDefault();
	 *       this.transitionTo('aRoute', { the: 'params' }, { the: 'query' });
	 *     },
	 *     render: function () {
	 *       return (
	 *         <a onClick={this.handleClick}>Click me!</a>
	 *       );
	 *     }
	 *   });
	 */
	var Navigation = {
	
	  contextTypes: {
	    makePath: PropTypes.func.isRequired,
	    makeHref: PropTypes.func.isRequired,
	    transitionTo: PropTypes.func.isRequired,
	    replaceWith: PropTypes.func.isRequired,
	    goBack: PropTypes.func.isRequired
	  },
	
	  /**
	   * Returns an absolute URL path created from the given route
	   * name, URL parameters, and query values.
	   */
	  makePath: function makePath(to, params, query) {
	    return this.context.makePath(to, params, query);
	  },
	
	  /**
	   * Returns a string that may safely be used as the href of a
	   * link to the route with the given name.
	   */
	  makeHref: function makeHref(to, params, query) {
	    return this.context.makeHref(to, params, query);
	  },
	
	  /**
	   * Transitions to the URL specified in the arguments by pushing
	   * a new URL onto the history stack.
	   */
	  transitionTo: function transitionTo(to, params, query) {
	    this.context.transitionTo(to, params, query);
	  },
	
	  /**
	   * Transitions to the URL specified in the arguments by replacing
	   * the current URL in the history stack.
	   */
	  replaceWith: function replaceWith(to, params, query) {
	    this.context.replaceWith(to, params, query);
	  },
	
	  /**
	   * Transitions to the previous URL.
	   */
	  goBack: function goBack() {
	    return this.context.goBack();
	  }
	
	};
	
	module.exports = Navigation;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	var assign = __webpack_require__(63);
	var PropTypes = __webpack_require__(69);
	
	var REF_NAME = "__routeHandler__";
	
	var RouteHandlerMixin = {
	
	  contextTypes: {
	    getRouteAtDepth: PropTypes.func.isRequired,
	    setRouteComponentAtDepth: PropTypes.func.isRequired,
	    routeHandlers: PropTypes.array.isRequired
	  },
	
	  childContextTypes: {
	    routeHandlers: PropTypes.array.isRequired
	  },
	
	  getChildContext: function getChildContext() {
	    return {
	      routeHandlers: this.context.routeHandlers.concat([this])
	    };
	  },
	
	  componentDidMount: function componentDidMount() {
	    this._updateRouteComponent(this.refs[REF_NAME]);
	  },
	
	  componentDidUpdate: function componentDidUpdate() {
	    this._updateRouteComponent(this.refs[REF_NAME]);
	  },
	
	  componentWillUnmount: function componentWillUnmount() {
	    this._updateRouteComponent(null);
	  },
	
	  _updateRouteComponent: function _updateRouteComponent(component) {
	    this.context.setRouteComponentAtDepth(this.getRouteDepth(), component);
	  },
	
	  getRouteDepth: function getRouteDepth() {
	    return this.context.routeHandlers.length;
	  },
	
	  createChildRouteHandler: function createChildRouteHandler(props) {
	    var route = this.context.getRouteAtDepth(this.getRouteDepth());
	    return route ? React.createElement(route.handler, assign({}, props || this.props, { ref: REF_NAME })) : null;
	  }
	
	};
	
	module.exports = RouteHandlerMixin;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var PropTypes = __webpack_require__(69);
	
	/**
	 * A mixin for components that need to know the path, routes, URL
	 * params and query that are currently active.
	 *
	 * Example:
	 *
	 *   var AboutLink = React.createClass({
	 *     mixins: [ Router.State ],
	 *     render: function () {
	 *       var className = this.props.className;
	 *   
	 *       if (this.isActive('about'))
	 *         className += ' is-active';
	 *   
	 *       return React.DOM.a({ className: className }, this.props.children);
	 *     }
	 *   });
	 */
	var State = {
	
	  contextTypes: {
	    getCurrentPath: PropTypes.func.isRequired,
	    getCurrentRoutes: PropTypes.func.isRequired,
	    getCurrentPathname: PropTypes.func.isRequired,
	    getCurrentParams: PropTypes.func.isRequired,
	    getCurrentQuery: PropTypes.func.isRequired,
	    isActive: PropTypes.func.isRequired
	  },
	
	  /**
	   * Returns the current URL path.
	   */
	  getPath: function getPath() {
	    return this.context.getCurrentPath();
	  },
	
	  /**
	   * Returns an array of the routes that are currently active.
	   */
	  getRoutes: function getRoutes() {
	    return this.context.getCurrentRoutes();
	  },
	
	  /**
	   * Returns the current URL path without the query string.
	   */
	  getPathname: function getPathname() {
	    return this.context.getCurrentPathname();
	  },
	
	  /**
	   * Returns an object of the URL params that are currently active.
	   */
	  getParams: function getParams() {
	    return this.context.getCurrentParams();
	  },
	
	  /**
	   * Returns an object of the query params that are currently active.
	   */
	  getQuery: function getQuery() {
	    return this.context.getCurrentQuery();
	  },
	
	  /**
	   * A helper method to determine if a given route, params, and query
	   * are active.
	   */
	  isActive: function isActive(to, params, query) {
	    return this.context.isActive(to, params, query);
	  }
	
	};
	
	module.exports = State;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };
	
	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };
	
	var assign = __webpack_require__(63);
	var invariant = __webpack_require__(72);
	var warning = __webpack_require__(73);
	var PathUtils = __webpack_require__(83);
	
	var _currentRoute;
	
	var Route = (function () {
	  function Route(name, path, ignoreScrollBehavior, isDefault, isNotFound, onEnter, onLeave, handler) {
	    _classCallCheck(this, Route);
	
	    this.name = name;
	    this.path = path;
	    this.paramNames = PathUtils.extractParamNames(this.path);
	    this.ignoreScrollBehavior = !!ignoreScrollBehavior;
	    this.isDefault = !!isDefault;
	    this.isNotFound = !!isNotFound;
	    this.onEnter = onEnter;
	    this.onLeave = onLeave;
	    this.handler = handler;
	  }
	
	  _prototypeProperties(Route, {
	    createRoute: {
	
	      /**
	       * Creates and returns a new route. Options may be a URL pathname string
	       * with placeholders for named params or an object with any of the following
	       * properties:
	       *
	       * - name                     The name of the route. This is used to lookup a
	       *                            route relative to its parent route and should be
	       *                            unique among all child routes of the same parent
	       * - path                     A URL pathname string with optional placeholders
	       *                            that specify the names of params to extract from
	       *                            the URL when the path matches. Defaults to `/${name}`
	       *                            when there is a name given, or the path of the parent
	       *                            route, or /
	       * - ignoreScrollBehavior     True to make this route (and all descendants) ignore
	       *                            the scroll behavior of the router
	       * - isDefault                True to make this route the default route among all
	       *                            its siblings
	       * - isNotFound               True to make this route the "not found" route among
	       *                            all its siblings
	       * - onEnter                  A transition hook that will be called when the
	       *                            router is going to enter this route
	       * - onLeave                  A transition hook that will be called when the
	       *                            router is going to leave this route
	       * - handler                  A React component that will be rendered when
	       *                            this route is active
	       * - parentRoute              The parent route to use for this route. This option
	       *                            is automatically supplied when creating routes inside
	       *                            the callback to another invocation of createRoute. You
	       *                            only ever need to use this when declaring routes
	       *                            independently of one another to manually piece together
	       *                            the route hierarchy
	       *
	       * The callback may be used to structure your route hierarchy. Any call to
	       * createRoute, createDefaultRoute, createNotFoundRoute, or createRedirect
	       * inside the callback automatically uses this route as its parent.
	       */
	
	      value: function createRoute(options, callback) {
	        options = options || {};
	
	        if (typeof options === "string") options = { path: options };
	
	        var parentRoute = _currentRoute;
	
	        if (parentRoute) {
	          warning(options.parentRoute == null || options.parentRoute === parentRoute, "You should not use parentRoute with createRoute inside another route's child callback; it is ignored");
	        } else {
	          parentRoute = options.parentRoute;
	        }
	
	        var name = options.name;
	        var path = options.path || name;
	
	        if (path && !(options.isDefault || options.isNotFound)) {
	          if (PathUtils.isAbsolute(path)) {
	            if (parentRoute) {
	              invariant(parentRoute.paramNames.length === 0, "You cannot nest path \"%s\" inside \"%s\"; the parent requires URL parameters", path, parentRoute.path);
	            }
	          } else if (parentRoute) {
	            // Relative paths extend their parent.
	            path = PathUtils.join(parentRoute.path, path);
	          } else {
	            path = "/" + path;
	          }
	        } else {
	          path = parentRoute ? parentRoute.path : "/";
	        }
	
	        if (options.isNotFound && !/\*$/.test(path)) path += "*"; // Auto-append * to the path of not found routes.
	
	        var route = new Route(name, path, options.ignoreScrollBehavior, options.isDefault, options.isNotFound, options.onEnter, options.onLeave, options.handler);
	
	        if (parentRoute) {
	          if (route.isDefault) {
	            invariant(parentRoute.defaultRoute == null, "%s may not have more than one default route", parentRoute);
	
	            parentRoute.defaultRoute = route;
	          } else if (route.isNotFound) {
	            invariant(parentRoute.notFoundRoute == null, "%s may not have more than one not found route", parentRoute);
	
	            parentRoute.notFoundRoute = route;
	          }
	
	          parentRoute.appendChild(route);
	        }
	
	        // Any routes created in the callback
	        // use this route as their parent.
	        if (typeof callback === "function") {
	          var currentRoute = _currentRoute;
	          _currentRoute = route;
	          callback.call(route, route);
	          _currentRoute = currentRoute;
	        }
	
	        return route;
	      },
	      writable: true,
	      configurable: true
	    },
	    createDefaultRoute: {
	
	      /**
	       * Creates and returns a route that is rendered when its parent matches
	       * the current URL.
	       */
	
	      value: function createDefaultRoute(options) {
	        return Route.createRoute(assign({}, options, { isDefault: true }));
	      },
	      writable: true,
	      configurable: true
	    },
	    createNotFoundRoute: {
	
	      /**
	       * Creates and returns a route that is rendered when its parent matches
	       * the current URL but none of its siblings do.
	       */
	
	      value: function createNotFoundRoute(options) {
	        return Route.createRoute(assign({}, options, { isNotFound: true }));
	      },
	      writable: true,
	      configurable: true
	    },
	    createRedirect: {
	
	      /**
	       * Creates and returns a route that automatically redirects the transition
	       * to another route. In addition to the normal options to createRoute, this
	       * function accepts the following options:
	       *
	       * - from         An alias for the `path` option. Defaults to *
	       * - to           The path/route/route name to redirect to
	       * - params       The params to use in the redirect URL. Defaults
	       *                to using the current params
	       * - query        The query to use in the redirect URL. Defaults
	       *                to using the current query
	       */
	
	      value: function createRedirect(options) {
	        return Route.createRoute(assign({}, options, {
	          path: options.path || options.from || "*",
	          onEnter: function onEnter(transition, params, query) {
	            transition.redirect(options.to, options.params || params, options.query || query);
	          }
	        }));
	      },
	      writable: true,
	      configurable: true
	    }
	  }, {
	    appendChild: {
	
	      /**
	       * Appends the given route to this route's child routes.
	       */
	
	      value: function appendChild(route) {
	        invariant(route instanceof Route, "route.appendChild must use a valid Route");
	
	        if (!this.childRoutes) this.childRoutes = [];
	
	        this.childRoutes.push(route);
	      },
	      writable: true,
	      configurable: true
	    },
	    toString: {
	      value: function toString() {
	        var string = "<Route";
	
	        if (this.name) string += " name=\"" + this.name + "\"";
	
	        string += " path=\"" + this.path + "\">";
	
	        return string;
	      },
	      writable: true,
	      configurable: true
	    }
	  });
	
	  return Route;
	})();
	
	module.exports = Route;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	/* jshint -W084 */
	
	var React = __webpack_require__(3);
	var assign = __webpack_require__(63);
	var warning = __webpack_require__(73);
	var DefaultRouteType = __webpack_require__(15).type;
	var NotFoundRouteType = __webpack_require__(17).type;
	var RedirectType = __webpack_require__(18).type;
	var Route = __webpack_require__(31);
	
	function checkPropTypes(componentName, propTypes, props) {
	  componentName = componentName || "UnknownComponent";
	
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error = propTypes[propName](props, propName, componentName);
	
	      if (error instanceof Error) warning(false, error.message);
	    }
	  }
	}
	
	function createRouteOptions(props) {
	  var options = assign({}, props);
	  var handler = options.handler;
	
	  if (handler) {
	    options.onEnter = handler.willTransitionTo;
	    options.onLeave = handler.willTransitionFrom;
	  }
	
	  return options;
	}
	
	function createRouteFromReactElement(element) {
	  if (!React.isValidElement(element)) {
	    return;
	  }var type = element.type;
	  var props = element.props;
	
	  if (type.propTypes) checkPropTypes(type.displayName, type.propTypes, props);
	
	  if (type === DefaultRouteType) {
	    return Route.createDefaultRoute(createRouteOptions(props));
	  }if (type === NotFoundRouteType) {
	    return Route.createNotFoundRoute(createRouteOptions(props));
	  }if (type === RedirectType) {
	    return Route.createRedirect(createRouteOptions(props));
	  }return Route.createRoute(createRouteOptions(props), function () {
	    if (props.children) createRoutesFromReactChildren(props.children);
	  });
	}
	
	/**
	 * Creates and returns an array of routes created from the given
	 * ReactChildren, all of which should be one of <Route>, <DefaultRoute>,
	 * <NotFoundRoute>, or <Redirect>, e.g.:
	 *
	 *   var { createRoutesFromReactChildren, Route, Redirect } = require('react-router');
	 *
	 *   var routes = createRoutesFromReactChildren(
	 *     <Route path="/" handler={App}>
	 *       <Route name="user" path="/user/:userId" handler={User}>
	 *         <Route name="task" path="tasks/:taskId" handler={Task}/>
	 *         <Redirect from="todos/:taskId" to="task"/>
	 *       </Route>
	 *     </Route>
	 *   );
	 */
	function createRoutesFromReactChildren(children) {
	  var routes = [];
	
	  React.Children.forEach(children, function (child) {
	    if (child = createRouteFromReactElement(child)) routes.push(child);
	  });
	
	  return routes;
	}
	
	module.exports = createRoutesFromReactChildren;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	/* jshint -W058 */
	var React = __webpack_require__(3);
	var warning = __webpack_require__(73);
	var invariant = __webpack_require__(72);
	var canUseDOM = __webpack_require__(66).canUseDOM;
	var LocationActions = __webpack_require__(71);
	var ImitateBrowserBehavior = __webpack_require__(25);
	var HashLocation = __webpack_require__(21);
	var HistoryLocation = __webpack_require__(22);
	var RefreshLocation = __webpack_require__(23);
	var StaticLocation = __webpack_require__(24);
	var NavigationContext = __webpack_require__(74);
	var ScrollHistory = __webpack_require__(75);
	var StateContext = __webpack_require__(76);
	var createRoutesFromReactChildren = __webpack_require__(32);
	var isReactChildren = __webpack_require__(77);
	var Transition = __webpack_require__(78);
	var PropTypes = __webpack_require__(69);
	var Redirect = __webpack_require__(79);
	var History = __webpack_require__(27);
	var Cancellation = __webpack_require__(80);
	var Match = __webpack_require__(81);
	var Route = __webpack_require__(31);
	var supportsHistory = __webpack_require__(82);
	var PathUtils = __webpack_require__(83);
	
	/**
	 * The default location for new routers.
	 */
	var DEFAULT_LOCATION = canUseDOM ? HashLocation : "/";
	
	/**
	 * The default scroll behavior for new routers.
	 */
	var DEFAULT_SCROLL_BEHAVIOR = canUseDOM ? ImitateBrowserBehavior : null;
	
	function hasProperties(object, properties) {
	  for (var propertyName in properties) if (properties.hasOwnProperty(propertyName) && object[propertyName] !== properties[propertyName]) {
	    return false;
	  }return true;
	}
	
	function hasMatch(routes, route, prevParams, nextParams, prevQuery, nextQuery) {
	  return routes.some(function (r) {
	    if (r !== route) return false;
	
	    var paramNames = route.paramNames;
	    var paramName;
	
	    // Ensure that all params the route cares about did not change.
	    for (var i = 0, len = paramNames.length; i < len; ++i) {
	      paramName = paramNames[i];
	
	      if (nextParams[paramName] !== prevParams[paramName]) return false;
	    }
	
	    // Ensure the query hasn't changed.
	    return hasProperties(prevQuery, nextQuery) && hasProperties(nextQuery, prevQuery);
	  });
	}
	
	function addRoutesToNamedRoutes(routes, namedRoutes) {
	  var route;
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    route = routes[i];
	
	    if (route.name) {
	      invariant(namedRoutes[route.name] == null, "You may not have more than one route named \"%s\"", route.name);
	
	      namedRoutes[route.name] = route;
	    }
	
	    if (route.childRoutes) addRoutesToNamedRoutes(route.childRoutes, namedRoutes);
	  }
	}
	
	/**
	 * Creates and returns a new router using the given options. A router
	 * is a ReactComponent class that knows how to react to changes in the
	 * URL and keep the contents of the page in sync.
	 *
	 * Options may be any of the following:
	 *
	 * - routes           (required) The route config
	 * - location         The location to use. Defaults to HashLocation when
	 *                    the DOM is available, "/" otherwise
	 * - scrollBehavior   The scroll behavior to use. Defaults to ImitateBrowserBehavior
	 *                    when the DOM is available, null otherwise
	 * - onError          A function that is used to handle errors
	 * - onAbort          A function that is used to handle aborted transitions
	 *
	 * When rendering in a server-side environment, the location should simply
	 * be the URL path that was used in the request, including the query string.
	 */
	function createRouter(options) {
	  options = options || {};
	
	  if (isReactChildren(options)) options = { routes: options };
	
	  var mountedComponents = [];
	  var location = options.location || DEFAULT_LOCATION;
	  var scrollBehavior = options.scrollBehavior || DEFAULT_SCROLL_BEHAVIOR;
	  var state = {};
	  var nextState = {};
	  var pendingTransition = null;
	  var dispatchHandler = null;
	
	  if (typeof location === "string") location = new StaticLocation(location);
	
	  if (location instanceof StaticLocation) {
	    warning(!canUseDOM || process.env.NODE_ENV === "test", "You should not use a static location in a DOM environment because " + "the router will not be kept in sync with the current URL");
	  } else {
	    invariant(canUseDOM || location.needsDOM === false, "You cannot use %s without a DOM", location);
	  }
	
	  // Automatically fall back to full page refreshes in
	  // browsers that don't support the HTML history API.
	  if (location === HistoryLocation && !supportsHistory()) location = RefreshLocation;
	
	  var Router = React.createClass({
	
	    displayName: "Router",
	
	    statics: {
	
	      isRunning: false,
	
	      cancelPendingTransition: function cancelPendingTransition() {
	        if (pendingTransition) {
	          pendingTransition.cancel();
	          pendingTransition = null;
	        }
	      },
	
	      clearAllRoutes: function clearAllRoutes() {
	        this.cancelPendingTransition();
	        this.namedRoutes = {};
	        this.routes = [];
	      },
	
	      /**
	       * Adds routes to this router from the given children object (see ReactChildren).
	       */
	      addRoutes: function addRoutes(routes) {
	        if (isReactChildren(routes)) routes = createRoutesFromReactChildren(routes);
	
	        addRoutesToNamedRoutes(routes, this.namedRoutes);
	
	        this.routes.push.apply(this.routes, routes);
	      },
	
	      /**
	       * Replaces routes of this router from the given children object (see ReactChildren).
	       */
	      replaceRoutes: function replaceRoutes(routes) {
	        this.clearAllRoutes();
	        this.addRoutes(routes);
	        this.refresh();
	      },
	
	      /**
	       * Performs a match of the given path against this router and returns an object
	       * with the { routes, params, pathname, query } that match. Returns null if no
	       * match can be made.
	       */
	      match: function match(path) {
	        return Match.findMatch(this.routes, path);
	      },
	
	      /**
	       * Returns an absolute URL path created from the given route
	       * name, URL parameters, and query.
	       */
	      makePath: function makePath(to, params, query) {
	        var path;
	        if (PathUtils.isAbsolute(to)) {
	          path = to;
	        } else {
	          var route = to instanceof Route ? to : this.namedRoutes[to];
	
	          invariant(route instanceof Route, "Cannot find a route named \"%s\"", to);
	
	          path = route.path;
	        }
	
	        return PathUtils.withQuery(PathUtils.injectParams(path, params), query);
	      },
	
	      /**
	       * Returns a string that may safely be used as the href of a link
	       * to the route with the given name, URL parameters, and query.
	       */
	      makeHref: function makeHref(to, params, query) {
	        var path = this.makePath(to, params, query);
	        return location === HashLocation ? "#" + path : path;
	      },
	
	      /**
	       * Transitions to the URL specified in the arguments by pushing
	       * a new URL onto the history stack.
	       */
	      transitionTo: function transitionTo(to, params, query) {
	        var path = this.makePath(to, params, query);
	
	        if (pendingTransition) {
	          // Replace so pending location does not stay in history.
	          location.replace(path);
	        } else {
	          location.push(path);
	        }
	      },
	
	      /**
	       * Transitions to the URL specified in the arguments by replacing
	       * the current URL in the history stack.
	       */
	      replaceWith: function replaceWith(to, params, query) {
	        location.replace(this.makePath(to, params, query));
	      },
	
	      /**
	       * Transitions to the previous URL if one is available. Returns true if the
	       * router was able to go back, false otherwise.
	       *
	       * Note: The router only tracks history entries in your application, not the
	       * current browser session, so you can safely call this function without guarding
	       * against sending the user back to some other site. However, when using
	       * RefreshLocation (which is the fallback for HistoryLocation in browsers that
	       * don't support HTML5 history) this method will *always* send the client back
	       * because we cannot reliably track history length.
	       */
	      goBack: function goBack() {
	        if (History.length > 1 || location === RefreshLocation) {
	          location.pop();
	          return true;
	        }
	
	        warning(false, "goBack() was ignored because there is no router history");
	
	        return false;
	      },
	
	      handleAbort: options.onAbort || function (abortReason) {
	        if (location instanceof StaticLocation) throw new Error("Unhandled aborted transition! Reason: " + abortReason);
	
	        if (abortReason instanceof Cancellation) {
	          return;
	        } else if (abortReason instanceof Redirect) {
	          location.replace(this.makePath(abortReason.to, abortReason.params, abortReason.query));
	        } else {
	          location.pop();
	        }
	      },
	
	      handleError: options.onError || function (error) {
	        // Throw so we don't silently swallow async errors.
	        throw error; // This error probably originated in a transition hook.
	      },
	
	      handleLocationChange: function handleLocationChange(change) {
	        this.dispatch(change.path, change.type);
	      },
	
	      /**
	       * Performs a transition to the given path and calls callback(error, abortReason)
	       * when the transition is finished. If both arguments are null the router's state
	       * was updated. Otherwise the transition did not complete.
	       *
	       * In a transition, a router first determines which routes are involved by beginning
	       * with the current route, up the route tree to the first parent route that is shared
	       * with the destination route, and back down the tree to the destination route. The
	       * willTransitionFrom hook is invoked on all route handlers we're transitioning away
	       * from, in reverse nesting order. Likewise, the willTransitionTo hook is invoked on
	       * all route handlers we're transitioning to.
	       *
	       * Both willTransitionFrom and willTransitionTo hooks may either abort or redirect the
	       * transition. To resolve asynchronously, they may use the callback argument. If no
	       * hooks wait, the transition is fully synchronous.
	       */
	      dispatch: function dispatch(path, action) {
	        this.cancelPendingTransition();
	
	        var prevPath = state.path;
	        var isRefreshing = action == null;
	
	        if (prevPath === path && !isRefreshing) {
	          return;
	        } // Nothing to do!
	
	        // Record the scroll position as early as possible to
	        // get it before browsers try update it automatically.
	        if (prevPath && action === LocationActions.PUSH) this.recordScrollPosition(prevPath);
	
	        var match = this.match(path);
	
	        warning(match != null, "No route matches path \"%s\". Make sure you have <Route path=\"%s\"> somewhere in your routes", path, path);
	
	        if (match == null) match = {};
	
	        var prevRoutes = state.routes || [];
	        var prevParams = state.params || {};
	        var prevQuery = state.query || {};
	
	        var nextRoutes = match.routes || [];
	        var nextParams = match.params || {};
	        var nextQuery = match.query || {};
	
	        var fromRoutes, toRoutes;
	        if (prevRoutes.length) {
	          fromRoutes = prevRoutes.filter(function (route) {
	            return !hasMatch(nextRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
	          });
	
	          toRoutes = nextRoutes.filter(function (route) {
	            return !hasMatch(prevRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
	          });
	        } else {
	          fromRoutes = [];
	          toRoutes = nextRoutes;
	        }
	
	        var transition = new Transition(path, this.replaceWith.bind(this, path));
	        pendingTransition = transition;
	
	        var fromComponents = mountedComponents.slice(prevRoutes.length - fromRoutes.length);
	
	        Transition.from(transition, fromRoutes, fromComponents, function (error) {
	          if (error || transition.abortReason) return dispatchHandler.call(Router, error, transition); // No need to continue.
	
	          Transition.to(transition, toRoutes, nextParams, nextQuery, function (error) {
	            dispatchHandler.call(Router, error, transition, {
	              path: path,
	              action: action,
	              pathname: match.pathname,
	              routes: nextRoutes,
	              params: nextParams,
	              query: nextQuery
	            });
	          });
	        });
	      },
	
	      /**
	       * Starts this router and calls callback(router, state) when the route changes.
	       *
	       * If the router's location is static (i.e. a URL path in a server environment)
	       * the callback is called only once. Otherwise, the location should be one of the
	       * Router.*Location objects (e.g. Router.HashLocation or Router.HistoryLocation).
	       */
	      run: function run(callback) {
	        invariant(!this.isRunning, "Router is already running");
	
	        dispatchHandler = function (error, transition, newState) {
	          if (error) Router.handleError(error);
	
	          if (pendingTransition !== transition) return;
	
	          pendingTransition = null;
	
	          if (transition.abortReason) {
	            Router.handleAbort(transition.abortReason);
	          } else {
	            callback.call(this, this, nextState = newState);
	          }
	        };
	
	        if (!(location instanceof StaticLocation)) {
	          if (location.addChangeListener) location.addChangeListener(Router.handleLocationChange);
	
	          this.isRunning = true;
	        }
	
	        // Bootstrap using the current path.
	        this.refresh();
	      },
	
	      refresh: function refresh() {
	        Router.dispatch(location.getCurrentPath(), null);
	      },
	
	      stop: function stop() {
	        this.cancelPendingTransition();
	
	        if (location.removeChangeListener) location.removeChangeListener(Router.handleLocationChange);
	
	        this.isRunning = false;
	      },
	
	      getScrollBehavior: function getScrollBehavior() {
	        return scrollBehavior;
	      }
	
	    },
	
	    mixins: [NavigationContext, StateContext, ScrollHistory],
	
	    propTypes: {
	      children: PropTypes.falsy
	    },
	
	    childContextTypes: {
	      getRouteAtDepth: React.PropTypes.func.isRequired,
	      setRouteComponentAtDepth: React.PropTypes.func.isRequired,
	      routeHandlers: React.PropTypes.array.isRequired
	    },
	
	    getChildContext: function getChildContext() {
	      return {
	        getRouteAtDepth: this.getRouteAtDepth,
	        setRouteComponentAtDepth: this.setRouteComponentAtDepth,
	        routeHandlers: [this]
	      };
	    },
	
	    getInitialState: function getInitialState() {
	      return state = nextState;
	    },
	
	    componentWillReceiveProps: function componentWillReceiveProps() {
	      this.setState(state = nextState);
	    },
	
	    componentWillUnmount: function componentWillUnmount() {
	      Router.stop();
	    },
	
	    getLocation: function getLocation() {
	      return location;
	    },
	
	    getRouteAtDepth: function getRouteAtDepth(depth) {
	      var routes = this.state.routes;
	      return routes && routes[depth];
	    },
	
	    setRouteComponentAtDepth: function setRouteComponentAtDepth(depth, component) {
	      mountedComponents[depth] = component;
	    },
	
	    render: function render() {
	      var route = this.getRouteAtDepth(0);
	      return route ? React.createElement(route.handler, this.props) : null;
	    }
	
	  });
	
	  Router.clearAllRoutes();
	
	  if (options.routes) Router.addRoutes(options.routes);
	
	  return Router;
	}
	
	module.exports = createRouter;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var createRouter = __webpack_require__(33);
	
	/**
	 * A high-level convenience method that creates, configures, and
	 * runs a router in one shot. The method signature is:
	 *
	 *   Router.run(routes[, location ], callback);
	 *
	 * Using `window.location.hash` to manage the URL, you could do:
	 *
	 *   Router.run(routes, function (Handler) {
	 *     React.render(<Handler/>, document.body);
	 *   });
	 * 
	 * Using HTML5 history and a custom "cursor" prop:
	 * 
	 *   Router.run(routes, Router.HistoryLocation, function (Handler) {
	 *     React.render(<Handler cursor={cursor}/>, document.body);
	 *   });
	 *
	 * Returns the newly created router.
	 *
	 * Note: If you need to specify further options for your router such
	 * as error/abort handling or custom scroll behavior, use Router.create
	 * instead.
	 *
	 *   var router = Router.create(options);
	 *   router.run(function (Handler) {
	 *     // ...
	 *   });
	 */
	function runRouter(routes, location, callback) {
	  if (typeof location === "function") {
	    callback = location;
	    location = null;
	  }
	
	  var router = createRouter({
	    routes: routes,
	    location: location
	  });
	
	  router.run(callback);
	
	  return router;
	}
	
	module.exports = runRouter;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	// @TODO deprecate
	// console.warn("require('fluxible/utils/createStore') is deprecated. Please use " +
	//"require('fluxible/addons').BaseStore or require('fluxible/addons/createStore').");
	module.exports = __webpack_require__(84);


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	var Nav = __webpack_require__(88);
	var Timestamp = __webpack_require__(89);
	var ApplicationStore = __webpack_require__(7);
	var FluxibleMixin = __webpack_require__(11).Mixin;
	var RouteHandler = __webpack_require__(5).RouteHandler;
	
	var Application = React.createClass({
	    displayName: "Application",
	
	    mixins: [FluxibleMixin],
	    statics: {
	        storeListeners: [ApplicationStore]
	    },
	
	    getInitialState: function getInitialState() {
	        return this.getStore(ApplicationStore).getState();
	    },
	    onChange: function onChange() {
	        var state = this.getStore(ApplicationStore).getState();
	        this.setState(state);
	    },
	    render: function render() {
	        return React.createElement(
	            "div",
	            null,
	            React.createElement(Nav, null),
	            React.createElement(RouteHandler, null),
	            React.createElement(Timestamp, null)
	        );
	    }
	});
	
	module.exports = Application;
	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	
	var Home = React.createClass({
	    displayName: "Home",
	
	    getInitialState: function getInitialState() {
	        return {};
	    },
	    render: function render() {
	        return React.createElement(
	            "p",
	            null,
	            "Welcome to the site!"
	        );
	    }
	});
	
	module.exports = Home;
	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	
	var About = React.createClass({
	    displayName: "About",
	
	    getInitialState: function getInitialState() {
	        return {};
	    },
	    render: function render() {
	        return React.createElement(
	            "p",
	            null,
	            "This is a description of the site."
	        );
	    }
	});
	
	module.exports = About;
	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	var ListStore = __webpack_require__(8);
	var ListItem = __webpack_require__(86);
	var loadList = __webpack_require__(87);
	var FluxibleMixin = __webpack_require__(11).Mixin;
	
	function getListItem(item) {
	    return React.createElement(ListItem, {
	        key: item.id,
	        item: item
	    });
	}
	
	var Lead = React.createClass({
	    displayName: "Lead",
	
	    mixins: [FluxibleMixin],
	    statics: {
	        storeListeners: {
	            _onChange: [ListStore]
	        }
	    },
	    getInitialState: function getInitialState() {
	        return this.getStateFromStores();
	    },
	    getStateFromStores: function getStateFromStores() {
	        return {
	            items: this.getStore(ListStore).getAll()
	        };
	    },
	    loadLeads: function loadLeads(event) {
	        //var checked = event.target.checked;
	        this.executeAction(loadList);
	    },
	    render: function render() {
	        //console.log('On render state = ', this.state.items.map);
	        var listItems = this.state.items.map(getListItem);
	        return React.createElement(
	            "div",
	            { className: "message-section" },
	            React.createElement(
	                "h3",
	                { className: "message-thread-heading" },
	                "Leads list"
	            ),
	            React.createElement(
	                "a",
	                { href: "#", onClick: this.loadLeads },
	                "Load Leads from db"
	            ),
	            React.createElement("ul", { className: "message-list", ref: "messageList" }),
	            listItems
	        );
	    },
	    _onChange: function _onChange() {
	        console.log("On Change");
	        this.setState(this.getStateFromStores());
	    }
	});
	
	module.exports = Lead;
	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';
	
	var debug = __webpack_require__(4)('Fluxible');
	var async = __webpack_require__(208);
	var FluxibleContext = __webpack_require__(91);
	var dispatcherClassFactory = __webpack_require__(151);
	
	/**
	 * Provides a structured way of registering an application's configuration and
	 * resources.
	 * @class Fluxible
	 * @param {Object} [options]
	 * @param {Object} [options.appComponent] (DEPRECATED)
	 * @param {Object} [options.component] The root application component
	 * @param {String} [options.pathPrefix] The path used for application calls
	 * @constructor
	 *
	 * @example
	 *      var app = new Fluxible({
	 *          component: require('./components/App.jsx'),
	 *          plugins: [
	 *              require('./plugins/Foo')
	 *          ]
	 *      });
	 */
	function Fluxible(options) {
	    debug('Fluxible instance instantiated', options);
	    options = options || {};
	
	    // Options
	    this._component = options.component || options.appComponent;
	    this._componentActionHandler = options.componentActionHandler || this._defaultComponentActionHandler;
	    this._plugins = [];
	
	    if (options.appComponent) {
	        console.warn("*** `appComponent` is deprecated. " + 
	            "Please update your code to use `component` ***\n");
	    }
	
	    // Initialize dependencies
	    this._dispatcherClass = dispatcherClassFactory();
	}
	
	/**
	 * Creates an isolated context for a request/session
	 * @method createContext
	 * @param {Object} [options]
	 * @returns {FluxibleContext}
	 */
	Fluxible.prototype.createContext = function createContext(options) {
	    var self = this;
	    options = options || {};
	    options.app = self;
	    var context = new FluxibleContext(options);
	
	    // Plug context with app plugins that implement plugContext method
	    this._plugins.forEach(function eachPlugin(plugin) {
	        if (plugin.plugContext) {
	            var contextPlugin = plugin.plugContext(options, context, self);
	            contextPlugin.name = contextPlugin.name || plugin.name;
	            context.plug(contextPlugin);
	        }
	    });
	
	    return context;
	};
	
	/**
	 * The default component action handler
	 * @method defaultComponentActionHandler
	 * @param {Error} [err]
	 * @private
	 */
	Fluxible.prototype._defaultComponentActionHandler = function defaultComponentActionHandler(context, payload, done) {
	    if (payload.err) {
	        debug('Action returned error', payload.err);
	        throw payload.err;
	    }
	    done();
	};
	
	/**
	 * Creates a new dispatcher instance using the application's dispatchr class. Used by
	 * FluxibleContext to create new dispatcher instance
	 * @method createDispatcherInstance
	 * @param {Object} context The context object to be provided to each store instance
	 * @returns {Dispatcher}
	 */
	Fluxible.prototype.createDispatcherInstance = function createDispatcherInstance(context) {
	    return new (this._dispatcherClass)(context);
	};
	
	/**
	 * Provides plugin mechanism for adding application level settings that are persisted
	 * between server/client and also modification of the FluxibleContext
	 * @method plug
	 * @param {Object} plugin
	 * @param {String} plugin.name Name of the plugin
	 * @param {Function} plugin.plugContext Method called after context is created to allow
	 *  dynamically plugging the context
	 * @param {Object} [plugin.dehydrate] Method called to serialize the plugin settings to be persisted
	 *  to the client
	 * @param {Object} [plugin.rehydrate] Method called to rehydrate the plugin settings from the server
	 */
	Fluxible.prototype.plug = function (plugin) {
	    if (!plugin.name) {
	        throw new Error('Application plugin must have a name');
	    }
	    this._plugins.push(plugin);
	};
	
	/**
	 * Provides access to a plugin instance by name
	 * @method getPlugin
	 * @param {String} pluginName The plugin name
	 * @returns {Object}
	 */
	Fluxible.prototype.getPlugin = function (pluginName) {
	    var plugin = null;
	    this._plugins.forEach(function (p) {
	        if (pluginName === p.name) {
	            plugin = p;
	        }
	    });
	    return plugin;
	};
	
	/**
	 * Getter for the top level react component for the application
	 * @method getComponent
	 * @returns {Object}
	 */
	Fluxible.prototype.getComponent = function getComponent() {
	    return this._component;
	};
	
	/**
	 * (DEPRECATED)
	 * Getter for the top level react component for the application
	 * @method getComponent
	 * @returns {Object}
	 */
	Fluxible.prototype.getAppComponent = function getAppComponent() {
	    return this._component;
	};
	
	/**
	 * Registers a store to the dispatcher so it can listen for actions
	 * @method registerStore
	 */
	Fluxible.prototype.registerStore = function registerStore() {
	    debug(arguments[0].storeName + ' store registered');
	    this._dispatcherClass.registerStore.apply(this._dispatcherClass, arguments);
	};
	
	/**
	 * Creates a serializable state of the application and a given context for sending to the client
	 * @method dehydrate
	 * @param {FluxibleContext} context
	 * @returns {Object} Dehydrated state object
	 */
	Fluxible.prototype.dehydrate = function dehydrate(context) {
	    debug('dehydrate', context);
	    var self = this;
	    var state = {
	        context: context.dehydrate(),
	        plugins: {}
	    };
	
	    this._plugins.forEach(function (plugin) {
	        if ('function' === typeof plugin.dehydrate) {
	            // Use a namespace for storing plugin state and provide access to the application
	            state.plugins[plugin.name] = plugin.dehydrate(self);
	        }
	    });
	
	    return state;
	};
	
	/**
	 * Rehydrates the application and creates a new context with the state from the server
	 * @method rehydrate
	 * @param {Object} obj Raw object of dehydrated state
	 * @param {Object} obj.plugins Dehydrated app plugin state
	 * @param {Object} obj.context Dehydrated context state
	 * @param {Function} callback
	 * @async Rehydration may require more asset loading or async IO calls
	 */
	Fluxible.prototype.rehydrate = function rehydrate(obj, callback) {
	    debug('rehydrate', obj);
	    var self = this;
	    obj.plugins = obj.plugins || {};
	    var pluginTasks = this._plugins.filter(function (plugin) {
	        return 'function' === typeof plugin.rehydrate;
	    }).map(function (plugin) {
	        return function (asyncCallback) {
	            if (2 === plugin.rehydrate.length) { // Async plugin
	                plugin.rehydrate(obj.plugins[plugin.name], asyncCallback);
	            } else { // Sync plugin
	                try {
	                    plugin.rehydrate(obj.plugins[plugin.name]);
	                } catch (e) {
	                    asyncCallback(e);
	                    return;
	                }
	                asyncCallback();
	            }
	        };
	    });
	
	    async.parallel(pluginTasks, function rehydratePluginTasks(err) {
	        if (err) {
	            callback(err);
	            return;
	        }
	        var context = self.createContext();
	        context.rehydrate(obj.context);
	        callback(null, context);
	    });
	};
	
	module.exports = Fluxible;


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';
	
	/**
	 * React mixin for staticly declaring and add/remove-ing listeners for Store events.
	 * @class FluxibleMixin
	 * @example
	 * // Register listener default handler function name
	 * var Component = React.createClass({
	 *     mixins: [FluxibleMixin],
	 *     statics: {
	 *         storeListeners: [MockStore]
	 *     },
	 *     onChange: function () {
	 *         done();
	 *     },
	 *     ...
	 * });
	 * @example
	 * // Register listener with custom named handler
	 * var Component = React.createClass({
	 *     mixins: [FluxibleMixin],
	 *     statics: {
	 *         storeListeners: {
	 *             'onChange2': [MockStore]
	 *         }
	 *     },
	 *     onChange2: function () {
	 *         done();
	 *     },
	 *     ...
	 * });
	 */
	var DEFAULT_CHANGE_HANDLER = 'onChange';
	var React = __webpack_require__(3);
	
	var FluxibleMixin = {
	
	    contextTypes: {
	        getStore: React.PropTypes.func,
	        executeAction: React.PropTypes.func
	    },
	
	    // @todo: remove child context and encourage use of the FluxibleComponent
	    childContextTypes: {
	        getStore: React.PropTypes.func,
	        executeAction: React.PropTypes.func
	    },
	
	    /**
	     * Provides the current context as a child context
	     * @method getChildContext
	     */
	    getChildContext: function(){
	        var context = {};
	        Object.keys(FluxibleMixin.childContextTypes).forEach(function (key) {
	            context[key] = (this.props.context && this.props.context[key]) || this.context[key];
	        }, this);
	        return context;
	    },
	
	    /**
	     * Registers staticly declared listeners
	     * @method componentDidMount
	     */
	    componentDidMount: function componentDidMount() {
	        this.listeners = [];
	        var self = this;
	
	        // Register static listeners
	        this.getListeners().forEach(function(listener) {
	            self._attachStoreListener(listener);
	        });
	    },
	
	    /**
	     * Calls an action
	     * @method executeAction
	     */
	    executeAction: function executeAction() {
	        var context = this.props.context || this.context;
	        if (!context || !context.executeAction) {
	            throw new Error('executeAction was called but no context was provided. Pass the fluxible' +
	            'context via a `context` prop or via React\'s context.');
	        }
	        return context.executeAction.apply(context, arguments);
	    },
	
	    /**
	     * Gets a store instance from the context
	     * @param {Function|String} store The store to get
	     * @returns {Object}
	     * @method getStore
	     */
	    getStore: function (store) {
	        var storeInstance = store;
	        if ('object' !== typeof storeInstance) {
	            var context = this.props.context || this.context;
	            if (!context) {
	                throw new Error('storeListener mixin was called but no context was provided for getting the store.' +
	                'Pass the fluxible context via a `context` prop or via React\'s context.');
	            }
	            storeInstance = context.getStore(store);
	        }
	        return storeInstance;
	    },
	
	    /**
	     * Gets from the context all store instances required by this component
	     * @returns {Object}
	     * @method getStores
	     */
	    getStores: function() {
	        var storesByName = this.getListeners().reduce(function (accum, listener) {
	            accum[listener.store.constructor.storeName] = listener.store;
	            return accum;
	        }, {});
	        return Object.keys(storesByName).map(function(storeName) {
	            return storesByName[storeName];
	        });
	    },
	
	    /**
	     * Gets a store-change handler from the component
	     * @param {Function|String} handler The handler to get
	     * @returns {Function}
	     * @method getHandler
	     */
	    getHandler: function (handler) {
	        if ('string' === typeof handler) {
	            handler = this[handler];
	        }
	
	        if (!handler) {
	            throw new Error('storeListener attempted to add undefined handler. Make sure handlers are actually exist.');
	        }
	
	        return handler;
	    },
	
	    /**
	     * Gets a listener descriptor for a store and store-change handler
	     * @param {Function|String} store Store
	     * @param {Function|String} handler The handler function or method name
	     * @returns {Object}
	     * @method getListener
	     */
	    getListener: function(store, handler) {
	        handler = this.getHandler(handler);
	        var storeInstance = this.getStore(store);
	
	        return {
	            store: storeInstance,
	            handler: handler
	        };
	    },
	
	    /**
	     * Gets all store-change listener descriptors from the component
	     * @returns {Object}
	     * @method getListeners
	     */
	    getListeners: function() {
	        var self = this;
	        var storeListeners = self.constructor.storeListeners; // Static property on component
	
	        // get static listeners
	        if (storeListeners) {
	            if (Array.isArray(storeListeners)) {
	                return storeListeners.map(function(store) {
	                    return self.getListener(store, DEFAULT_CHANGE_HANDLER);
	                });
	            } else {
	                return Object.keys(storeListeners).reduce(function (accum, handlerName) {
	                    var stores = storeListeners[handlerName];
	                    if (!Array.isArray(stores)) {
	                        stores = [stores];
	                    }
	                    return accum.concat(stores.map(function (store) {
	                        return self.getListener(store, handlerName);
	                    }));
	                }, []);
	            }
	        }
	
	        return [];
	    },
	
	    /**
	     * If provided with events, will attach listeners to events on EventEmitter objects(i.e. Stores)
	     * If the component isn't mounted, events aren't attached.
	     * @param {Object} listener
	     * @param {Object} listener.store Store instance
	     * @param {Object} listener.handler Handler function or method name
	     * @method _attachStoreListener
	     * @private
	     */
	    _attachStoreListener: function _attachStoreListener(listener) {
	        if (this.isMounted && !this.isMounted()) {
	            throw new Error('storeListener mixin called listen when component wasn\'t mounted.');
	        }
	
	        listener.store.addChangeListener(listener.handler);
	        this.listeners.push(listener);
	    },
	
	    /**
	     * Removes all listeners
	     * @method componentWillUnmount
	     */
	    componentWillUnmount: function componentWillUnmount() {
	        this.listeners.forEach(function (listener) {
	            listener.store.removeChangeListener(listener.handler);
	        });
	        this.listeners = [];
	    }
	};
	
	module.exports = FluxibleMixin;


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(92);
	
	var FluxibleComponent = React.createClass({
	    propTypes: {
	        context: React.PropTypes.object.isRequired
	    },
	
	    childContextTypes: {
	        getStore: React.PropTypes.func,
	        executeAction: React.PropTypes.func
	    },
	
	    /**
	     * Provides the current context as a child context
	     * @method getChildContext
	     */
	    getChildContext: function () {
	        return {
	            getStore: this.props.context.getStore,
	            executeAction: this.props.context.executeAction
	        };
	    },
	
	    render: function () {
	        return React.addons.cloneWithProps(this.props.children, this.props);
	    }
	});
	
	module.exports = FluxibleComponent;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var DOMProperty = __webpack_require__(101);
	
	var escapeTextForBrowser = __webpack_require__(104);
	var memoizeStringOnly = __webpack_require__(108);
	var warning = __webpack_require__(73);
	
	function shouldIgnoreValue(name, value) {
	  return value == null ||
	    (DOMProperty.hasBooleanValue[name] && !value) ||
	    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
	    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
	    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
	}
	
	var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
	  return escapeTextForBrowser(name) + '="';
	});
	
	if ("production" !== process.env.NODE_ENV) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};
	
	  var warnUnknownProperty = function(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
	        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }
	
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = (
	      DOMProperty.isCustomAttribute(lowerCasedName) ?
	        lowerCasedName :
	      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
	        DOMProperty.getPossibleStandardName[lowerCasedName] :
	        null
	    );
	
	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    ("production" !== process.env.NODE_ENV ? warning(
	      standardName == null,
	      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
	    ) : null);
	
	  };
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function(id) {
	    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
	      escapeTextForBrowser(id) + '"';
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function(name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      if (shouldIgnoreValue(name, value)) {
	        return '';
	      }
	      var attributeName = DOMProperty.getAttributeName[name];
	      if (DOMProperty.hasBooleanValue[name] ||
	          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
	        return escapeTextForBrowser(attributeName);
	      }
	      return processAttributeNameAndPrefix(attributeName) +
	        escapeTextForBrowser(value) + '"';
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return processAttributeNameAndPrefix(name) +
	        escapeTextForBrowser(value) + '"';
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function(node, name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(name, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== ('' + value)) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        node.removeAttribute(name);
	      } else {
	        node.setAttribute(name, '' + value);
	      }
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function(node, name) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        node.removeAttribute(DOMProperty.getAttributeName[name]);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        var defaultValue = DOMProperty.getDefaultValueForProperty(
	          node.nodeName,
	          propName
	        );
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  }
	
	};
	
	module.exports = DOMPropertyOperations;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(93);
	
	var invariant = __webpack_require__(72);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        InjectedMount && InjectedMount.getNode,
	        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
	        'is missing getNode.'
	      ) : invariant(InjectedMount && InjectedMount.getNode));
	    }
	  }
	};
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp ||
	         topLevelType === topLevelTypes.topTouchEnd ||
	         topLevelType === topLevelTypes.topTouchCancel;
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove ||
	         topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown ||
	         topLevelType === topLevelTypes.topTouchStart;
	}
	
	
	var validateEventDispatches;
	if ("production" !== process.env.NODE_ENV) {
	  validateEventDispatches = function(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ?
	      dispatchListeners.length :
	      dispatchListeners ? 1 : 0;
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      idsIsArr === listenersIsArr && IDsLen === listenersLen,
	      'EventPluginUtils: Invalid `event`.'
	    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
	  };
	}
	
	/**
	 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
	 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
	 * kept separate to conserve memory.
	 */
	function forEachEventDispatch(event, cb) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      cb(event, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    cb(event, dispatchListeners, dispatchIDs);
	  }
	}
	
	/**
	 * Default implementation of PluginModule.executeDispatch().
	 * @param {SyntheticEvent} SyntheticEvent to handle
	 * @param {function} Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, listener, domID) {
	  event.currentTarget = injection.Mount.getNode(domID);
	  var returnValue = listener(event, domID);
	  event.currentTarget = null;
	  return returnValue;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, executeDispatch) {
	  forEachEventDispatch(event, executeDispatch);
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return id of the first dispatch execution who's listener returns true, or
	 * null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(dispatchListener),
	    'executeDirectDispatch(...): Invalid `event`.'
	  ) : invariant(!Array.isArray(dispatchListener)));
	  var res = dispatchListener ?
	    dispatchListener(event, dispatchID) :
	    null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {bool} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatch: executeDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	  injection: injection,
	  useTouchEvents: false
	};
	
	module.exports = EventPluginUtils;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */
	
	"use strict";
	
	var PooledClass = __webpack_require__(94);
	
	var traverseAllChildren = __webpack_require__(95);
	var warning = __webpack_require__(73);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var threeArgumentPooler = PooledClass.threeArgumentPooler;
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.forEachFunction = forEachFunction;
	  this.forEachContext = forEachContext;
	}
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(traverseContext, child, name, i) {
	  var forEachBookKeeping = traverseContext;
	  forEachBookKeeping.forEachFunction.call(
	    forEachBookKeeping.forEachContext, child, i);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	
	  var traverseContext =
	    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, mapFunction, mapContext) {
	  this.mapResult = mapResult;
	  this.mapFunction = mapFunction;
	  this.mapContext = mapContext;
	}
	PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);
	
	function mapSingleChildIntoContext(traverseContext, child, name, i) {
	  var mapBookKeeping = traverseContext;
	  var mapResult = mapBookKeeping.mapResult;
	
	  var keyUnique = !mapResult.hasOwnProperty(name);
	  ("production" !== process.env.NODE_ENV ? warning(
	    keyUnique,
	    'ReactChildren.map(...): Encountered two children with the same key, ' +
	    '`%s`. Child keys must be unique; when two children share a key, only ' +
	    'the first child will be used.',
	    name
	  ) : null);
	
	  if (keyUnique) {
	    var mappedChild =
	      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
	    mapResult[name] = mappedChild;
	  }
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * TODO: This may likely break any calls to `ReactChildren.map` that were
	 * previously relying on the fact that we guarded against null children.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	
	  var mapResult = {};
	  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	  return mapResult;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name, i) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  count: countChildren
	};
	
	module.exports = ReactChildren;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */
	
	"use strict";
	
	var ReactElement = __webpack_require__(50);
	var ReactOwner = __webpack_require__(96);
	var ReactUpdates = __webpack_require__(97);
	
	var assign = __webpack_require__(63);
	var invariant = __webpack_require__(72);
	var keyMirror = __webpack_require__(98);
	
	/**
	 * Every React component is in one of these life cycles.
	 */
	var ComponentLifeCycle = keyMirror({
	  /**
	   * Mounted components have a DOM node representation and are capable of
	   * receiving new props.
	   */
	  MOUNTED: null,
	  /**
	   * Unmounted components are inactive and cannot receive new props.
	   */
	  UNMOUNTED: null
	});
	
	var injected = false;
	
	/**
	 * Optionally injectable environment dependent cleanup hook. (server vs.
	 * browser etc). Example: A browser system caches DOM nodes based on component
	 * ID and must remove that cache entry when this instance is unmounted.
	 *
	 * @private
	 */
	var unmountIDFromEnvironment = null;
	
	/**
	 * The "image" of a component tree, is the platform specific (typically
	 * serialized) data that represents a tree of lower level UI building blocks.
	 * On the web, this "image" is HTML markup which describes a construction of
	 * low level `div` and `span` nodes. Other platforms may have different
	 * encoding of this "image". This must be injected.
	 *
	 * @private
	 */
	var mountImageIntoNode = null;
	
	/**
	 * Components are the basic units of composition in React.
	 *
	 * Every component accepts a set of keyed input parameters known as "props" that
	 * are initialized by the constructor. Once a component is mounted, the props
	 * can be mutated using `setProps` or `replaceProps`.
	 *
	 * Every component is capable of the following operations:
	 *
	 *   `mountComponent`
	 *     Initializes the component, renders markup, and registers event listeners.
	 *
	 *   `receiveComponent`
	 *     Updates the rendered DOM nodes to match the given component.
	 *
	 *   `unmountComponent`
	 *     Releases any resources allocated by this component.
	 *
	 * Components can also be "owned" by other components. Being owned by another
	 * component means being constructed by that component. This is different from
	 * being the child of a component, which means having a DOM representation that
	 * is a child of the DOM representation of that component.
	 *
	 * @class ReactComponent
	 */
	var ReactComponent = {
	
	  injection: {
	    injectEnvironment: function(ReactComponentEnvironment) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !injected,
	        'ReactComponent: injectEnvironment() can only be called once.'
	      ) : invariant(!injected));
	      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
	      unmountIDFromEnvironment =
	        ReactComponentEnvironment.unmountIDFromEnvironment;
	      ReactComponent.BackendIDOperations =
	        ReactComponentEnvironment.BackendIDOperations;
	      injected = true;
	    }
	  },
	
	  /**
	   * @internal
	   */
	  LifeCycle: ComponentLifeCycle,
	
	  /**
	   * Injected module that provides ability to mutate individual properties.
	   * Injected into the base class because many different subclasses need access
	   * to this.
	   *
	   * @internal
	   */
	  BackendIDOperations: null,
	
	  /**
	   * Base functionality for every ReactComponent constructor. Mixed into the
	   * `ReactComponent` prototype, but exposed statically for easy access.
	   *
	   * @lends {ReactComponent.prototype}
	   */
	  Mixin: {
	
	    /**
	     * Checks whether or not this component is mounted.
	     *
	     * @return {boolean} True if mounted, false otherwise.
	     * @final
	     * @protected
	     */
	    isMounted: function() {
	      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
	    },
	
	    /**
	     * Sets a subset of the props.
	     *
	     * @param {object} partialProps Subset of the next props.
	     * @param {?function} callback Called after props are updated.
	     * @final
	     * @public
	     */
	    setProps: function(partialProps, callback) {
	      // Merge with the pending element if it exists, otherwise with existing
	      // element props.
	      var element = this._pendingElement || this._currentElement;
	      this.replaceProps(
	        assign({}, element.props, partialProps),
	        callback
	      );
	    },
	
	    /**
	     * Replaces all of the props.
	     *
	     * @param {object} props New props.
	     * @param {?function} callback Called after props are updated.
	     * @final
	     * @public
	     */
	    replaceProps: function(props, callback) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        this.isMounted(),
	        'replaceProps(...): Can only update a mounted component.'
	      ) : invariant(this.isMounted()));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        this._mountDepth === 0,
	        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
	        'component with a parent. This is an anti-pattern since props will ' +
	        'get reactively updated when rendered. Instead, change the owner\'s ' +
	        '`render` method to pass the correct value as props to the component ' +
	        'where it is created.'
	      ) : invariant(this._mountDepth === 0));
	      // This is a deoptimized path. We optimize for always having a element.
	      // This creates an extra internal element.
	      this._pendingElement = ReactElement.cloneAndReplaceProps(
	        this._pendingElement || this._currentElement,
	        props
	      );
	      ReactUpdates.enqueueUpdate(this, callback);
	    },
	
	    /**
	     * Schedule a partial update to the props. Only used for internal testing.
	     *
	     * @param {object} partialProps Subset of the next props.
	     * @param {?function} callback Called after props are updated.
	     * @final
	     * @internal
	     */
	    _setPropsInternal: function(partialProps, callback) {
	      // This is a deoptimized path. We optimize for always having a element.
	      // This creates an extra internal element.
	      var element = this._pendingElement || this._currentElement;
	      this._pendingElement = ReactElement.cloneAndReplaceProps(
	        element,
	        assign({}, element.props, partialProps)
	      );
	      ReactUpdates.enqueueUpdate(this, callback);
	    },
	
	    /**
	     * Base constructor for all React components.
	     *
	     * Subclasses that override this method should make sure to invoke
	     * `ReactComponent.Mixin.construct.call(this, ...)`.
	     *
	     * @param {ReactElement} element
	     * @internal
	     */
	    construct: function(element) {
	      // This is the public exposed props object after it has been processed
	      // with default props. The element's props represents the true internal
	      // state of the props.
	      this.props = element.props;
	      // Record the component responsible for creating this component.
	      // This is accessible through the element but we maintain an extra
	      // field for compatibility with devtools and as a way to make an
	      // incremental update. TODO: Consider deprecating this field.
	      this._owner = element._owner;
	
	      // All components start unmounted.
	      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
	
	      // See ReactUpdates.
	      this._pendingCallbacks = null;
	
	      // We keep the old element and a reference to the pending element
	      // to track updates.
	      this._currentElement = element;
	      this._pendingElement = null;
	    },
	
	    /**
	     * Initializes the component, renders markup, and registers event listeners.
	     *
	     * NOTE: This does not insert any nodes into the DOM.
	     *
	     * Subclasses that override this method should make sure to invoke
	     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
	     *
	     * @param {string} rootID DOM ID of the root node.
	     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	     * @param {number} mountDepth number of components in the owner hierarchy.
	     * @return {?string} Rendered markup to be inserted into the DOM.
	     * @internal
	     */
	    mountComponent: function(rootID, transaction, mountDepth) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !this.isMounted(),
	        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
	        'Make sure to avoid storing components between renders or reusing a ' +
	        'single component instance in multiple places.',
	        rootID
	      ) : invariant(!this.isMounted()));
	      var ref = this._currentElement.ref;
	      if (ref != null) {
	        var owner = this._currentElement._owner;
	        ReactOwner.addComponentAsRefTo(this, ref, owner);
	      }
	      this._rootNodeID = rootID;
	      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
	      this._mountDepth = mountDepth;
	      // Effectively: return '';
	    },
	
	    /**
	     * Releases any resources allocated by `mountComponent`.
	     *
	     * NOTE: This does not remove any nodes from the DOM.
	     *
	     * Subclasses that override this method should make sure to invoke
	     * `ReactComponent.Mixin.unmountComponent.call(this)`.
	     *
	     * @internal
	     */
	    unmountComponent: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        this.isMounted(),
	        'unmountComponent(): Can only unmount a mounted component.'
	      ) : invariant(this.isMounted()));
	      var ref = this._currentElement.ref;
	      if (ref != null) {
	        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
	      }
	      unmountIDFromEnvironment(this._rootNodeID);
	      this._rootNodeID = null;
	      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
	    },
	
	    /**
	     * Given a new instance of this component, updates the rendered DOM nodes
	     * as if that instance was rendered instead.
	     *
	     * Subclasses that override this method should make sure to invoke
	     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
	     *
	     * @param {object} nextComponent Next set of properties.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    receiveComponent: function(nextElement, transaction) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        this.isMounted(),
	        'receiveComponent(...): Can only update a mounted component.'
	      ) : invariant(this.isMounted()));
	      this._pendingElement = nextElement;
	      this.performUpdateIfNecessary(transaction);
	    },
	
	    /**
	     * If `_pendingElement` is set, update the component.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    performUpdateIfNecessary: function(transaction) {
	      if (this._pendingElement == null) {
	        return;
	      }
	      var prevElement = this._currentElement;
	      var nextElement = this._pendingElement;
	      this._currentElement = nextElement;
	      this.props = nextElement.props;
	      this._owner = nextElement._owner;
	      this._pendingElement = null;
	      this.updateComponent(transaction, prevElement);
	    },
	
	    /**
	     * Updates the component's currently mounted representation.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @param {object} prevElement
	     * @internal
	     */
	    updateComponent: function(transaction, prevElement) {
	      var nextElement = this._currentElement;
	
	      // If either the owner or a `ref` has changed, make sure the newest owner
	      // has stored a reference to `this`, and the previous owner (if different)
	      // has forgotten the reference to `this`. We use the element instead
	      // of the public this.props because the post processing cannot determine
	      // a ref. The ref conceptually lives on the element.
	
	      // TODO: Should this even be possible? The owner cannot change because
	      // it's forbidden by shouldUpdateReactComponent. The ref can change
	      // if you swap the keys of but not the refs. Reconsider where this check
	      // is made. It probably belongs where the key checking and
	      // instantiateReactComponent is done.
	
	      if (nextElement._owner !== prevElement._owner ||
	          nextElement.ref !== prevElement.ref) {
	        if (prevElement.ref != null) {
	          ReactOwner.removeComponentAsRefFrom(
	            this, prevElement.ref, prevElement._owner
	          );
	        }
	        // Correct, even if the owner is the same, and only the ref has changed.
	        if (nextElement.ref != null) {
	          ReactOwner.addComponentAsRefTo(
	            this,
	            nextElement.ref,
	            nextElement._owner
	          );
	        }
	      }
	    },
	
	    /**
	     * Mounts this component and inserts it into the DOM.
	     *
	     * @param {string} rootID DOM ID of the root node.
	     * @param {DOMElement} container DOM element to mount into.
	     * @param {boolean} shouldReuseMarkup If true, do not insert markup
	     * @final
	     * @internal
	     * @see {ReactMount.render}
	     */
	    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
	      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	      transaction.perform(
	        this._mountComponentIntoNode,
	        this,
	        rootID,
	        container,
	        transaction,
	        shouldReuseMarkup
	      );
	      ReactUpdates.ReactReconcileTransaction.release(transaction);
	    },
	
	    /**
	     * @param {string} rootID DOM ID of the root node.
	     * @param {DOMElement} container DOM element to mount into.
	     * @param {ReactReconcileTransaction} transaction
	     * @param {boolean} shouldReuseMarkup If true, do not insert markup
	     * @final
	     * @private
	     */
	    _mountComponentIntoNode: function(
	        rootID,
	        container,
	        transaction,
	        shouldReuseMarkup) {
	      var markup = this.mountComponent(rootID, transaction, 0);
	      mountImageIntoNode(markup, container, shouldReuseMarkup);
	    },
	
	    /**
	     * Checks if this component is owned by the supplied `owner` component.
	     *
	     * @param {ReactComponent} owner Component to check.
	     * @return {boolean} True if `owners` owns this component.
	     * @final
	     * @internal
	     */
	    isOwnedBy: function(owner) {
	      return this._owner === owner;
	    },
	
	    /**
	     * Gets another component, that shares the same owner as this one, by ref.
	     *
	     * @param {string} ref of a sibling Component.
	     * @return {?ReactComponent} the actual sibling Component.
	     * @final
	     * @internal
	     */
	    getSiblingByRef: function(ref) {
	      var owner = this._owner;
	      if (!owner || !owner.refs) {
	        return null;
	      }
	      return owner.refs[ref];
	    }
	  }
	};
	
	module.exports = ReactComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */
	
	"use strict";
	
	var ReactComponent = __webpack_require__(46);
	var ReactContext = __webpack_require__(48);
	var ReactCurrentOwner = __webpack_require__(49);
	var ReactElement = __webpack_require__(50);
	var ReactElementValidator = __webpack_require__(51);
	var ReactEmptyComponent = __webpack_require__(114);
	var ReactErrorUtils = __webpack_require__(115);
	var ReactLegacyElement = __webpack_require__(56);
	var ReactOwner = __webpack_require__(96);
	var ReactPerf = __webpack_require__(59);
	var ReactPropTransferer = __webpack_require__(116);
	var ReactPropTypeLocations = __webpack_require__(117);
	var ReactPropTypeLocationNames = __webpack_require__(118);
	var ReactUpdates = __webpack_require__(97);
	
	var assign = __webpack_require__(63);
	var instantiateReactComponent = __webpack_require__(112);
	var invariant = __webpack_require__(72);
	var keyMirror = __webpack_require__(98);
	var keyOf = __webpack_require__(106);
	var monitorCodeUse = __webpack_require__(107);
	var mapObject = __webpack_require__(99);
	var shouldUpdateReactComponent = __webpack_require__(113);
	var warning = __webpack_require__(73);
	
	var MIXINS_KEY = keyOf({mixins: null});
	
	/**
	 * Policies that describe methods in `ReactCompositeComponentInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base ReactCompositeComponent class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});
	
	
	var injectedMixins = [];
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactCompositeComponent`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will available on the prototype.
	 *
	 * @interface ReactCompositeComponentInterface
	 * @internal
	 */
	var ReactCompositeComponentInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,
	
	
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,
	
	
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function(Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function(Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function(Constructor, childContextTypes) {
	    validateTypeDef(
	      Constructor,
	      childContextTypes,
	      ReactPropTypeLocations.childContext
	    );
	    Constructor.childContextTypes = assign(
	      {},
	      Constructor.childContextTypes,
	      childContextTypes
	    );
	  },
	  contextTypes: function(Constructor, contextTypes) {
	    validateTypeDef(
	      Constructor,
	      contextTypes,
	      ReactPropTypeLocations.context
	    );
	    Constructor.contextTypes = assign(
	      {},
	      Constructor.contextTypes,
	      contextTypes
	    );
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function(Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(
	        Constructor.getDefaultProps,
	        getDefaultProps
	      );
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function(Constructor, propTypes) {
	    validateTypeDef(
	      Constructor,
	      propTypes,
	      ReactPropTypeLocations.prop
	    );
	    Constructor.propTypes = assign(
	      {},
	      Constructor.propTypes,
	      propTypes
	    );
	  },
	  statics: function(Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  }
	};
	
	function getDeclarationErrorAddendum(component) {
	  var owner = component._owner || null;
	  if (owner && owner.constructor && owner.constructor.displayName) {
	    return ' Check the render method of `' + owner.constructor.displayName +
	      '`.';
	  }
	  return '';
	}
	
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof typeDef[propName] == 'function',
	        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	        'React.PropTypes.',
	        Constructor.displayName || 'ReactCompositeComponent',
	        ReactPropTypeLocationNames[location],
	        propName
	      ) : invariant(typeof typeDef[propName] == 'function'));
	    }
	  }
	}
	
	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
	    ReactCompositeComponentInterface[name] :
	    null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.OVERRIDE_BASE,
	      'ReactCompositeComponentInterface: You are attempting to override ' +
	      '`%s` from your class specification. Ensure that your method names ' +
	      'do not overlap with React methods.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.DEFINE_MANY ||
	      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
	      'ReactCompositeComponentInterface: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be due ' +
	      'to a mixin.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
	    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
	  }
	}
	
	function validateLifeCycleOnReplaceState(instance) {
	  var compositeLifeCycleState = instance._compositeLifeCycleState;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance.isMounted() ||
	      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
	    'replaceState(...): Can only update a mounted or mounting component.'
	  ) : invariant(instance.isMounted() ||
	    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactCurrentOwner.current == null,
	    'replaceState(...): Cannot update during an existing state transition ' +
	    '(such as within `render`). Render methods should be a pure function ' +
	    'of props and state.'
	  ) : invariant(ReactCurrentOwner.current == null));
	  ("production" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
	    'replaceState(...): Cannot update while unmounting component. This ' +
	    'usually means you called setState() on an unmounted component.'
	  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building `ReactCompositeComponent` classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }
	
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactLegacyElement.isValidFactory(spec),
	    'ReactCompositeComponent: You\'re attempting to ' +
	    'use a component class as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactElement.isValidElement(spec),
	    'ReactCompositeComponent: You\'re attempting to ' +
	    'use a component as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactElement.isValidElement(spec)));
	
	  var proto = Constructor.prototype;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above
	      continue;
	    }
	
	    var property = spec[name];
	    validateMethodOverride(proto, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactCompositeComponent methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isCompositeComponentMethod =
	        ReactCompositeComponentInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var markedDontBind = property && property.__reactDontBind;
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind =
	        isFunction &&
	        !isCompositeComponentMethod &&
	        !isAlreadyDefined &&
	        !markedDontBind;
	
	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactCompositeComponentInterface[name];
	
	          // These cases should already be caught by validateMethodOverride
	          ("production" !== process.env.NODE_ENV ? invariant(
	            isCompositeComponentMethod && (
	              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
	              specPolicy === SpecPolicy.DEFINE_MANY
	            ),
	            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
	            'when mixing in component specs.',
	            specPolicy,
	            name
	          ) : invariant(isCompositeComponentMethod && (
	            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
	            specPolicy === SpecPolicy.DEFINE_MANY
	          )));
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if ("production" !== process.env.NODE_ENV) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = name in RESERVED_SPEC_KEYS;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isReserved,
	      'ReactCompositeComponent: You are attempting to define a reserved ' +
	      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	      'as an instance property instead; it will still be accessible on the ' +
	      'constructor.',
	      name
	    ) : invariant(!isReserved));
	
	    var isInherited = name in Constructor;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isInherited,
	      'ReactCompositeComponent: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be ' +
	      'due to a mixin.',
	      name
	    ) : invariant(!isInherited));
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeObjectsWithNoDuplicateKeys(one, two) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    one && two && typeof one === 'object' && typeof two === 'object',
	    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
	  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));
	
	  mapObject(two, function(value, key) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      one[key] === undefined,
	      'mergeObjectsWithNoDuplicateKeys(): ' +
	      'Tried to merge two objects with the same key: `%s`. This conflict ' +
	      'may be due to a mixin; in particular, this may be caused by two ' +
	      'getInitialState() or getDefaultProps() methods returning objects ' +
	      'with clashing keys.',
	      key
	    ) : invariant(one[key] === undefined));
	    one[key] = value;
	  });
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    return mergeObjectsWithNoDuplicateKeys(a, b);
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
	 * `this._compositeLifeCycleState` (which can be null).
	 *
	 * This is different from the life cycle state maintained by `ReactComponent` in
	 * `this._lifeCycleState`. The following diagram shows how the states overlap in
	 * time. There are times when the CompositeLifeCycle is null - at those times it
	 * is only meaningful to look at ComponentLifeCycle alone.
	 *
	 * Top Row: ReactComponent.ComponentLifeCycle
	 * Low Row: ReactComponent.CompositeLifeCycle
	 *
	 * +-------+---------------------------------+--------+
	 * |  UN   |             MOUNTED             |   UN   |
	 * |MOUNTED|                                 | MOUNTED|
	 * +-------+---------------------------------+--------+
	 * |       ^--------+   +-------+   +--------^        |
	 * |       |        |   |       |   |        |        |
	 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
	 * |       |        |   |PROPS  |   |MOUNTING|        |
	 * |       |        |   |       |   |        |        |
	 * |       |        |   |       |   |        |        |
	 * |       +--------+   +-------+   +--------+        |
	 * |       |                                 |        |
	 * +-------+---------------------------------+--------+
	 */
	var CompositeLifeCycle = keyMirror({
	  /**
	   * Components in the process of being mounted respond to state changes
	   * differently.
	   */
	  MOUNTING: null,
	  /**
	   * Components in the process of being unmounted are guarded against state
	   * changes.
	   */
	  UNMOUNTING: null,
	  /**
	   * Components that are mounted and receiving new props respond to state
	   * changes differently.
	   */
	  RECEIVING_PROPS: null
	});
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function(element) {
	    // Children can be either an array or more than one argument
	    ReactComponent.Mixin.construct.apply(this, arguments);
	    ReactOwner.Mixin.construct.apply(this, arguments);
	
	    this.state = null;
	    this._pendingState = null;
	
	    // This is the public post-processed context. The real context and pending
	    // context lives on the element.
	    this.context = null;
	
	    this._compositeLifeCycleState = null;
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function() {
	    return ReactComponent.Mixin.isMounted.call(this) &&
	      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {number} mountDepth number of components in the owner hierarchy
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: ReactPerf.measure(
	    'ReactCompositeComponent',
	    'mountComponent',
	    function(rootID, transaction, mountDepth) {
	      ReactComponent.Mixin.mountComponent.call(
	        this,
	        rootID,
	        transaction,
	        mountDepth
	      );
	      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;
	
	      if (this.__reactAutoBindMap) {
	        this._bindAutoBindMethods();
	      }
	
	      this.context = this._processContext(this._currentElement._context);
	      this.props = this._processProps(this.props);
	
	      this.state = this.getInitialState ? this.getInitialState() : null;
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof this.state === 'object' && !Array.isArray(this.state),
	        '%s.getInitialState(): must return an object or null',
	        this.constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));
	
	      this._pendingState = null;
	      this._pendingForceUpdate = false;
	
	      if (this.componentWillMount) {
	        this.componentWillMount();
	        // When mounting, calls to `setState` by `componentWillMount` will set
	        // `this._pendingState` without triggering a re-render.
	        if (this._pendingState) {
	          this.state = this._pendingState;
	          this._pendingState = null;
	        }
	      }
	
	      this._renderedComponent = instantiateReactComponent(
	        this._renderValidatedComponent(),
	        this._currentElement.type // The wrapping type
	      );
	
	      // Done with mounting, `setState` will now trigger UI changes.
	      this._compositeLifeCycleState = null;
	      var markup = this._renderedComponent.mountComponent(
	        rootID,
	        transaction,
	        mountDepth + 1
	      );
	      if (this.componentDidMount) {
	        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
	      }
	      return markup;
	    }
	  ),
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function() {
	    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
	    if (this.componentWillUnmount) {
	      this.componentWillUnmount();
	    }
	    this._compositeLifeCycleState = null;
	
	    this._renderedComponent.unmountComponent();
	    this._renderedComponent = null;
	
	    ReactComponent.Mixin.unmountComponent.call(this);
	
	    // Some existing components rely on this.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: this.props = null;
	    // TODO: this.state = null;
	  },
	
	  /**
	   * Sets a subset of the state. Always use this or `replaceState` to mutate
	   * state. You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * There is no guarantee that calls to `setState` will run synchronously,
	   * as they may eventually be batched together.  You can provide an optional
	   * callback that will be executed when the call to setState is actually
	   * completed.
	   *
	   * @param {object} partialState Next partial state to be merged with state.
	   * @param {?function} callback Called after state is updated.
	   * @final
	   * @protected
	   */
	  setState: function(partialState, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof partialState === 'object' || partialState == null,
	      'setState(...): takes an object of state variables to update.'
	    ) : invariant(typeof partialState === 'object' || partialState == null));
	    if ("production" !== process.env.NODE_ENV){
	      ("production" !== process.env.NODE_ENV ? warning(
	        partialState != null,
	        'setState(...): You passed an undefined or null state object; ' +
	        'instead, use forceUpdate().'
	      ) : null);
	    }
	    // Merge with `_pendingState` if it exists, otherwise with existing state.
	    this.replaceState(
	      assign({}, this._pendingState || this.state, partialState),
	      callback
	    );
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {object} completeState Next state.
	   * @param {?function} callback Called after state is updated.
	   * @final
	   * @protected
	   */
	  replaceState: function(completeState, callback) {
	    validateLifeCycleOnReplaceState(this);
	    this._pendingState = completeState;
	    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
	      // If we're in a componentWillMount handler, don't enqueue a rerender
	      // because ReactUpdates assumes we're in a browser context (which is wrong
	      // for server rendering) and we're about to do a render anyway.
	      // TODO: The callback here is ignored when setState is called from
	      // componentWillMount. Either fix it or disallow doing so completely in
	      // favor of getInitialState.
	      ReactUpdates.enqueueUpdate(this, callback);
	    }
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function(context) {
	    var maskedContext = null;
	    var contextTypes = this.constructor.contextTypes;
	    if (contextTypes) {
	      maskedContext = {};
	      for (var contextName in contextTypes) {
	        maskedContext[contextName] = context[contextName];
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          contextTypes,
	          maskedContext,
	          ReactPropTypeLocations.context
	        );
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function(currentContext) {
	    var childContext = this.getChildContext && this.getChildContext();
	    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
	    if (childContext) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof this.constructor.childContextTypes === 'object',
	        '%s.getChildContext(): childContextTypes must be defined in order to ' +
	        'use getChildContext().',
	        displayName
	      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          this.constructor.childContextTypes,
	          childContext,
	          ReactPropTypeLocations.childContext
	        );
	      }
	      for (var name in childContext) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          name in this.constructor.childContextTypes,
	          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
	          displayName,
	          name
	        ) : invariant(name in this.constructor.childContextTypes));
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function(newProps) {
	    if ("production" !== process.env.NODE_ENV) {
	      var propTypes = this.constructor.propTypes;
	      if (propTypes) {
	        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },
	
	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.constructor.displayName;
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error =
	          propTypes[propName](props, propName, componentName, location);
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // renderComponent calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);
	          ("production" !== process.env.NODE_ENV ? warning(false, error.message + addendum) : null);
	        }
	      }
	    }
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(transaction) {
	    var compositeLifeCycleState = this._compositeLifeCycleState;
	    // Do not trigger a state transition if we are in the middle of mounting or
	    // receiving props because both of those will already be doing this.
	    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
	        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
	      return;
	    }
	
	    if (this._pendingElement == null &&
	        this._pendingState == null &&
	        !this._pendingForceUpdate) {
	      return;
	    }
	
	    var nextContext = this.context;
	    var nextProps = this.props;
	    var nextElement = this._currentElement;
	    if (this._pendingElement != null) {
	      nextElement = this._pendingElement;
	      nextContext = this._processContext(nextElement._context);
	      nextProps = this._processProps(nextElement.props);
	      this._pendingElement = null;
	
	      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
	      if (this.componentWillReceiveProps) {
	        this.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    this._compositeLifeCycleState = null;
	
	    var nextState = this._pendingState || this.state;
	    this._pendingState = null;
	
	    var shouldUpdate =
	      this._pendingForceUpdate ||
	      !this.shouldComponentUpdate ||
	      this.shouldComponentUpdate(nextProps, nextState, nextContext);
	
	    if ("production" !== process.env.NODE_ENV) {
	      if (typeof shouldUpdate === "undefined") {
	        console.warn(
	          (this.constructor.displayName || 'ReactCompositeComponent') +
	          '.shouldComponentUpdate(): Returned undefined instead of a ' +
	          'boolean value. Make sure to return true or false.'
	        );
	      }
	    }
	
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(
	        nextElement,
	        nextProps,
	        nextState,
	        nextContext,
	        transaction
	      );
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state.
	      this._currentElement = nextElement;
	      this.props = nextProps;
	      this.state = nextState;
	      this.context = nextContext;
	
	      // Owner cannot change because shouldUpdateReactComponent doesn't allow
	      // it. TODO: Remove this._owner completely.
	      this._owner = nextElement._owner;
	    }
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @private
	   */
	  _performComponentUpdate: function(
	    nextElement,
	    nextProps,
	    nextState,
	    nextContext,
	    transaction
	  ) {
	    var prevElement = this._currentElement;
	    var prevProps = this.props;
	    var prevState = this.state;
	    var prevContext = this.context;
	
	    if (this.componentWillUpdate) {
	      this.componentWillUpdate(nextProps, nextState, nextContext);
	    }
	
	    this._currentElement = nextElement;
	    this.props = nextProps;
	    this.state = nextState;
	    this.context = nextContext;
	
	    // Owner cannot change because shouldUpdateReactComponent doesn't allow
	    // it. TODO: Remove this._owner completely.
	    this._owner = nextElement._owner;
	
	    this.updateComponent(
	      transaction,
	      prevElement
	    );
	
	    if (this.componentDidUpdate) {
	      transaction.getReactMountReady().enqueue(
	        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
	        this
	      );
	    }
	  },
	
	  receiveComponent: function(nextElement, transaction) {
	    if (nextElement === this._currentElement &&
	        nextElement._owner != null) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for a element created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }
	
	    ReactComponent.Mixin.receiveComponent.call(
	      this,
	      nextElement,
	      transaction
	    );
	  },
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: ReactPerf.measure(
	    'ReactCompositeComponent',
	    'updateComponent',
	    function(transaction, prevParentElement) {
	      ReactComponent.Mixin.updateComponent.call(
	        this,
	        transaction,
	        prevParentElement
	      );
	
	      var prevComponentInstance = this._renderedComponent;
	      var prevElement = prevComponentInstance._currentElement;
	      var nextElement = this._renderValidatedComponent();
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        prevComponentInstance.receiveComponent(nextElement, transaction);
	      } else {
	        // These two IDs are actually the same! But nothing should rely on that.
	        var thisID = this._rootNodeID;
	        var prevComponentID = prevComponentInstance._rootNodeID;
	        prevComponentInstance.unmountComponent();
	        this._renderedComponent = instantiateReactComponent(
	          nextElement,
	          this._currentElement.type
	        );
	        var nextMarkup = this._renderedComponent.mountComponent(
	          thisID,
	          transaction,
	          this._mountDepth + 1
	        );
	        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
	          prevComponentID,
	          nextMarkup
	        );
	      }
	    }
	  ),
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldUpdateComponent`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {?function} callback Called after update is complete.
	   * @final
	   * @protected
	   */
	  forceUpdate: function(callback) {
	    var compositeLifeCycleState = this._compositeLifeCycleState;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isMounted() ||
	        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
	      'forceUpdate(...): Can only force an update on mounted or mounting ' +
	        'components.'
	    ) : invariant(this.isMounted() ||
	      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
	      ReactCurrentOwner.current == null,
	      'forceUpdate(...): Cannot force an update while unmounting component ' +
	      'or within a `render` function.'
	    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
	    ReactCurrentOwner.current == null));
	    this._pendingForceUpdate = true;
	    ReactUpdates.enqueueUpdate(this, callback);
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: ReactPerf.measure(
	    'ReactCompositeComponent',
	    '_renderValidatedComponent',
	    function() {
	      var renderedComponent;
	      var previousContext = ReactContext.current;
	      ReactContext.current = this._processChildContext(
	        this._currentElement._context
	      );
	      ReactCurrentOwner.current = this;
	      try {
	        renderedComponent = this.render();
	        if (renderedComponent === null || renderedComponent === false) {
	          renderedComponent = ReactEmptyComponent.getEmptyComponent();
	          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
	        } else {
	          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
	        }
	      } finally {
	        ReactContext.current = previousContext;
	        ReactCurrentOwner.current = null;
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        ReactElement.isValidElement(renderedComponent),
	        '%s.render(): A valid ReactComponent must be returned. You may have ' +
	          'returned undefined, an array or some other invalid object.',
	        this.constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(ReactElement.isValidElement(renderedComponent)));
	      return renderedComponent;
	    }
	  ),
	
	  /**
	   * @private
	   */
	  _bindAutoBindMethods: function() {
	    for (var autoBindKey in this.__reactAutoBindMap) {
	      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	        continue;
	      }
	      var method = this.__reactAutoBindMap[autoBindKey];
	      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
	        method,
	        this.constructor.displayName + '.' + autoBindKey
	      ));
	    }
	  },
	
	  /**
	   * Binds a method to the component.
	   *
	   * @param {function} method Method to be bound.
	   * @private
	   */
	  _bindAutoBindMethod: function(method) {
	    var component = this;
	    var boundMethod = method.bind(component);
	    if ("production" !== process.env.NODE_ENV) {
	      boundMethod.__reactBoundContext = component;
	      boundMethod.__reactBoundMethod = method;
	      boundMethod.__reactBoundArguments = null;
	      var componentName = component.constructor.displayName;
	      var _bind = boundMethod.bind;
	      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	        // User is trying to bind() an autobound method; we effectively will
	        // ignore the value of "this" that the user is trying to use, so
	        // let's warn.
	        if (newThis !== component && newThis !== null) {
	          monitorCodeUse('react_bind_warning', { component: componentName });
	          console.warn(
	            'bind(): React component methods may only be bound to the ' +
	            'component instance. See ' + componentName
	          );
	        } else if (!args.length) {
	          monitorCodeUse('react_bind_warning', { component: componentName });
	          console.warn(
	            'bind(): You are binding a component method to the component. ' +
	            'React does this for you automatically in a high-performance ' +
	            'way, so you can safely remove this call. See ' + componentName
	          );
	          return boundMethod;
	        }
	        var reboundMethod = _bind.apply(boundMethod, arguments);
	        reboundMethod.__reactBoundContext = component;
	        reboundMethod.__reactBoundMethod = method;
	        reboundMethod.__reactBoundArguments = args;
	        return reboundMethod;
	      };
	    }
	    return boundMethod;
	  }
	};
	
	var ReactCompositeComponentBase = function() {};
	assign(
	  ReactCompositeComponentBase.prototype,
	  ReactComponent.Mixin,
	  ReactOwner.Mixin,
	  ReactPropTransferer.Mixin,
	  ReactCompositeComponentMixin
	);
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactCompositeComponent
	 * @extends ReactComponent
	 * @extends ReactOwner
	 * @extends ReactPropTransferer
	 */
	var ReactCompositeComponent = {
	
	  LifeCycle: CompositeLifeCycle,
	
	  Base: ReactCompositeComponentBase,
	
	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function(spec) {
	    var Constructor = function(props) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted. This will later be used
	      // by the stand-alone class implementation.
	    };
	    Constructor.prototype = new ReactCompositeComponentBase();
	    Constructor.prototype.constructor = Constructor;
	
	    injectedMixins.forEach(
	      mixSpecIntoComponent.bind(null, Constructor)
	    );
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    ) : invariant(Constructor.prototype.render));
	
	    if ("production" !== process.env.NODE_ENV) {
	      if (Constructor.prototype.componentShouldUpdate) {
	        monitorCodeUse(
	          'react_component_should_update_warning',
	          { component: spec.displayName }
	        );
	        console.warn(
	          (spec.displayName || 'A component') + ' has a method called ' +
	          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	          'The name is phrased as a question because the function is ' +
	          'expected to return a value.'
	         );
	      }
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactCompositeComponentInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    if ("production" !== process.env.NODE_ENV) {
	      return ReactLegacyElement.wrapFactory(
	        ReactElementValidator.createFactory(Constructor)
	      );
	    }
	    return ReactLegacyElement.wrapFactory(
	      ReactElement.createFactory(Constructor)
	    );
	  },
	
	  injection: {
	    injectMixin: function(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	};
	
	module.exports = ReactCompositeComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactContext
	 */
	
	"use strict";
	
	var assign = __webpack_require__(63);
	
	/**
	 * Keeps track of the current context.
	 *
	 * The context is automatically passed down the component ownership hierarchy
	 * and is accessible via `this.context` on ReactCompositeComponents.
	 */
	var ReactContext = {
	
	  /**
	   * @internal
	   * @type {object}
	   */
	  current: {},
	
	  /**
	   * Temporarily extends the current context while executing scopedCallback.
	   *
	   * A typical use case might look like
	   *
	   *  render: function() {
	   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
	   *
	   *    ));
	   *    return <div>{children}</div>;
	   *  }
	   *
	   * @param {object} newContext New context to merge into the existing context
	   * @param {function} scopedCallback Callback to run with the new context
	   * @return {ReactComponent|array<ReactComponent>}
	   */
	  withContext: function(newContext, scopedCallback) {
	    var result;
	    var previousContext = ReactContext.current;
	    ReactContext.current = assign({}, previousContext, newContext);
	    try {
	      result = scopedCallback();
	    } finally {
	      ReactContext.current = previousContext;
	    }
	    return result;
	  }
	
	};
	
	module.exports = ReactContext;


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */
	
	"use strict";
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 *
	 * The depth indicate how many composite components are above this render level.
	 */
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */
	
	"use strict";
	
	var ReactContext = __webpack_require__(48);
	var ReactCurrentOwner = __webpack_require__(49);
	
	var warning = __webpack_require__(73);
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true
	};
	
	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} object
	 * @param {string} key
	 */
	function defineWarningProperty(object, key) {
	  Object.defineProperty(object, key, {
	
	    configurable: false,
	    enumerable: true,
	
	    get: function() {
	      if (!this._store) {
	        return null;
	      }
	      return this._store[key];
	    },
	
	    set: function(value) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        false,
	        'Don\'t set the ' + key + ' property of the component. ' +
	        'Mutate the existing props object instead.'
	      ) : null);
	      this._store[key] = value;
	    }
	
	  });
	}
	
	/**
	 * This is updated to true if the membrane is successfully created.
	 */
	var useMutationMembrane = false;
	
	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} element
	 */
	function defineMutationMembrane(prototype) {
	  try {
	    var pseudoFrozenProperties = {
	      props: true
	    };
	    for (var key in pseudoFrozenProperties) {
	      defineWarningProperty(prototype, key);
	    }
	    useMutationMembrane = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {string|object} ref
	 * @param {*} key
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function(type, key, ref, owner, context, props) {
	  // Built-in properties that belong on the element
	  this.type = type;
	  this.key = key;
	  this.ref = ref;
	
	  // Record the component responsible for creating this element.
	  this._owner = owner;
	
	  // TODO: Deprecate withContext, and then the context becomes accessible
	  // through the owner.
	  this._context = context;
	
	  if ("production" !== process.env.NODE_ENV) {
	    // The validation flag and props are currently mutative. We put them on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    this._store = { validated: false, props: props };
	
	    // We're not allowed to set props directly on the object so we early
	    // return and rely on the prototype membrane to forward to the backing
	    // store.
	    if (useMutationMembrane) {
	      Object.freeze(this);
	      return;
	    }
	  }
	
	  this.props = props;
	};
	
	// We intentionally don't expose the function on the constructor property.
	// ReactElement should be indistinguishable from a plain object.
	ReactElement.prototype = {
	  _isReactElement: true
	};
	
	if ("production" !== process.env.NODE_ENV) {
	  defineMutationMembrane(ReactElement.prototype);
	}
	
	ReactElement.createElement = function(type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	
	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        config.key !== null,
	        'createElement(...): Encountered component with a `key` of null. In ' +
	        'a future version, this will be treated as equivalent to the string ' +
	        '\'null\'; instead, provide an explicit key or use undefined.'
	      ) : null);
	    }
	    // TODO: Change this back to `config.key === undefined`
	    key = config.key == null ? null : '' + config.key;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	
	  return new ReactElement(
	    type,
	    key,
	    ref,
	    ReactCurrentOwner.current,
	    ReactContext.current,
	    props
	  );
	};
	
	ReactElement.createFactory = function(type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
	  var newElement = new ReactElement(
	    oldElement.type,
	    oldElement.key,
	    oldElement.ref,
	    oldElement._owner,
	    oldElement._context,
	    newProps
	  );
	
	  if ("production" !== process.env.NODE_ENV) {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	  return newElement;
	};
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function(object) {
	  // ReactTestUtils is often used outside of beforeEach where as React is
	  // within it. This leads to two different instances of React on the same
	  // page. To identify a element from a different React instance we use
	  // a flag instead of an instanceof check.
	  var isElement = !!(object && object._isReactElement);
	  // if (isElement && !(object instanceof ReactElement)) {
	  // This is an indicator that you're using multiple versions of React at the
	  // same time. This will screw with ownership and stuff. Fix it, please.
	  // TODO: We could possibly warn here.
	  // }
	  return isElement;
	};
	
	module.exports = ReactElement;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	"use strict";
	
	var ReactElement = __webpack_require__(50);
	var ReactPropTypeLocations = __webpack_require__(117);
	var ReactCurrentOwner = __webpack_require__(49);
	
	var monitorCodeUse = __webpack_require__(107);
	var warning = __webpack_require__(73);
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {
	  'react_key_warning': {},
	  'react_numeric_key_warning': {}
	};
	var ownerHasMonitoredObjectMap = {};
	
	var loggedTypeFailures = {};
	
	var NUMERIC_PROPERTY_REGEX = /^\d+$/;
	
	/**
	 * Gets the current owner's displayName for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getCurrentOwnerDisplayName() {
	  var current = ReactCurrentOwner.current;
	  return current && current.constructor.displayName || undefined;
	}
	
	/**
	 * Warn if the component doesn't have an explicit key assigned to it.
	 * This component is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactComponent} component Component that requires a key.
	 * @param {*} parentType component's parent's type.
	 */
	function validateExplicitKey(component, parentType) {
	  if (component._store.validated || component.key != null) {
	    return;
	  }
	  component._store.validated = true;
	
	  warnAndMonitorForKeyUse(
	    'react_key_warning',
	    'Each child in an array should have a unique "key" prop.',
	    component,
	    parentType
	  );
	}
	
	/**
	 * Warn if the key is being defined as an object property but has an incorrect
	 * value.
	 *
	 * @internal
	 * @param {string} name Property name of the key.
	 * @param {ReactComponent} component Component that requires a key.
	 * @param {*} parentType component's parent's type.
	 */
	function validatePropertyKey(name, component, parentType) {
	  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
	    return;
	  }
	  warnAndMonitorForKeyUse(
	    'react_numeric_key_warning',
	    'Child objects should have non-numeric keys so ordering is preserved.',
	    component,
	    parentType
	  );
	}
	
	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} warningID The id used when logging.
	 * @param {string} message The base warning that gets output.
	 * @param {ReactComponent} component Component that requires a key.
	 * @param {*} parentType component's parent's type.
	 */
	function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
	  var ownerName = getCurrentOwnerDisplayName();
	  var parentName = parentType.displayName;
	
	  var useName = ownerName || parentName;
	  var memoizer = ownerHasKeyUseWarning[warningID];
	  if (memoizer.hasOwnProperty(useName)) {
	    return;
	  }
	  memoizer[useName] = true;
	
	  message += ownerName ?
	    (" Check the render method of " + ownerName + ".") :
	    (" Check the renderComponent call using <" + parentName + ">.");
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwnerName = null;
	  if (component._owner && component._owner !== ReactCurrentOwner.current) {
	    // Name of the component that originally created this child.
	    childOwnerName = component._owner.constructor.displayName;
	
	    message += (" It was passed a child from " + childOwnerName + ".");
	  }
	
	  message += ' See http://fb.me/react-warning-keys for more information.';
	  monitorCodeUse(warningID, {
	    component: useName,
	    componentOwner: childOwnerName
	  });
	  console.warn(message);
	}
	
	/**
	 * Log that we're using an object map. We're considering deprecating this
	 * feature and replace it with proper Map and ImmutableMap data structures.
	 *
	 * @internal
	 */
	function monitorUseOfObjectMap() {
	  var currentName = getCurrentOwnerDisplayName() || '';
	  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
	    return;
	  }
	  ownerHasMonitoredObjectMap[currentName] = true;
	  monitorCodeUse('react_object_map_children');
	}
	
	/**
	 * Ensure that every component either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {*} component Statically passed child of any type.
	 * @param {*} parentType component's parent's type.
	 * @return {boolean}
	 */
	function validateChildKeys(component, parentType) {
	  if (Array.isArray(component)) {
	    for (var i = 0; i < component.length; i++) {
	      var child = component[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(component)) {
	    // This component was passed in a valid location.
	    component._store.validated = true;
	  } else if (component && typeof component === 'object') {
	    monitorUseOfObjectMap();
	    for (var name in component) {
	      validatePropertyKey(name, component[name], parentType);
	    }
	  }
	}
	
	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	        // This will soon use the warning module
	        monitorCodeUse(
	          'react_failed_descriptor_type_check',
	          { message: error.message }
	        );
	      }
	    }
	  }
	}
	
	var ReactElementValidator = {
	
	  createElement: function(type, props, children) {
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    ("production" !== process.env.NODE_ENV ? warning(
	      type != null,
	      'React.createElement: type should not be null or undefined. It should ' +
	        'be a string (for DOM elements) or a ReactClass (for composite ' +
	        'components).'
	    ) : null);
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }
	
	    if (type) {
	      var name = type.displayName;
	      if (type.propTypes) {
	        checkPropTypes(
	          name,
	          type.propTypes,
	          element.props,
	          ReactPropTypeLocations.prop
	        );
	      }
	      if (type.contextTypes) {
	        checkPropTypes(
	          name,
	          type.contextTypes,
	          element._context,
	          ReactPropTypeLocations.context
	        );
	      }
	    }
	    return element;
	  },
	
	  createFactory: function(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(
	      null,
	      type
	    );
	    validatedFactory.type = type;
	    return validatedFactory;
	  }
	
	};
	
	module.exports = ReactElementValidator;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var ReactElement = __webpack_require__(50);
	var ReactElementValidator = __webpack_require__(51);
	var ReactLegacyElement = __webpack_require__(56);
	
	var mapObject = __webpack_require__(99);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if ("production" !== process.env.NODE_ENV) {
	    return ReactLegacyElement.markNonLegacyFactory(
	      ReactElementValidator.createFactory(tag)
	    );
	  }
	  return ReactLegacyElement.markNonLegacyFactory(
	    ReactElement.createFactory(tag)
	  );
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOM = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',
	
	  // SVG
	  circle: 'circle',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'
	
	}, createDOMFactory);
	
	module.exports = ReactDOM;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var CSSPropertyOperations = __webpack_require__(100);
	var DOMProperty = __webpack_require__(101);
	var DOMPropertyOperations = __webpack_require__(43);
	var ReactBrowserComponentMixin = __webpack_require__(102);
	var ReactComponent = __webpack_require__(46);
	var ReactBrowserEventEmitter = __webpack_require__(103);
	var ReactMount = __webpack_require__(57);
	var ReactMultiChild = __webpack_require__(58);
	var ReactPerf = __webpack_require__(59);
	
	var assign = __webpack_require__(63);
	var escapeTextForBrowser = __webpack_require__(104);
	var invariant = __webpack_require__(72);
	var isEventSupported = __webpack_require__(105);
	var keyOf = __webpack_require__(106);
	var monitorCodeUse = __webpack_require__(107);
	
	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = {'string': true, 'number': true};
	
	var STYLE = keyOf({style: null});
	
	var ELEMENT_NODE_TYPE = 1;
	
	/**
	 * @param {?object} props
	 */
	function assertValidProps(props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.children == null || props.dangerouslySetInnerHTML == null,
	    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
	  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
	  if ("production" !== process.env.NODE_ENV) {
	    if (props.contentEditable && props.children != null) {
	      console.warn(
	        'A component is `contentEditable` and contains `children` managed by ' +
	        'React. It is now your responsibility to guarantee that none of those '+
	        'nodes are unexpectedly modified or duplicated. This is probably not ' +
	        'intentional.'
	      );
	    }
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.style == null || typeof props.style === 'object',
	    'The `style` prop expects a mapping from style properties to values, ' +
	    'not a string.'
	  ) : invariant(props.style == null || typeof props.style === 'object'));
	}
	
	function putListener(id, registrationName, listener, transaction) {
	  if ("production" !== process.env.NODE_ENV) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    if (registrationName === 'onScroll' &&
	        !isEventSupported('scroll', true)) {
	      monitorCodeUse('react_no_scroll_event');
	      console.warn('This browser doesn\'t support the `onScroll` event');
	    }
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
	      container.ownerDocument :
	      container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getPutListenerQueue().enqueuePutListener(
	    id,
	    registrationName,
	    listener
	  );
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};
	
	// We accept any tag to be rendered but since this gets injected into abitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
	    validatedTagCache[tag] = true;
	  }
	}
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag;
	  this.tagName = tag.toUpperCase();
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {number} mountDepth number of components in the owner hierarchy
	   * @return {string} The computed markup.
	   */
	  mountComponent: ReactPerf.measure(
	    'ReactDOMComponent',
	    'mountComponent',
	    function(rootID, transaction, mountDepth) {
	      ReactComponent.Mixin.mountComponent.call(
	        this,
	        rootID,
	        transaction,
	        mountDepth
	      );
	      assertValidProps(this.props);
	      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
	      return (
	        this._createOpenTagMarkupAndPutListeners(transaction) +
	        this._createContentMarkup(transaction) +
	        closeTag
	      );
	    }
	  ),
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function(transaction) {
	    var props = this.props;
	    var ret = '<' + this._tag;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, propValue, transaction);
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            propValue = props.style = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup =
	          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret + '>';
	    }
	
	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID + '>';
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function(transaction) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = this.props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        return innerHTML.__html;
	      }
	    } else {
	      var contentToUse =
	        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
	      var childrenToUse = contentToUse != null ? null : this.props.children;
	      if (contentToUse != null) {
	        return escapeTextForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(
	          childrenToUse,
	          transaction
	        );
	        return mountImages.join('');
	      }
	    }
	    return '';
	  },
	
	  receiveComponent: function(nextElement, transaction) {
	    if (nextElement === this._currentElement &&
	        nextElement._owner != null) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for a element created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }
	
	    ReactComponent.Mixin.receiveComponent.call(
	      this,
	      nextElement,
	      transaction
	    );
	  },
	
	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: ReactPerf.measure(
	    'ReactDOMComponent',
	    'updateComponent',
	    function(transaction, prevElement) {
	      assertValidProps(this._currentElement.props);
	      ReactComponent.Mixin.updateComponent.call(
	        this,
	        transaction,
	        prevElement
	      );
	      this._updateDOMProperties(prevElement.props, transaction);
	      this._updateDOMChildren(prevElement.props, transaction);
	    }
	  ),
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMProperties: function(lastProps, transaction) {
	    var nextProps = this.props;
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) ||
	         !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = lastProps[propKey];
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        deleteListener(this._rootNodeID, propKey);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        ReactComponent.BackendIDOperations.deletePropertyByID(
	          this._rootNodeID,
	          propKey
	        );
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          nextProp = nextProps.style = assign({}, nextProp);
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) &&
	                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) &&
	                lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, nextProp, transaction);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        ReactComponent.BackendIDOperations.updatePropertyByID(
	          this._rootNodeID,
	          propKey,
	          nextProp
	        );
	      }
	    }
	    if (styleUpdates) {
	      ReactComponent.BackendIDOperations.updateStylesByID(
	        this._rootNodeID,
	        styleUpdates
	      );
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMChildren: function(lastProps, transaction) {
	    var nextProps = this.props;
	
	    var lastContent =
	      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent =
	      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
	
	    var lastHtml =
	      lastProps.dangerouslySetInnerHTML &&
	      lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml =
	      nextProps.dangerouslySetInnerHTML &&
	      nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
	          this._rootNodeID,
	          nextHtml
	        );
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction);
	    }
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function() {
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponent.Mixin.unmountComponent.call(this);
	  }
	
	};
	
	assign(
	  ReactDOMComponent.prototype,
	  ReactComponent.Mixin,
	  ReactDOMComponent.Mixin,
	  ReactMultiChild.Mixin,
	  ReactBrowserComponentMixin
	);
	
	module.exports = ReactDOMComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */
	
	"use strict";
	
	var BeforeInputEventPlugin = __webpack_require__(121);
	var ChangeEventPlugin = __webpack_require__(122);
	var ClientReactRootIndex = __webpack_require__(123);
	var CompositionEventPlugin = __webpack_require__(124);
	var DefaultEventPluginOrder = __webpack_require__(125);
	var EnterLeaveEventPlugin = __webpack_require__(126);
	var ExecutionEnvironment = __webpack_require__(66);
	var HTMLDOMPropertyConfig = __webpack_require__(127);
	var MobileSafariClickEventPlugin = __webpack_require__(128);
	var ReactBrowserComponentMixin = __webpack_require__(102);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(129);
	var ReactDefaultBatchingStrategy = __webpack_require__(130);
	var ReactDOMComponent = __webpack_require__(53);
	var ReactDOMButton = __webpack_require__(131);
	var ReactDOMForm = __webpack_require__(132);
	var ReactDOMImg = __webpack_require__(133);
	var ReactDOMInput = __webpack_require__(134);
	var ReactDOMOption = __webpack_require__(135);
	var ReactDOMSelect = __webpack_require__(136);
	var ReactDOMTextarea = __webpack_require__(137);
	var ReactEventListener = __webpack_require__(138);
	var ReactInjection = __webpack_require__(139);
	var ReactInstanceHandles = __webpack_require__(55);
	var ReactMount = __webpack_require__(57);
	var SelectEventPlugin = __webpack_require__(140);
	var ServerReactRootIndex = __webpack_require__(141);
	var SimpleEventPlugin = __webpack_require__(142);
	var SVGDOMPropertyConfig = __webpack_require__(143);
	
	var createFullPageComponent = __webpack_require__(144);
	
	function inject() {
	  ReactInjection.EventEmitter.injectReactEventListener(
	    ReactEventListener
	  );
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    CompositionEventPlugin: CompositionEventPlugin,
	    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.NativeComponent.injectGenericComponentClass(
	    ReactDOMComponent
	  );
	
	  ReactInjection.NativeComponent.injectComponentClasses({
	    'button': ReactDOMButton,
	    'form': ReactDOMForm,
	    'img': ReactDOMImg,
	    'input': ReactDOMInput,
	    'option': ReactDOMOption,
	    'select': ReactDOMSelect,
	    'textarea': ReactDOMTextarea,
	
	    'html': createFullPageComponent('html'),
	    'head': createFullPageComponent('head'),
	    'body': createFullPageComponent('body')
	  });
	
	  // This needs to happen after createFullPageComponent() otherwise the mixin
	  // gets double injected.
	  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');
	
	  ReactInjection.Updates.injectReconcileTransaction(
	    ReactComponentBrowserEnvironment.ReactReconcileTransaction
	  );
	  ReactInjection.Updates.injectBatchingStrategy(
	    ReactDefaultBatchingStrategy
	  );
	
	  ReactInjection.RootIndex.injectCreateReactRootIndex(
	    ExecutionEnvironment.canUseDOM ?
	      ClientReactRootIndex.createReactRootIndex :
	      ServerReactRootIndex.createReactRootIndex
	  );
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	
	  if ("production" !== process.env.NODE_ENV) {
	    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
	    if ((/[?&]react_perf\b/).test(url)) {
	      var ReactDefaultPerf = __webpack_require__(145);
	      ReactDefaultPerf.start();
	    }
	  }
	}
	
	module.exports = {
	  inject: inject
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var ReactRootIndex = __webpack_require__(109);
	
	var invariant = __webpack_require__(72);
	
	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;
	
	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 100;
	
	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}
	
	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}
	
	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || (
	    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
	  );
	}
	
	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return (
	    descendantID.indexOf(ancestorID) === 0 &&
	    isBoundary(descendantID, ancestorID.length)
	  );
	}
	
	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}
	
	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(ancestorID) && isValidID(destinationID),
	    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
	    ancestorID,
	    destinationID
	  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isAncestorIDOf(ancestorID, destinationID),
	    'getNextDescendantID(...): React has made an invalid assumption about ' +
	    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
	    ancestorID,
	    destinationID
	  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  for (var i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}
	
	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(longestCommonID),
	    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
	    oneID,
	    twoID,
	    longestCommonID
	  ) : invariant(isValidID(longestCommonID)));
	  return longestCommonID;
	}
	
	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  ("production" !== process.env.NODE_ENV ? invariant(
	    start !== stop,
	    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
	    start
	  ) : invariant(start !== stop));
	  var traverseUp = isAncestorIDOf(stop, start);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    traverseUp || isAncestorIDOf(start, stop),
	    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
	    'not have a parent path.',
	    start,
	    stop
	  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start; /* until break */; id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      depth++ < MAX_TREE_DEPTH,
	      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
	      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
	      start, stop
	    ) : invariant(depth++ < MAX_TREE_DEPTH));
	  }
	}
	
	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {
	
	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },
	
	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function(rootID, name) {
	    return rootID + name;
	  },
	
	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },
	
	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },
	
	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },
	
	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getFirstCommonAncestorID: getFirstCommonAncestorID,
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,
	
	  isAncestorIDOf: isAncestorIDOf,
	
	  SEPARATOR: SEPARATOR
	
	};
	
	module.exports = ReactInstanceHandles;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLegacyElement
	 */
	
	"use strict";
	
	var ReactCurrentOwner = __webpack_require__(49);
	
	var invariant = __webpack_require__(72);
	var monitorCodeUse = __webpack_require__(107);
	var warning = __webpack_require__(73);
	
	var legacyFactoryLogs = {};
	function warnForLegacyFactoryCall() {
	  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
	    return;
	  }
	  var owner = ReactCurrentOwner.current;
	  var name = owner && owner.constructor ? owner.constructor.displayName : '';
	  if (!name) {
	    name = 'Something';
	  }
	  if (legacyFactoryLogs.hasOwnProperty(name)) {
	    return;
	  }
	  legacyFactoryLogs[name] = true;
	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    name + ' is calling a React component directly. ' +
	    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
	  ) : null);
	  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
	}
	
	function warnForPlainFunctionType(type) {
	  var isReactClass =
	    type.prototype &&
	    typeof type.prototype.mountComponent === 'function' &&
	    typeof type.prototype.receiveComponent === 'function';
	  if (isReactClass) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Did not expect to get a React class here. Use `Component` instead ' +
	      'of `Component.type` or `this.constructor`.'
	    ) : null);
	  } else {
	    if (!type._reactWarnedForThisType) {
	      try {
	        type._reactWarnedForThisType = true;
	      } catch (x) {
	        // just incase this is a frozen object or some special object
	      }
	      monitorCodeUse(
	        'react_non_component_in_jsx',
	        { version: 3, name: type.name }
	      );
	    }
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'This JSX uses a plain function. Only React components are ' +
	      'valid in React\'s JSX transform.'
	    ) : null);
	  }
	}
	
	function warnForNonLegacyFactory(type) {
	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
	    'Use the string "' + type.type + '" instead.'
	  ) : null);
	}
	
	/**
	 * Transfer static properties from the source to the target. Functions are
	 * rebound to have this reflect the original source.
	 */
	function proxyStaticMethods(target, source) {
	  if (typeof source !== 'function') {
	    return;
	  }
	  for (var key in source) {
	    if (source.hasOwnProperty(key)) {
	      var value = source[key];
	      if (typeof value === 'function') {
	        var bound = value.bind(source);
	        // Copy any properties defined on the function, such as `isRequired` on
	        // a PropTypes validator.
	        for (var k in value) {
	          if (value.hasOwnProperty(k)) {
	            bound[k] = value[k];
	          }
	        }
	        target[key] = bound;
	      } else {
	        target[key] = value;
	      }
	    }
	  }
	}
	
	// We use an object instead of a boolean because booleans are ignored by our
	// mocking libraries when these factories gets mocked.
	var LEGACY_MARKER = {};
	var NON_LEGACY_MARKER = {};
	
	var ReactLegacyElementFactory = {};
	
	ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
	  var legacyCreateFactory = function(type) {
	    if (typeof type !== 'function') {
	      // Non-function types cannot be legacy factories
	      return createFactory(type);
	    }
	
	    if (type.isReactNonLegacyFactory) {
	      // This is probably a factory created by ReactDOM we unwrap it to get to
	      // the underlying string type. It shouldn't have been passed here so we
	      // warn.
	      if ("production" !== process.env.NODE_ENV) {
	        warnForNonLegacyFactory(type);
	      }
	      return createFactory(type.type);
	    }
	
	    if (type.isReactLegacyFactory) {
	      // This is probably a legacy factory created by ReactCompositeComponent.
	      // We unwrap it to get to the underlying class.
	      return createFactory(type.type);
	    }
	
	    if ("production" !== process.env.NODE_ENV) {
	      warnForPlainFunctionType(type);
	    }
	
	    // Unless it's a legacy factory, then this is probably a plain function,
	    // that is expecting to be invoked by JSX. We can just return it as is.
	    return type;
	  };
	  return legacyCreateFactory;
	};
	
	ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
	  var legacyCreateElement = function(type, props, children) {
	    if (typeof type !== 'function') {
	      // Non-function types cannot be legacy factories
	      return createElement.apply(this, arguments);
	    }
	
	    var args;
	
	    if (type.isReactNonLegacyFactory) {
	      // This is probably a factory created by ReactDOM we unwrap it to get to
	      // the underlying string type. It shouldn't have been passed here so we
	      // warn.
	      if ("production" !== process.env.NODE_ENV) {
	        warnForNonLegacyFactory(type);
	      }
	      args = Array.prototype.slice.call(arguments, 0);
	      args[0] = type.type;
	      return createElement.apply(this, args);
	    }
	
	    if (type.isReactLegacyFactory) {
	      // This is probably a legacy factory created by ReactCompositeComponent.
	      // We unwrap it to get to the underlying class.
	      if (type._isMockFunction) {
	        // If this is a mock function, people will expect it to be called. We
	        // will actually call the original mock factory function instead. This
	        // future proofs unit testing that assume that these are classes.
	        type.type._mockedReactClassConstructor = type;
	      }
	      args = Array.prototype.slice.call(arguments, 0);
	      args[0] = type.type;
	      return createElement.apply(this, args);
	    }
	
	    if ("production" !== process.env.NODE_ENV) {
	      warnForPlainFunctionType(type);
	    }
	
	    // This is being called with a plain function we should invoke it
	    // immediately as if this was used with legacy JSX.
	    return type.apply(null, Array.prototype.slice.call(arguments, 1));
	  };
	  return legacyCreateElement;
	};
	
	ReactLegacyElementFactory.wrapFactory = function(factory) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof factory === 'function',
	    'This is suppose to accept a element factory'
	  ) : invariant(typeof factory === 'function'));
	  var legacyElementFactory = function(config, children) {
	    // This factory should not be called when JSX is used. Use JSX instead.
	    if ("production" !== process.env.NODE_ENV) {
	      warnForLegacyFactoryCall();
	    }
	    return factory.apply(this, arguments);
	  };
	  proxyStaticMethods(legacyElementFactory, factory.type);
	  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
	  legacyElementFactory.type = factory.type;
	  return legacyElementFactory;
	};
	
	// This is used to mark a factory that will remain. E.g. we're allowed to call
	// it as a function. However, you're not suppose to pass it to createElement
	// or createFactory, so it will warn you if you do.
	ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
	  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
	  return factory;
	};
	
	// Checks if a factory function is actually a legacy factory pretending to
	// be a class.
	ReactLegacyElementFactory.isValidFactory = function(factory) {
	  // TODO: This will be removed and moved into a class validator or something.
	  return typeof factory === 'function' &&
	    factory.isReactLegacyFactory === LEGACY_MARKER;
	};
	
	ReactLegacyElementFactory.isValidClass = function(factory) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'isValidClass is deprecated and will be removed in a future release. ' +
	      'Use a more specific validator instead.'
	    ) : null);
	  }
	  return ReactLegacyElementFactory.isValidFactory(factory);
	};
	
	ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;
	
	module.exports = ReactLegacyElementFactory;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */
	
	"use strict";
	
	var DOMProperty = __webpack_require__(101);
	var ReactBrowserEventEmitter = __webpack_require__(103);
	var ReactCurrentOwner = __webpack_require__(49);
	var ReactElement = __webpack_require__(50);
	var ReactLegacyElement = __webpack_require__(56);
	var ReactInstanceHandles = __webpack_require__(55);
	var ReactPerf = __webpack_require__(59);
	
	var containsNode = __webpack_require__(110);
	var deprecated = __webpack_require__(64);
	var getReactRootElementInContainer = __webpack_require__(111);
	var instantiateReactComponent = __webpack_require__(112);
	var invariant = __webpack_require__(72);
	var shouldUpdateReactComponent = __webpack_require__(113);
	var warning = __webpack_require__(73);
	
	var createElement = ReactLegacyElement.wrapCreateElement(
	  ReactElement.createElement
	);
	
	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	
	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};
	
	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};
	
	if ("production" !== process.env.NODE_ENV) {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}
	
	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];
	
	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}
	
	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !isValid(cached, id),
	          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
	          ATTR_NAME, id
	        ) : invariant(!isValid(cached, id)));
	
	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }
	
	  return id;
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}
	
	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}
	
	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalGetID(node) === id,
	      'ReactMount: Unexpected modification of `%s`',
	      ATTR_NAME
	    ) : invariant(internalGetID(node) === id));
	
	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}
	
	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}
	
	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(
	    targetID,
	    findDeepestCachedAncestorImpl
	  );
	
	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}
	
	/**
	 * Mounting is the process of initializing a React component by creatings its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function(container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function(
	      prevComponent,
	      nextComponent,
	      container,
	      callback) {
	    var nextProps = nextComponent.props;
	    ReactMount.scrollMonitor(container, function() {
	      prevComponent.replaceProps(nextProps, callback);
	    });
	
	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] =
	        getReactRootElementInContainer(container);
	    }
	
	    return prevComponent;
	  },
	
	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function(nextComponent, container) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        container.nodeType === ELEMENT_NODE_TYPE ||
	        container.nodeType === DOC_NODE_TYPE
	      ),
	      '_registerComponent(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      container.nodeType === ELEMENT_NODE_TYPE ||
	      container.nodeType === DOC_NODE_TYPE
	    )));
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	
	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },
	
	  /**
	   * Render a new component into the DOM.
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: ReactPerf.measure(
	    'ReactMount',
	    '_renderNewRootComponent',
	    function(
	        nextComponent,
	        container,
	        shouldReuseMarkup) {
	      // Various parts of our code (such as ReactCompositeComponent's
	      // _renderValidatedComponent) assume that calls to render aren't nested;
	      // verify that that's the case.
	      ("production" !== process.env.NODE_ENV ? warning(
	        ReactCurrentOwner.current == null,
	        '_renderNewRootComponent(): Render methods should be a pure function ' +
	        'of props and state; triggering nested component updates from ' +
	        'render is not allowed. If necessary, trigger nested updates in ' +
	        'componentDidUpdate.'
	      ) : null);
	
	      var componentInstance = instantiateReactComponent(nextComponent, null);
	      var reactRootID = ReactMount._registerComponent(
	        componentInstance,
	        container
	      );
	      componentInstance.mountComponentIntoNode(
	        reactRootID,
	        container,
	        shouldReuseMarkup
	      );
	
	      if ("production" !== process.env.NODE_ENV) {
	        // Record the root element in case it later gets transplanted.
	        rootElementsByReactRootID[reactRootID] =
	          getReactRootElementInContainer(container);
	      }
	
	      return componentInstance;
	    }
	  ),
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function(nextElement, container, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactElement.isValidElement(nextElement),
	      'renderComponent(): Invalid component element.%s',
	      (
	        typeof nextElement === 'string' ?
	          ' Instead of passing an element string, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        ReactLegacyElement.isValidFactory(nextElement) ?
	          ' Instead of passing a component class, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        // Check if it quacks like a element
	        typeof nextElement.props !== "undefined" ?
	          ' This may be caused by unintentionally loading two independent ' +
	          'copies of React.' :
	          ''
	      )
	    ) : invariant(ReactElement.isValidElement(nextElement)));
	
	    var prevComponent = instancesByReactRootID[getReactRootID(container)];
	
	    if (prevComponent) {
	      var prevElement = prevComponent._currentElement;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        return ReactMount._updateRootComponent(
	          prevComponent,
	          nextElement,
	          container,
	          callback
	        );
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup =
	      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;
	
	    var component = ReactMount._renderNewRootComponent(
	      nextElement,
	      container,
	      shouldReuseMarkup
	    );
	    callback && callback.call(component);
	    return component;
	  },
	
	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into the supplied `container`.
	   *
	   * @param {function} constructor React component constructor.
	   * @param {?object} props Initial props of the component instance.
	   * @param {DOMElement} container DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  constructAndRenderComponent: function(constructor, props, container) {
	    var element = createElement(constructor, props);
	    return ReactMount.render(element, container);
	  },
	
	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into a container node identified by supplied `id`.
	   *
	   * @param {function} componentConstructor React component constructor
	   * @param {?object} props Initial props of the component instance.
	   * @param {string} id ID of the DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in the container node.
	   */
	  constructAndRenderComponentByID: function(constructor, props, id) {
	    var domNode = document.getElementById(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      domNode,
	      'Tried to get element with id of "%s" but it is not present on the page.',
	      id
	    ) : invariant(domNode));
	    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
	  },
	
	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      'unmountComponentAtNode(): Render methods should be a pure function of ' +
	      'props and state; triggering nested component updates from render is ' +
	      'not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);
	
	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      return false;
	    }
	    ReactMount.unmountComponentFromNode(component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if ("production" !== process.env.NODE_ENV) {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },
	
	  /**
	   * Unmounts a component and removes it from the DOM.
	   *
	   * @param {ReactComponent} instance React component instance.
	   * @param {DOMElement} container DOM element to unmount from.
	   * @final
	   * @internal
	   * @see {ReactMount.unmountComponentAtNode}
	   */
	  unmountComponentFromNode: function(instance, container) {
	    instance.unmountComponent();
	
	    if (container.nodeType === DOC_NODE_TYPE) {
	      container = container.documentElement;
	    }
	
	    // http://jsperf.com/emptying-a-node
	    while (container.lastChild) {
	      container.removeChild(container.lastChild);
	    }
	  },
	
	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];
	
	    if ("production" !== process.env.NODE_ENV) {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          // Call internalGetID here because getID calls isValid which calls
	          // findReactContainerForID (this function).
	          internalGetID(rootElement) === reactRootID,
	          'ReactMount: Root element ID differed from reactRootID.'
	        ) : invariant(// Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID));
	
	        var containerChild = container.firstChild;
	        if (containerChild &&
	            reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          console.warn(
	            'ReactMount: Root element has been removed from its original ' +
	            'container. New container:', rootElement.parentNode
	          );
	        }
	      }
	    }
	
	    return container;
	  },
	
	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },
	
	  /**
	   * True if the supplied `node` is rendered by React.
	   *
	   * @param {*} node DOM Element to check.
	   * @return {boolean} True if the DOM Element appears to be rendered by React.
	   * @internal
	   */
	  isRenderedByReact: function(node) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      return false;
	    }
	    var id = ReactMount.getID(node);
	    return id ? id.charAt(0) === SEPARATOR : false;
	  },
	
	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function(node) {
	    var current = node;
	    while (current && current.parentNode !== current) {
	      if (ReactMount.isRenderedByReact(current)) {
	        return current;
	      }
	      current = current.parentNode;
	    }
	    return null;
	  },
	
	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;
	
	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;
	
	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;
	
	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;
	
	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.
	
	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }
	
	        child = child.nextSibling;
	      }
	
	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;
	
	        return targetChild;
	      }
	    }
	
	    firstChildren.length = 0;
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'findComponentRoot(..., %s): Unable to find element. This probably ' +
	      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
	      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
	      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
	      'parent. ' +
	      'Try inspecting the child nodes of the element with React ID `%s`.',
	      targetID,
	      ReactMount.getID(ancestorNode)
	    ) : invariant(false));
	  },
	
	
	  /**
	   * React ID utilities.
	   */
	
	  getReactRootID: getReactRootID,
	
	  getID: getID,
	
	  setID: setID,
	
	  getNode: getNode,
	
	  purgeID: purgeID
	};
	
	// Deprecations (remove for 0.13)
	ReactMount.renderComponent = deprecated(
	  'ReactMount',
	  'renderComponent',
	  'render',
	  this,
	  ReactMount.render
	);
	
	module.exports = ReactMount;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var ReactComponent = __webpack_require__(46);
	var ReactMultiChildUpdateTypes = __webpack_require__(146);
	
	var flattenChildren = __webpack_require__(147);
	var instantiateReactComponent = __webpack_require__(112);
	var shouldUpdateReactComponent = __webpack_require__(113);
	
	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;
	
	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];
	
	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];
	
	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    textContent: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}
	
	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    textContent: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
	      updateQueue,
	      markupQueue
	    );
	    clearQueue();
	  }
	}
	
	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function(nestedChildren, transaction) {
	      var children = flattenChildren(nestedChildren);
	      var mountImages = [];
	      var index = 0;
	      this._renderedChildren = children;
	      for (var name in children) {
	        var child = children[name];
	        if (children.hasOwnProperty(name)) {
	          // The rendered children must be turned into instances as they're
	          // mounted.
	          var childInstance = instantiateReactComponent(child, null);
	          children[name] = childInstance;
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = childInstance.mountComponent(
	            rootID,
	            transaction,
	            this._mountDepth + 1
	          );
	          childInstance._mountIndex = index;
	          mountImages.push(mountImage);
	          index++;
	        }
	      }
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          errorThrown ? clearQueue() : processQueue();
	        }
	      }
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function(nextNestedChildren, transaction) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildren, transaction);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          errorThrown ? clearQueue() : processQueue();
	        }
	      }
	    },
	
	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function(nextNestedChildren, transaction) {
	      var nextChildren = flattenChildren(nextNestedChildren);
	      var prevChildren = this._renderedChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var prevElement = prevChild && prevChild._currentElement;
	        var nextElement = nextChildren[name];
	        if (shouldUpdateReactComponent(prevElement, nextElement)) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild.receiveComponent(nextElement, transaction);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChildByName(prevChild, name);
	          }
	          // The child must be instantiated before it's mounted.
	          var nextChildInstance = instantiateReactComponent(
	            nextElement,
	            null
	          );
	          this._mountChildByNameAtIndex(
	            nextChildInstance, name, nextIndex, transaction
	          );
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) &&
	            !(nextChildren && nextChildren[name])) {
	          this._unmountChildByName(prevChildren[name], name);
	        }
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function() {
	      var renderedChildren = this._renderedChildren;
	      for (var name in renderedChildren) {
	        var renderedChild = renderedChildren[name];
	        // TODO: When is this not true?
	        if (renderedChild.unmountComponent) {
	          renderedChild.unmountComponent();
	        }
	      }
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function(child, mountImage) {
	      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },
	
	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function(child, name, index, transaction) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = child.mountComponent(
	        rootID,
	        transaction,
	        this._mountDepth + 1
	      );
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	      this._renderedChildren = this._renderedChildren || {};
	      this._renderedChildren[name] = child;
	    },
	
	    /**
	     * Unmounts a rendered child by name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @param {string} name Name of the child in `this._renderedChildren`.
	     * @private
	     */
	    _unmountChildByName: function(child, name) {
	      this.removeChild(child);
	      child._mountIndex = null;
	      child.unmountComponent();
	      delete this._renderedChildren[name];
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,
	
	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,
	
	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function(objName, fnName, func) {
	    if ("production" !== process.env.NODE_ENV) {
	      var measuredFunc = null;
	      var wrapper = function() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },
	
	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};
	
	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}
	
	module.exports = ReactPerf;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */
	
	"use strict";
	
	var ReactElement = __webpack_require__(50);
	var ReactPropTypeLocationNames = __webpack_require__(118);
	
	var deprecated = __webpack_require__(64);
	var emptyFunction = __webpack_require__(148);
	
	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */
	
	var ANONYMOUS = '<<anonymous>>';
	
	var elementTypeChecker = createElementTypeChecker();
	var nodeTypeChecker = createNodeChecker();
	
	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	
	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: elementTypeChecker,
	  instanceOf: createInstanceTypeChecker,
	  node: nodeTypeChecker,
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker,
	
	  component: deprecated(
	    'React.PropTypes',
	    'component',
	    'element',
	    this,
	    elementTypeChecker
	  ),
	  renderable: deprecated(
	    'React.PropTypes',
	    'renderable',
	    'node',
	    this,
	    nodeTypeChecker
	  )
	};
	
	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location) {
	    componentName = componentName || ANONYMOUS;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error(
	          ("Required " + locationName + " `" + propName + "` was not specified in ")+
	          ("`" + componentName + "`.")
	        );
	      }
	    } else {
	      return validate(props, propName, componentName, location);
	    }
	  }
	
	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);
	
	  return chainedCheckType;
	}
	
	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);
	
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
	        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
	      );
	    }
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns());
	}
	
	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
	      );
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactElement.")
	      );
	    }
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
	      );
	    }
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createEnumTypeChecker(expectedValues) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
	      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
	      );
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  function validate(props, propName, componentName, location) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location) == null) {
	        return;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	      ("`" + componentName + "`.")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createNodeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactNode.")
	      );
	    }
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
	        ("supplied to `" + componentName + "`, expected `object`.")
	      );
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location);
	      if (error) {
	        return error;
	      }
	    }
	  }
	  return createChainableTypeChecker(validate, 'expected `object`');
	}
	
	function isNode(propValue) {
	  switch(typeof propValue) {
	    case 'number':
	    case 'string':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	      for (var k in propValue) {
	        if (!isNode(propValue[k])) {
	          return false;
	        }
	      }
	      return true;
	    default:
	      return false;
	  }
	}
	
	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}
	
	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}
	
	module.exports = ReactPropTypes;


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	"use strict";
	
	var ReactElement = __webpack_require__(50);
	var ReactInstanceHandles = __webpack_require__(55);
	var ReactMarkupChecksum = __webpack_require__(119);
	var ReactServerRenderingTransaction =
	  __webpack_require__(120);
	
	var instantiateReactComponent = __webpack_require__(112);
	var invariant = __webpack_require__(72);
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToString(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));
	
	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);
	
	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, 0);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToStaticMarkup(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));
	
	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);
	
	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, 0);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}
	
	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTextComponent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var DOMPropertyOperations = __webpack_require__(43);
	var ReactComponent = __webpack_require__(46);
	var ReactElement = __webpack_require__(50);
	
	var assign = __webpack_require__(63);
	var escapeTextForBrowser = __webpack_require__(104);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactTextComponent = function(props) {
	  // This constructor and it's argument is currently used by mocks.
	};
	
	assign(ReactTextComponent.prototype, ReactComponent.Mixin, {
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {number} mountDepth number of components in the owner hierarchy
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, mountDepth) {
	    ReactComponent.Mixin.mountComponent.call(
	      this,
	      rootID,
	      transaction,
	      mountDepth
	    );
	
	    var escapedText = escapeTextForBrowser(this.props);
	
	    if (transaction.renderToStaticMarkup) {
	      // Normally we'd wrap this in a `span` for the reasons stated above, but
	      // since this is a situation where React won't take over (static pages),
	      // we can simply return the text as it is.
	      return escapedText;
	    }
	
	    return (
	      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
	        escapedText +
	      '</span>'
	    );
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {object} nextComponent Contains the next text content.
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function(nextComponent, transaction) {
	    var nextProps = nextComponent.props;
	    if (nextProps !== this.props) {
	      this.props = nextProps;
	      ReactComponent.BackendIDOperations.updateTextContentByID(
	        this._rootNodeID,
	        nextProps
	      );
	    }
	  }
	
	});
	
	var ReactTextComponentFactory = function(text) {
	  // Bypass validation and configuration
	  return new ReactElement(ReactTextComponent, null, null, null, null, text);
	};
	
	ReactTextComponentFactory.type = ReactTextComponent;
	
	module.exports = ReactTextComponentFactory;


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */
	
	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign
	
	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }
	
	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }
	
	    var from = Object(nextSource);
	
	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.
	
	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }
	
	  return to;
	};
	
	module.exports = assign;


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */
	
	var assign = __webpack_require__(63);
	var warning = __webpack_require__(73);
	
	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} namespace The namespace of the call, eg 'React'
	 * @param {string} oldName The old function name, eg 'renderComponent'
	 * @param {string} newName The new function name, eg 'render'
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {*} Will be the value as returned from `fn`
	 */
	function deprecated(namespace, oldName, newName, ctx, fn) {
	  var warned = false;
	  if ("production" !== process.env.NODE_ENV) {
	    var newFn = function() {
	      ("production" !== process.env.NODE_ENV ? warning(
	        warned,
	        (namespace + "." + oldName + " will be deprecated in a future version. ") +
	        ("Use " + namespace + "." + newName + " instead.")
	      ) : null);
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    newFn.displayName = (namespace + "_" + oldName);
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }
	
	  return fn;
	}
	
	module.exports = deprecated;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	"use strict";
	
	var ReactElement = __webpack_require__(50);
	
	var invariant = __webpack_require__(72);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(children),
	    'onlyChild must be passed a children with exactly one child.'
	  ) : invariant(ReactElement.isValidElement(children)));
	  return children;
	}
	
	module.exports = onlyChild;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */
	
	/*jslint evil: true */
	
	"use strict";
	
	var canUseDOM = !!(
	  typeof window !== 'undefined' &&
	  window.document &&
	  window.document.createElement
	);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./admin": 154,
		"./admin.js": 154,
		"./aggregation_cursor": 155,
		"./aggregation_cursor.js": 155,
		"./auth/mongodb_cr": 156,
		"./auth/mongodb_cr.js": 156,
		"./auth/mongodb_gssapi": 157,
		"./auth/mongodb_gssapi.js": 157,
		"./auth/mongodb_plain": 158,
		"./auth/mongodb_plain.js": 158,
		"./auth/mongodb_scram": 159,
		"./auth/mongodb_scram.js": 159,
		"./auth/mongodb_sspi": 160,
		"./auth/mongodb_sspi.js": 160,
		"./auth/mongodb_x509": 161,
		"./auth/mongodb_x509.js": 161,
		"./collection": 172,
		"./collection.js": 172,
		"./collection/aggregation": 162,
		"./collection/aggregation.js": 162,
		"./collection/batch/common": 163,
		"./collection/batch/common.js": 163,
		"./collection/batch/ordered": 164,
		"./collection/batch/ordered.js": 164,
		"./collection/batch/unordered": 165,
		"./collection/batch/unordered.js": 165,
		"./collection/commands": 166,
		"./collection/commands.js": 166,
		"./collection/core": 167,
		"./collection/core.js": 167,
		"./collection/geo": 168,
		"./collection/geo.js": 168,
		"./collection/index": 169,
		"./collection/index.js": 169,
		"./collection/query": 170,
		"./collection/query.js": 170,
		"./collection/shared": 171,
		"./collection/shared.js": 171,
		"./command_cursor": 173,
		"./command_cursor.js": 173,
		"./commands/base_command": 174,
		"./commands/base_command.js": 174,
		"./commands/db_command": 175,
		"./commands/db_command.js": 175,
		"./commands/delete_command": 176,
		"./commands/delete_command.js": 176,
		"./commands/get_more_command": 177,
		"./commands/get_more_command.js": 177,
		"./commands/insert_command": 178,
		"./commands/insert_command.js": 178,
		"./commands/kill_cursor_command": 179,
		"./commands/kill_cursor_command.js": 179,
		"./commands/query_command": 180,
		"./commands/query_command.js": 180,
		"./commands/update_command": 181,
		"./commands/update_command.js": 181,
		"./connection/base": 182,
		"./connection/base.js": 182,
		"./connection/connection": 183,
		"./connection/connection.js": 183,
		"./connection/connection_pool": 184,
		"./connection/connection_pool.js": 184,
		"./connection/connection_utils": 185,
		"./connection/connection_utils.js": 185,
		"./connection/mongos": 186,
		"./connection/mongos.js": 186,
		"./connection/read_preference": 187,
		"./connection/read_preference.js": 187,
		"./connection/repl_set/ha": 188,
		"./connection/repl_set/ha.js": 188,
		"./connection/repl_set/options": 189,
		"./connection/repl_set/options.js": 189,
		"./connection/repl_set/repl_set": 190,
		"./connection/repl_set/repl_set.js": 190,
		"./connection/repl_set/repl_set_state": 191,
		"./connection/repl_set/repl_set_state.js": 191,
		"./connection/repl_set/strategies/ping_strategy": 192,
		"./connection/repl_set/strategies/ping_strategy.js": 192,
		"./connection/repl_set/strategies/statistics_strategy": 193,
		"./connection/repl_set/strategies/statistics_strategy.js": 193,
		"./connection/server": 194,
		"./connection/server.js": 194,
		"./connection/server_capabilities": 195,
		"./connection/server_capabilities.js": 195,
		"./connection/url_parser": 196,
		"./connection/url_parser.js": 196,
		"./cursor": 197,
		"./cursor.js": 197,
		"./cursorstream": 198,
		"./cursorstream.js": 198,
		"./db": 199,
		"./db.js": 199,
		"./gridfs/chunk": 200,
		"./gridfs/chunk.js": 200,
		"./gridfs/grid": 201,
		"./gridfs/grid.js": 201,
		"./gridfs/gridstore": 202,
		"./gridfs/gridstore.js": 202,
		"./gridfs/readstream": 203,
		"./gridfs/readstream.js": 203,
		"./index": 14,
		"./index.js": 14,
		"./mongo_client": 204,
		"./mongo_client.js": 204,
		"./responses/mongo_reply": 205,
		"./responses/mongo_reply.js": 205,
		"./scope": 206,
		"./scope.js": 206,
		"./utils": 207,
		"./utils.js": 207
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 67;


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var warning = __webpack_require__(73);
	var invariant = __webpack_require__(72);
	
	function checkPropTypes(componentName, propTypes, props) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error = propTypes[propName](props, propName, componentName);
	
	      if (error instanceof Error) warning(false, error.message);
	    }
	  }
	}
	
	var Configuration = {
	
	  statics: {
	
	    validateProps: function validateProps(props) {
	      checkPropTypes(this.displayName, this.propTypes, props);
	    }
	
	  },
	
	  render: function render() {
	    invariant(false, "%s elements are for router configuration only and should not be rendered", this.constructor.displayName);
	  }
	
	};
	
	module.exports = Configuration;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var assign = __webpack_require__(63);
	var ReactPropTypes = __webpack_require__(3).PropTypes;
	
	var PropTypes = assign({
	
	  /**
	   * Requires that the value of a prop be falsy.
	   */
	  falsy: function falsy(props, propName, componentName) {
	    if (props[propName]) {
	      return new Error("<" + componentName + "> may not have a \"" + propName + "\" prop");
	    }
	  }
	
	}, ReactPropTypes);
	
	module.exports = PropTypes;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule cx
	 */
	
	/**
	 * This function is used to mark string literals representing CSS class names
	 * so that they can be transformed statically. This allows for modularization
	 * and minification of CSS class names.
	 *
	 * In static_upstream, this function is actually implemented, but it should
	 * eventually be replaced with something more descriptive, and the transform
	 * that is used in the main stack should be ported for use elsewhere.
	 *
	 * @param string|object className to modularize, or an object of key/values.
	 *                      In the object case, the values are conditions that
	 *                      determine if the className keys should be included.
	 * @param [string ...]  Variable list of classNames in the string case.
	 * @return string       Renderable space-separated CSS className.
	 */
	function cx(classNames) {
	  if (typeof classNames == 'object') {
	    return Object.keys(classNames).filter(function(className) {
	      return classNames[className];
	    }).join(' ');
	  } else {
	    return Array.prototype.join.call(arguments, ' ');
	  }
	}
	
	module.exports = cx;


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	/**
	 * Actions that modify the URL.
	 */
	var LocationActions = {
	
	  /**
	   * Indicates a new location is being pushed to the history stack.
	   */
	  PUSH: "push",
	
	  /**
	   * Indicates the current location should be replaced.
	   */
	  REPLACE: "replace",
	
	  /**
	   * Indicates the most recent entry should be removed from the history stack.
	   */
	  POP: "pop"
	
	};
	
	module.exports = LocationActions;

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */
	
	"use strict";
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};
	
	module.exports = invariant;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */
	
	"use strict";
	
	var emptyFunction = __webpack_require__(148);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if ("production" !== process.env.NODE_ENV) {
	  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
	    }
	  };
	}
	
	module.exports = warning;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var PropTypes = __webpack_require__(69);
	
	/**
	 * Provides the router with context for Router.Navigation.
	 */
	var NavigationContext = {
	
	  childContextTypes: {
	    makePath: PropTypes.func.isRequired,
	    makeHref: PropTypes.func.isRequired,
	    transitionTo: PropTypes.func.isRequired,
	    replaceWith: PropTypes.func.isRequired,
	    goBack: PropTypes.func.isRequired
	  },
	
	  getChildContext: function getChildContext() {
	    return {
	      makePath: this.constructor.makePath.bind(this.constructor),
	      makeHref: this.constructor.makeHref.bind(this.constructor),
	      transitionTo: this.constructor.transitionTo.bind(this.constructor),
	      replaceWith: this.constructor.replaceWith.bind(this.constructor),
	      goBack: this.constructor.goBack.bind(this.constructor)
	    };
	  }
	
	};
	
	module.exports = NavigationContext;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var invariant = __webpack_require__(72);
	var canUseDOM = __webpack_require__(66).canUseDOM;
	var getWindowScrollPosition = __webpack_require__(149);
	
	function shouldUpdateScroll(state, prevState) {
	  if (!prevState) {
	    return true;
	  } // Don't update scroll position when only the query has changed.
	  if (state.pathname === prevState.pathname) {
	    return false;
	  }var routes = state.routes;
	  var prevRoutes = prevState.routes;
	
	  var sharedAncestorRoutes = routes.filter(function (route) {
	    return prevRoutes.indexOf(route) !== -1;
	  });
	
	  return !sharedAncestorRoutes.some(function (route) {
	    return route.ignoreScrollBehavior;
	  });
	}
	
	/**
	 * Provides the router with the ability to manage window scroll position
	 * according to its scroll behavior.
	 */
	var ScrollHistory = {
	
	  statics: {
	
	    /**
	     * Records curent scroll position as the last known position for the given URL path.
	     */
	    recordScrollPosition: function recordScrollPosition(path) {
	      if (!this.scrollHistory) this.scrollHistory = {};
	
	      this.scrollHistory[path] = getWindowScrollPosition();
	    },
	
	    /**
	     * Returns the last known scroll position for the given URL path.
	     */
	    getScrollPosition: function getScrollPosition(path) {
	      if (!this.scrollHistory) this.scrollHistory = {};
	
	      return this.scrollHistory[path] || null;
	    }
	
	  },
	
	  componentWillMount: function componentWillMount() {
	    invariant(this.constructor.getScrollBehavior() == null || canUseDOM, "Cannot use scroll behavior without a DOM");
	  },
	
	  componentDidMount: function componentDidMount() {
	    this._updateScroll();
	  },
	
	  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
	    this._updateScroll(prevState);
	  },
	
	  _updateScroll: function _updateScroll(prevState) {
	    if (!shouldUpdateScroll(this.state, prevState)) {
	      return;
	    }var scrollBehavior = this.constructor.getScrollBehavior();
	
	    if (scrollBehavior) scrollBehavior.updateScrollPosition(this.constructor.getScrollPosition(this.state.path), this.state.action);
	  }
	
	};
	
	module.exports = ScrollHistory;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var assign = __webpack_require__(63);
	var PropTypes = __webpack_require__(69);
	var PathUtils = __webpack_require__(83);
	
	function routeIsActive(activeRoutes, routeName) {
	  return activeRoutes.some(function (route) {
	    return route.name === routeName;
	  });
	}
	
	function paramsAreActive(activeParams, params) {
	  for (var property in params) if (String(activeParams[property]) !== String(params[property])) {
	    return false;
	  }return true;
	}
	
	function queryIsActive(activeQuery, query) {
	  for (var property in query) if (String(activeQuery[property]) !== String(query[property])) {
	    return false;
	  }return true;
	}
	
	/**
	 * Provides the router with context for Router.State.
	 */
	var StateContext = {
	
	  /**
	   * Returns the current URL path + query string.
	   */
	  getCurrentPath: function getCurrentPath() {
	    return this.state.path;
	  },
	
	  /**
	   * Returns a read-only array of the currently active routes.
	   */
	  getCurrentRoutes: function getCurrentRoutes() {
	    return this.state.routes.slice(0);
	  },
	
	  /**
	   * Returns the current URL path without the query string.
	   */
	  getCurrentPathname: function getCurrentPathname() {
	    return this.state.pathname;
	  },
	
	  /**
	   * Returns a read-only object of the currently active URL parameters.
	   */
	  getCurrentParams: function getCurrentParams() {
	    return assign({}, this.state.params);
	  },
	
	  /**
	   * Returns a read-only object of the currently active query parameters.
	   */
	  getCurrentQuery: function getCurrentQuery() {
	    return assign({}, this.state.query);
	  },
	
	  /**
	   * Returns true if the given route, params, and query are active.
	   */
	  isActive: function isActive(to, params, query) {
	    if (PathUtils.isAbsolute(to)) {
	      return to === this.state.path;
	    }return routeIsActive(this.state.routes, to) && paramsAreActive(this.state.params, params) && (query == null || queryIsActive(this.state.query, query));
	  },
	
	  childContextTypes: {
	    getCurrentPath: PropTypes.func.isRequired,
	    getCurrentRoutes: PropTypes.func.isRequired,
	    getCurrentPathname: PropTypes.func.isRequired,
	    getCurrentParams: PropTypes.func.isRequired,
	    getCurrentQuery: PropTypes.func.isRequired,
	    isActive: PropTypes.func.isRequired
	  },
	
	  getChildContext: function getChildContext() {
	    return {
	      getCurrentPath: this.getCurrentPath,
	      getCurrentRoutes: this.getCurrentRoutes,
	      getCurrentPathname: this.getCurrentPathname,
	      getCurrentParams: this.getCurrentParams,
	      getCurrentQuery: this.getCurrentQuery,
	      isActive: this.isActive
	    };
	  }
	
	};
	
	module.exports = StateContext;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	
	function isValidChild(object) {
	  return object == null || React.isValidElement(object);
	}
	
	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}
	
	module.exports = isReactChildren;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	/* jshint -W058 */
	
	var Cancellation = __webpack_require__(80);
	var Redirect = __webpack_require__(79);
	
	/**
	 * Encapsulates a transition to a given path.
	 *
	 * The willTransitionTo and willTransitionFrom handlers receive
	 * an instance of this class as their first argument.
	 */
	function Transition(path, retry) {
	  this.path = path;
	  this.abortReason = null;
	  // TODO: Change this to router.retryTransition(transition)
	  this.retry = retry.bind(this);
	}
	
	Transition.prototype.abort = function (reason) {
	  if (this.abortReason == null) this.abortReason = reason || "ABORT";
	};
	
	Transition.prototype.redirect = function (to, params, query) {
	  this.abort(new Redirect(to, params, query));
	};
	
	Transition.prototype.cancel = function () {
	  this.abort(new Cancellation());
	};
	
	Transition.from = function (transition, routes, components, callback) {
	  routes.reduce(function (callback, route, index) {
	    return function (error) {
	      if (error || transition.abortReason) {
	        callback(error);
	      } else if (route.onLeave) {
	        try {
	          route.onLeave(transition, components[index], callback);
	
	          // If there is no callback in the argument list, call it automatically.
	          if (route.onLeave.length < 3) callback();
	        } catch (e) {
	          callback(e);
	        }
	      } else {
	        callback();
	      }
	    };
	  }, callback)();
	};
	
	Transition.to = function (transition, routes, params, query, callback) {
	  routes.reduceRight(function (callback, route) {
	    return function (error) {
	      if (error || transition.abortReason) {
	        callback(error);
	      } else if (route.onEnter) {
	        try {
	          route.onEnter(transition, params, query, callback);
	
	          // If there is no callback in the argument list, call it automatically.
	          if (route.onEnter.length < 4) callback();
	        } catch (e) {
	          callback(e);
	        }
	      } else {
	        callback();
	      }
	    };
	  }, callback)();
	};
	
	module.exports = Transition;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	/**
	 * Encapsulates a redirect to the given route.
	 */
	function Redirect(to, params, query) {
	  this.to = to;
	  this.params = params;
	  this.query = query;
	}
	
	module.exports = Redirect;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	/**
	 * Represents a cancellation caused by navigating away
	 * before the previous transition has fully resolved.
	 */
	function Cancellation() {}
	
	module.exports = Cancellation;

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };
	
	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };
	
	/* jshint -W084 */
	var PathUtils = __webpack_require__(83);
	
	function deepSearch(route, pathname, query) {
	  // Check the subtree first to find the most deeply-nested match.
	  var childRoutes = route.childRoutes;
	  if (childRoutes) {
	    var match, childRoute;
	    for (var i = 0, len = childRoutes.length; i < len; ++i) {
	      childRoute = childRoutes[i];
	
	      if (childRoute.isDefault || childRoute.isNotFound) continue; // Check these in order later.
	
	      if (match = deepSearch(childRoute, pathname, query)) {
	        // A route in the subtree matched! Add this route and we're done.
	        match.routes.unshift(route);
	        return match;
	      }
	    }
	  }
	
	  // No child routes matched; try the default route.
	  var defaultRoute = route.defaultRoute;
	  if (defaultRoute && (params = PathUtils.extractParams(defaultRoute.path, pathname))) {
	    return new Match(pathname, params, query, [route, defaultRoute]);
	  } // Does the "not found" route match?
	  var notFoundRoute = route.notFoundRoute;
	  if (notFoundRoute && (params = PathUtils.extractParams(notFoundRoute.path, pathname))) {
	    return new Match(pathname, params, query, [route, notFoundRoute]);
	  } // Last attempt: check this route.
	  var params = PathUtils.extractParams(route.path, pathname);
	  if (params) {
	    return new Match(pathname, params, query, [route]);
	  }return null;
	}
	
	var Match = (function () {
	  function Match(pathname, params, query, routes) {
	    _classCallCheck(this, Match);
	
	    this.pathname = pathname;
	    this.params = params;
	    this.query = query;
	    this.routes = routes;
	  }
	
	  _prototypeProperties(Match, {
	    findMatch: {
	
	      /**
	       * Attempts to match depth-first a route in the given route's
	       * subtree against the given path and returns the match if it
	       * succeeds, null if no match can be made.
	       */
	
	      value: function findMatch(routes, path) {
	        var pathname = PathUtils.withoutQuery(path);
	        var query = PathUtils.extractQuery(path);
	        var match = null;
	
	        for (var i = 0, len = routes.length; match == null && i < len; ++i) match = deepSearch(routes[i], pathname, query);
	
	        return match;
	      },
	      writable: true,
	      configurable: true
	    }
	  });
	
	  return Match;
	})();
	
	module.exports = Match;

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	function supportsHistory() {
	  /*! taken from modernizr
	   * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	   * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	   * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
	   */
	  var ua = navigator.userAgent;
	  if ((ua.indexOf("Android 2.") !== -1 || ua.indexOf("Android 4.0") !== -1) && ua.indexOf("Mobile Safari") !== -1 && ua.indexOf("Chrome") === -1 && ua.indexOf("Windows Phone") === -1) {
	    return false;
	  }
	  return window.history && "pushState" in window.history;
	}
	
	module.exports = supportsHistory;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var invariant = __webpack_require__(72);
	var merge = __webpack_require__(211).merge;
	var qs = __webpack_require__(210);
	
	var paramCompileMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|[*.()\[\]\\+|{}^$]/g;
	var paramInjectMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$?]*[?]?)|[*]/g;
	var paramInjectTrailingSlashMatcher = /\/\/\?|\/\?\/|\/\?/g;
	var queryMatcher = /\?(.+)/;
	
	var _compiledPatterns = {};
	
	function compilePattern(pattern) {
	  if (!(pattern in _compiledPatterns)) {
	    var paramNames = [];
	    var source = pattern.replace(paramCompileMatcher, function (match, paramName) {
	      if (paramName) {
	        paramNames.push(paramName);
	        return "([^/?#]+)";
	      } else if (match === "*") {
	        paramNames.push("splat");
	        return "(.*?)";
	      } else {
	        return "\\" + match;
	      }
	    });
	
	    _compiledPatterns[pattern] = {
	      matcher: new RegExp("^" + source + "$", "i"),
	      paramNames: paramNames
	    };
	  }
	
	  return _compiledPatterns[pattern];
	}
	
	var PathUtils = {
	
	  /**
	   * Returns true if the given path is absolute.
	   */
	  isAbsolute: function isAbsolute(path) {
	    return path.charAt(0) === "/";
	  },
	
	  /**
	   * Joins two URL paths together.
	   */
	  join: function join(a, b) {
	    return a.replace(/\/*$/, "/") + b;
	  },
	
	  /**
	   * Returns an array of the names of all parameters in the given pattern.
	   */
	  extractParamNames: function extractParamNames(pattern) {
	    return compilePattern(pattern).paramNames;
	  },
	
	  /**
	   * Extracts the portions of the given URL path that match the given pattern
	   * and returns an object of param name => value pairs. Returns null if the
	   * pattern does not match the given path.
	   */
	  extractParams: function extractParams(pattern, path) {
	    var _compilePattern = compilePattern(pattern);
	
	    var matcher = _compilePattern.matcher;
	    var paramNames = _compilePattern.paramNames;
	
	    var match = path.match(matcher);
	
	    if (!match) {
	      return null;
	    }var params = {};
	
	    paramNames.forEach(function (paramName, index) {
	      params[paramName] = match[index + 1];
	    });
	
	    return params;
	  },
	
	  /**
	   * Returns a version of the given route path with params interpolated. Throws
	   * if there is a dynamic segment of the route path for which there is no param.
	   */
	  injectParams: function injectParams(pattern, params) {
	    params = params || {};
	
	    var splatIndex = 0;
	
	    return pattern.replace(paramInjectMatcher, function (match, paramName) {
	      paramName = paramName || "splat";
	
	      // If param is optional don't check for existence
	      if (paramName.slice(-1) === "?") {
	        paramName = paramName.slice(0, -1);
	
	        if (params[paramName] == null) return "";
	      } else {
	        invariant(params[paramName] != null, "Missing \"%s\" parameter for path \"%s\"", paramName, pattern);
	      }
	
	      var segment;
	      if (paramName === "splat" && Array.isArray(params[paramName])) {
	        segment = params[paramName][splatIndex++];
	
	        invariant(segment != null, "Missing splat # %s for path \"%s\"", splatIndex, pattern);
	      } else {
	        segment = params[paramName];
	      }
	
	      return segment;
	    }).replace(paramInjectTrailingSlashMatcher, "/");
	  },
	
	  /**
	   * Returns an object that is the result of parsing any query string contained
	   * in the given path, null if the path contains no query string.
	   */
	  extractQuery: function extractQuery(path) {
	    var match = path.match(queryMatcher);
	    return match && qs.parse(match[1]);
	  },
	
	  /**
	   * Returns a version of the given path without the query string.
	   */
	  withoutQuery: function withoutQuery(path) {
	    return path.replace(queryMatcher, "");
	  },
	
	  /**
	   * Returns a version of the given path with the parameters in the given
	   * query merged into the query string.
	   */
	  withQuery: function withQuery(path, query) {
	    var existingQuery = PathUtils.extractQuery(path);
	
	    if (existingQuery) query = query ? merge(existingQuery, query) : existingQuery;
	
	    var queryString = qs.stringify(query, { indices: false });
	
	    if (queryString) {
	      return PathUtils.withoutQuery(path) + "?" + queryString;
	    }return path;
	  }
	
	};
	
	module.exports = PathUtils;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(152);


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	// shim for using process in browser
	
	var process = module.exports = {};
	var queue = [];
	var draining = false;
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    draining = true;
	    var currentQueue;
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        var i = -1;
	        while (++i < len) {
	            currentQueue[i]();
	        }
	        len = queue.length;
	    }
	    draining = false;
	}
	process.nextTick = function (fun) {
	    queue.push(fun);
	    if (!draining) {
	        setTimeout(drainQueue, 0);
	    }
	};
	
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	
	var ReactPropTypes = React.PropTypes;
	
	var ListItem = React.createClass({
	    displayName: "ListItem",
	
	    propTypes: {
	        item: ReactPropTypes.object
	    },
	
	    render: function render() {
	        var item = this.props.item;
	        return React.createElement(
	            "li",
	            { className: "message-list-item" },
	            React.createElement(
	                "div",
	                { className: "message-text" },
	                item.title
	            )
	        );
	    }
	
	});
	
	module.exports = ListItem;
	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//var MongoClient = require('mongodb').MongoClient, assert = require('assert');
	
	var url = "mongodb://192.168.10.170:27017/wepo_company_zoho_bk_26_02_15";
	
	var find = function find(db, collectionName, callback) {
	    var collection = db.collection(collectionName);
	    collection.find({}).toArray(function (err, docs) {
	        assert.equal(err, null);
	        callback(err, docs);
	    });
	};
	
	module.exports = function (context, payload, done) {
	    console.log("loadList Action!!!!121112");
	    context.dispatch("RECEIVE_LIST_START", payload);
	
	    //TODO Create connection to database and read Lead List
	
	    /*    MongoClient.connect(url, function (err, db) {
	            assert.equal(null, err);
	            console.log("Connected to the MongoDB");
	            find(db, 'User', function (err, items) {
	                if (err) {
	                    context.dispatch('RECEIVE_LIST_FAILURE', payload);
	                    done();
	                    return;
	                }
	                context.dispatch('RECEIVE_LIST_SUCCESS', items);
	                done();
	            });
	        });*/
	};
	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	var Link = __webpack_require__(5).Link;
	var StateMixin = __webpack_require__(5).State;
	
	var Nav = React.createClass({
	    displayName: "Nav",
	
	    mixins: [StateMixin],
	    render: function render() {
	        return React.createElement(
	            "ul",
	            { className: "pure-menu pure-menu-open pure-menu-horizontal" },
	            React.createElement(
	                "li",
	                { className: this.isActive("/") ? "pure-menu-selected" : "" },
	                React.createElement(
	                    Link,
	                    { to: "/" },
	                    "Home"
	                )
	            ),
	            React.createElement(
	                "li",
	                { className: this.isActive("/lead") ? "pure-menu-selected" : "" },
	                React.createElement(
	                    Link,
	                    { to: "/lead" },
	                    "Lead"
	                )
	            ),
	            React.createElement(
	                "li",
	                { className: this.isActive("/about") ? "pure-menu-selected" : "" },
	                React.createElement(
	                    Link,
	                    { to: "/about" },
	                    "About"
	                )
	            )
	        );
	    }
	});
	
	module.exports = Nav;
	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(3);
	var updateTime = __webpack_require__(153);
	var TimeStore = __webpack_require__(9);
	var FluxibleMixin = __webpack_require__(11).Mixin;
	
	var Timestamp = React.createClass({
	    displayName: "Timestamp",
	
	    mixins: [FluxibleMixin],
	    statics: {
	        storeListeners: [TimeStore]
	    },
	    getInitialState: function getInitialState() {
	        return this.getStore(TimeStore).getState();
	    },
	    onChange: function onChange() {
	        var state = this.getStore(TimeStore).getState();
	        this.setState(state);
	    },
	    onReset: function onReset(event) {
	        this.executeAction(updateTime);
	    },
	    render: function render() {
	        return React.createElement(
	            "em",
	            { onClick: this.onReset, style: { fontSize: ".8em" } },
	            this.state.time
	        );
	    }
	});
	
	module.exports = Timestamp;
	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Helpers.
	 */
	
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;
	
	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */
	
	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};
	
	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */
	
	function parse(str) {
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}
	
	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}
	
	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}
	
	/**
	 * Pluralization helper.
	 */
	
	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';
	
	var debug = __webpack_require__(4)('Fluxible:Context');
	var objectAssign = __webpack_require__(257);
	__webpack_require__(273);
	
	/**
	 * A request or browser-session context
	 * @class FluxibleContext
	 * @param {Object} options
	 * @param {Fluxible} options.app The Fluxible instance used to create the context
	 * @constructor
	 */
	function FluxContext(options) {
	    options = options || {};
	
	    // Options
	    this._app = options.app;
	
	    // To be created on demand
	    this._dispatcher = null;
	
	    // Plugins
	    this._plugins = [];
	
	    // Set up contexts
	    this._actionContext = null;
	    this._componentContext = null;
	    this._storeContext = null;
	}
	
	/**
	 * Creates an instance of the app level component with given props and a proper component
	 * context.
	 * @param {Object} props
	 * @return {ReactElement}
	 */
	FluxContext.prototype.createElement = function createElement(props) {
	    var Component = this._app.getComponent();
	    if (!Component) {
	        throw new Error('A component was not specified.');
	    }
	    return Component(objectAssign({}, props, {
	        context: this.getComponentContext()
	    }));
	};
	
	/**
	 * Provides plugin mechanism for adding application level settings that are persisted
	 * between server/client and also modification of the FluxibleContext
	 * @method plug
	 * @param {Object} plugin
	 * @param {String} plugin.name Name of the plugin
	 * @param {Function} [plugin.plugActionContext] Method called after action context is created to allow
	 *  dynamically modifying the action context
	 * @param {Function} [plugin.plugComponentContext] Method called after component context is created to
	 *  allow dynamically modifying the component context
	 * @param {Function} [plugin.plugStoreContext] Method called after store context is created to allow
	 *  dynamically modifying the store context
	 * @param {Object} [plugin.dehydrate] Method called to serialize the plugin settings to be persisted
	 *  to the client
	 * @param {Object} [plugin.rehydrate] Method called to rehydrate the plugin settings from the server
	 */
	FluxContext.prototype.plug = function (plugin) {
	    if (!plugin.name) {
	        throw new Error('Context plugin must have a name');
	    }
	    this._plugins.push(plugin);
	};
	
	/**
	 * Executes an action passing an action interface to as the first parameter
	 * @param {Function} action An action creator function that receives actionContext, payload,
	 *  and done as parameters
	 * @param {Object} payload The action payload
	 * @param {Function} done Method to be called once action execution has completed
	 */
	FluxContext.prototype.executeAction = function executeAction(action, payload, done) {
	    var self = this;
	    payload = payload || {};
	    var displayName = action.displayName || action.name;
	    setImmediate(function executeActionImmediate() {
	        debug('Executing action ' + displayName + ' with payload', payload);
	        action(self.getActionContext(), payload, done);
	    });
	};
	
	/**
	 * Sets up the dispatcher with access to the store context
	 * @method _initializeDispatcher
	 * @private
	 */
	FluxContext.prototype._initializeDispatcher = function initializeDispatcher() {
	    this._dispatcher = this._app.createDispatcherInstance(this.getStoreContext());
	};
	
	/**
	 * Returns the context for action controllers
	 * @method getActionContext
	 * @return {Object} Action context information
	 */
	FluxContext.prototype.getActionContext = function getActionContext() {
	    if (this._actionContext) {
	        return this._actionContext;
	    }
	    var self = this;
	
	    if (!self._dispatcher) {
	        self._initializeDispatcher();
	    }
	
	    var actionContext = {
	        dispatch: this._dispatcher.dispatch.bind(this._dispatcher),
	        executeAction: this.executeAction.bind(this),
	        getStore: this._dispatcher.getStore.bind(this._dispatcher)
	    };
	
	    self._plugins.forEach(function pluginsEach(plugin) {
	        var actionContextPlugin = plugin.plugActionContext;
	        if (actionContextPlugin) {
	            actionContextPlugin(actionContext, self, self._app);
	        }
	    });
	
	    self._actionContext = actionContext;
	
	    return self._actionContext;
	};
	
	/**
	 * Returns the context for action controllers
	 * @method getComponentContext
	 * @return {Object} Component context information
	 */
	FluxContext.prototype.getComponentContext = function getComponentContext() {
	    if (this._componentContext) {
	        return this._componentContext;
	    }
	    var self = this;
	    if (!self._dispatcher) {
	        self._initializeDispatcher();
	    }
	
	    var componentContext = {
	        getStore: this._dispatcher.getStore.bind(this._dispatcher),
	        // Prevents components from directly handling the callback for an action
	        executeAction: function componentExecuteAction(action, payload) {
	            self.executeAction(action, payload, function actionHandlerWrapper(err) {
	                var noop = function () {};
	                self.executeAction(self._app._componentActionHandler, { err: err }, noop);
	            });
	        }
	    };
	
	    self._plugins.forEach(function pluginsEach(plugin) {
	        var componentPlugin = plugin.plugComponentContext;
	        if (componentPlugin) {
	            componentPlugin(componentContext, self, self._app);
	        }
	    });
	
	    self._componentContext = componentContext;
	    return self._componentContext;
	};
	
	/**
	 * Returns the context for stores
	 * @method getStoreContext
	 * @return {Object} Store context information
	 */
	FluxContext.prototype.getStoreContext = function getStoreContext() {
	    if (this._storeContext) {
	        return this._storeContext;
	    }
	    var self = this;
	    var storeContext = {};
	
	    self._plugins.forEach(function pluginsEach(plugin) {
	        var storeContextPlugin = plugin.plugStoreContext;
	        if (storeContextPlugin) {
	            storeContextPlugin(storeContext, self, self._app);
	        }
	    });
	
	    self._storeContext = storeContext;
	    return self._storeContext;
	};
	
	/**
	 * Returns a serializable context state
	 * @method dehydrate
	 * @return {Object} See rehydrate method for properties
	 */
	FluxContext.prototype.dehydrate = function dehydrate() {
	    var self = this;
	    var state = {
	        dispatcher: (this._dispatcher && this._dispatcher.dehydrate()) || {},
	        plugins: {}
	    };
	
	    self._plugins.forEach(function pluginsEach(plugin) {
	        if ('function' === typeof plugin.dehydrate) {
	            // Use a namespace for storing plugin state and provide access to the application
	            state.plugins[plugin.name] = plugin.dehydrate(self);
	        }
	    });
	
	    return state;
	};
	
	/**
	 * Rehydrates the context state
	 * @method rehydrate
	 * @param {Object} obj Configuration
	 * @param {Object} obj.plugins Dehydrated context plugin state
	 * @param {Object} obj.dispatcher Dehydrated dispatcher state
	 */
	FluxContext.prototype.rehydrate = function rehydrate(obj) {
	    var self = this;
	    obj.plugins = obj.plugins || {};
	    self._plugins.forEach(function pluginsEach(plugin) {
	        if ('function' === typeof plugin.rehydrate) {
	            // Send in the plugin namespace state and provide access to the application instance
	            plugin.rehydrate(obj.plugins[plugin.name], self);
	        }
	    });
	
	    self._dispatcher = this._app.createDispatcherInstance(self.getStoreContext());
	    self._dispatcher.rehydrate(obj.dispatcher || {});
	};
	
	module.exports = FluxContext;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).setImmediate))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(209);


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */
	
	"use strict";
	
	var keyMirror = __webpack_require__(98);
	
	var PropagationPhases = keyMirror({bubbled: null, captured: null});
	
	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topBlur: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topReset: null,
	  topScroll: null,
	  topSelectionChange: null,
	  topSubmit: null,
	  topTextInput: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topWheel: null
	});
	
	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};
	
	module.exports = EventConstants;


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */
	
	"use strict";
	
	var invariant = __webpack_require__(72);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};
	
	var standardReleaser = function(instance) {
	  var Klass = this;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance instanceof Klass,
	    'Trying to release an instance into a pool of a different type.'
	  ) : invariant(instance instanceof Klass));
	  if (instance.destructor) {
	    instance.destructor();
	  }
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};
	
	module.exports = PooledClass;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */
	
	"use strict";
	
	var ReactElement = __webpack_require__(50);
	var ReactInstanceHandles = __webpack_require__(55);
	
	var invariant = __webpack_require__(72);
	
	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';
	
	/**
	 * TODO: Test that:
	 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
	 * 2. it('should fail when supplied duplicate key', function() {
	 * 3. That a single child and an array with one item have the same key pattern.
	 * });
	 */
	
	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};
	
	var userProvidedKeyEscapeRegex = /[=.:]/g;
	
	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} key Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(
	    userProvidedKeyEscapeRegex,
	    userProvidedKeyEscaper
	  );
	}
	
	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!number} indexSoFar Number of children encountered until this point.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	var traverseAllChildrenImpl =
	  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
	    var nextName, nextIndex;
	    var subtreeCount = 0;  // Count of children found in the current subtree.
	    if (Array.isArray(children)) {
	      for (var i = 0; i < children.length; i++) {
	        var child = children[i];
	        nextName = (
	          nameSoFar +
	          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
	          getComponentKey(child, i)
	        );
	        nextIndex = indexSoFar + subtreeCount;
	        subtreeCount += traverseAllChildrenImpl(
	          child,
	          nextName,
	          nextIndex,
	          callback,
	          traverseContext
	        );
	      }
	    } else {
	      var type = typeof children;
	      var isOnlyChild = nameSoFar === '';
	      // If it's the only child, treat the name as if it was wrapped in an array
	      // so that it's consistent if the number of children grows
	      var storageName =
	        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
	      if (children == null || type === 'boolean') {
	        // All of the above are perceived as null.
	        callback(traverseContext, null, storageName, indexSoFar);
	        subtreeCount = 1;
	      } else if (type === 'string' || type === 'number' ||
	                 ReactElement.isValidElement(children)) {
	        callback(traverseContext, children, storageName, indexSoFar);
	        subtreeCount = 1;
	      } else if (type === 'object') {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !children || children.nodeType !== 1,
	          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
	          'elements are not valid children of React components.'
	        ) : invariant(!children || children.nodeType !== 1));
	        for (var key in children) {
	          if (children.hasOwnProperty(key)) {
	            nextName = (
	              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
	              wrapUserProvidedKey(key) + SUBSEPARATOR +
	              getComponentKey(children[key], 0)
	            );
	            nextIndex = indexSoFar + subtreeCount;
	            subtreeCount += traverseAllChildrenImpl(
	              children[key],
	              nextName,
	              nextIndex,
	              callback,
	              traverseContext
	            );
	          }
	        }
	      }
	    }
	    return subtreeCount;
	  };
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */
	
	"use strict";
	
	var emptyObject = __webpack_require__(212);
	var invariant = __webpack_require__(72);
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	
	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function(object) {
	    return !!(
	      object &&
	      typeof object.attachRef === 'function' &&
	      typeof object.detachRef === 'function'
	    );
	  },
	
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to add a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to remove a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.refs[ref] === component) {
	      owner.detachRef(ref);
	    }
	  },
	
	  /**
	   * A ReactComponent must mix this in to have refs.
	   *
	   * @lends {ReactOwner.prototype}
	   */
	  Mixin: {
	
	    construct: function() {
	      this.refs = emptyObject;
	    },
	
	    /**
	     * Lazily allocates the refs object and stores `component` as `ref`.
	     *
	     * @param {string} ref Reference name.
	     * @param {component} component Component to store as `ref`.
	     * @final
	     * @private
	     */
	    attachRef: function(ref, component) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        component.isOwnedBy(this),
	        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
	        ref
	      ) : invariant(component.isOwnedBy(this)));
	      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
	      refs[ref] = component;
	    },
	
	    /**
	     * Detaches a reference name.
	     *
	     * @param {string} ref Name to dereference.
	     * @final
	     * @private
	     */
	    detachRef: function(ref) {
	      delete this.refs[ref];
	    }
	
	  }
	
	};
	
	module.exports = ReactOwner;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */
	
	"use strict";
	
	var CallbackQueue = __webpack_require__(213);
	var PooledClass = __webpack_require__(94);
	var ReactCurrentOwner = __webpack_require__(49);
	var ReactPerf = __webpack_require__(59);
	var Transaction = __webpack_require__(214);
	
	var assign = __webpack_require__(63);
	var invariant = __webpack_require__(72);
	var warning = __webpack_require__(73);
	
	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
	    'ReactUpdates: must inject a reconcile transaction class and batching ' +
	    'strategy'
	  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
	}
	
	var NESTED_UPDATES = {
	  initialize: function() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function() {
	    this.callbackQueue.reset();
	  },
	  close: function() {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction =
	    ReactUpdates.ReactReconcileTransaction.getPooled();
	}
	
	assign(
	  ReactUpdatesFlushTransaction.prototype,
	  Transaction.Mixin, {
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(
	      this,
	      this.reconcileTransaction.perform,
	      this.reconcileTransaction,
	      method,
	      scope,
	      a
	    );
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b);
	}
	
	/**
	 * Array comparator for ReactComponents by owner depth
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountDepthComparator(c1, c2) {
	  return c1._mountDepth - c2._mountDepth;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    len === dirtyComponents.length,
	    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
	    'match dirty-components array length (%s).',
	    len,
	    dirtyComponents.length
	  ) : invariant(len === dirtyComponents.length));
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountDepthComparator);
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, ignore them
	    // TODO: Queue unmounts in the same list to avoid this happening at all
	    var component = dirtyComponents[i];
	    if (component.isMounted()) {
	      // If performUpdateIfNecessary happens to enqueue any new updates, we
	      // shouldn't execute the callbacks until the next render happens, so
	      // stash the callbacks first
	      var callbacks = component._pendingCallbacks;
	      component._pendingCallbacks = null;
	      component.performUpdateIfNecessary(transaction.reconcileTransaction);
	
	      if (callbacks) {
	        for (var j = 0; j < callbacks.length; j++) {
	          transaction.callbackQueue.enqueue(
	            callbacks[j],
	            component
	          );
	        }
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = ReactPerf.measure(
	  'ReactUpdates',
	  'flushBatchedUpdates',
	  function() {
	    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	    // array and perform any updates enqueued by mount-ready handlers (i.e.,
	    // componentDidUpdate) but we need to check here too in order to catch
	    // updates enqueued by setState callbacks and asap calls.
	    while (dirtyComponents.length || asapEnqueued) {
	      if (dirtyComponents.length) {
	        var transaction = ReactUpdatesFlushTransaction.getPooled();
	        transaction.perform(runBatchedUpdates, null, transaction);
	        ReactUpdatesFlushTransaction.release(transaction);
	      }
	
	      if (asapEnqueued) {
	        asapEnqueued = false;
	        var queue = asapCallbackQueue;
	        asapCallbackQueue = CallbackQueue.getPooled();
	        queue.notifyAll();
	        CallbackQueue.release(queue);
	      }
	    }
	  }
	);
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component, callback) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !callback || typeof callback === "function",
	    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
	    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	    'isn\'t callable.'
	  ) : invariant(!callback || typeof callback === "function"));
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	  ("production" !== process.env.NODE_ENV ? warning(
	    ReactCurrentOwner.current == null,
	    'enqueueUpdate(): Render methods should be a pure function of props ' +
	    'and state; triggering nested component updates from render is not ' +
	    'allowed. If necessary, trigger nested updates in ' +
	    'componentDidUpdate.'
	  ) : null);
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
	    return;
	  }
	
	  dirtyComponents.push(component);
	
	  if (callback) {
	    if (component._pendingCallbacks) {
	      component._pendingCallbacks.push(callback);
	    } else {
	      component._pendingCallbacks = [callback];
	    }
	  }
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    batchingStrategy.isBatchingUpdates,
	    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
	    'updates are not being batched.'
	  ) : invariant(batchingStrategy.isBatchingUpdates));
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function(ReconcileTransaction) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReconcileTransaction,
	      'ReactUpdates: must provide a reconcile transaction class'
	    ) : invariant(ReconcileTransaction));
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function(_batchingStrategy) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      _batchingStrategy,
	      'ReactUpdates: must provide a batching strategy'
	    ) : invariant(_batchingStrategy));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.batchedUpdates === 'function',
	      'ReactUpdates: must provide a batchedUpdates() function'
	    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
	      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
	    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var invariant = __webpack_require__(72);
	
	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    obj instanceof Object && !Array.isArray(obj),
	    'keyMirror(...): Argument must be an object.'
	  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};
	
	module.exports = keyMirror;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}
	
	module.exports = mapObject;


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var CSSProperty = __webpack_require__(215);
	var ExecutionEnvironment = __webpack_require__(66);
	
	var camelizeStyleName = __webpack_require__(216);
	var dangerousStyleValue = __webpack_require__(217);
	var hyphenateStyleName = __webpack_require__(218);
	var memoizeStringOnly = __webpack_require__(108);
	var warning = __webpack_require__(73);
	
	var processStyleName = memoizeStringOnly(function(styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if ("production" !== process.env.NODE_ENV) {
	  var warnedStyleNames = {};
	
	  var warnHyphenatedStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported style property ' + name + '. Did you mean ' +
	      camelizeStyleName(name) + '?'
	    ) : null);
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        if (styleName.indexOf('-') > -1) {
	          warnHyphenatedStyleName(styleName);
	        }
	      }
	      var styleValue = styles[styleName];
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        if (styleName.indexOf('-') > -1) {
	          warnHyphenatedStyleName(styleName);
	        }
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = CSSPropertyOperations;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */
	
	/*jslint bitwise: true */
	
	"use strict";
	
	var invariant = __webpack_require__(72);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function(domPropertyConfig) {
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(
	        domPropertyConfig.isCustomAttribute
	      );
	    }
	
	    for (var propName in Properties) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.isStandardName.hasOwnProperty(propName),
	        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
	        '\'%s\' which has already been injected. You may be accidentally ' +
	        'injecting the same DOM property config twice, or you may be ' +
	        'injecting two configs that have conflicting property names.',
	        propName
	      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));
	
	      DOMProperty.isStandardName[propName] = true;
	
	      var lowerCased = propName.toLowerCase();
	      DOMProperty.getPossibleStandardName[lowerCased] = propName;
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        DOMProperty.getPossibleStandardName[attributeName] = propName;
	        DOMProperty.getAttributeName[propName] = attributeName;
	      } else {
	        DOMProperty.getAttributeName[propName] = lowerCased;
	      }
	
	      DOMProperty.getPropertyName[propName] =
	        DOMPropertyNames.hasOwnProperty(propName) ?
	          DOMPropertyNames[propName] :
	          propName;
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
	      } else {
	        DOMProperty.getMutationMethod[propName] = null;
	      }
	
	      var propConfig = Properties[propName];
	      DOMProperty.mustUseAttribute[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
	      DOMProperty.mustUseProperty[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
	      DOMProperty.hasSideEffects[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
	      DOMProperty.hasBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
	      DOMProperty.hasNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
	      DOMProperty.hasPositiveNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
	      DOMProperty.hasOverloadedBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);
	
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.mustUseAttribute[propName] ||
	          !DOMProperty.mustUseProperty[propName],
	        'DOMProperty: Cannot require using both attribute and property: %s',
	        propName
	      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
	        !DOMProperty.mustUseProperty[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        DOMProperty.mustUseProperty[propName] ||
	          !DOMProperty.hasSideEffects[propName],
	        'DOMProperty: Properties that have side effects must use property: %s',
	        propName
	      ) : invariant(DOMProperty.mustUseProperty[propName] ||
	        !DOMProperty.hasSideEffects[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !!DOMProperty.hasBooleanValue[propName] +
	          !!DOMProperty.hasNumericValue[propName] +
	          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
	        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
	        'numeric value, but not a combination: %s',
	        propName
	      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
	        !!DOMProperty.hasNumericValue[propName] +
	        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
	    }
	  }
	};
	var defaultValueCache = {};
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	
	  /**
	   * Checks whether a property name is a standard property.
	   * @type {Object}
	   */
	  isStandardName: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties.
	   * @type {Object}
	   */
	  getPossibleStandardName: {},
	
	  /**
	   * Mapping from normalized names to attribute names that differ. Attribute
	   * names are used when rendering markup or with `*Attribute()`.
	   * @type {Object}
	   */
	  getAttributeName: {},
	
	  /**
	   * Mapping from normalized names to properties on DOM node instances.
	   * (This includes properties that mutate due to external factors.)
	   * @type {Object}
	   */
	  getPropertyName: {},
	
	  /**
	   * Mapping from normalized names to mutation methods. This will only exist if
	   * mutation cannot be set simply by the property or `setAttribute()`.
	   * @type {Object}
	   */
	  getMutationMethod: {},
	
	  /**
	   * Whether the property must be accessed and mutated as an object property.
	   * @type {Object}
	   */
	  mustUseAttribute: {},
	
	  /**
	   * Whether the property must be accessed and mutated using `*Attribute()`.
	   * (This includes anything that fails `<propName> in <element>`.)
	   * @type {Object}
	   */
	  mustUseProperty: {},
	
	  /**
	   * Whether or not setting a value causes side effects such as triggering
	   * resources to be loaded or text selection changes. We must ensure that
	   * the value is only set if it has changed.
	   * @type {Object}
	   */
	  hasSideEffects: {},
	
	  /**
	   * Whether the property should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasBooleanValue: {},
	
	  /**
	   * Whether the property must be numeric or parse as a
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasNumericValue: {},
	
	  /**
	   * Whether the property must be positive numeric or parse as a positive
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasPositiveNumericValue: {},
	
	  /**
	   * Whether the property can be used as a flag as well as with a value. Removed
	   * when strictly equal to false; present without a value when strictly equal
	   * to true; present with a value otherwise.
	   * @type {Object}
	   */
	  hasOverloadedBooleanValue: {},
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */
	
	"use strict";
	
	var ReactEmptyComponent = __webpack_require__(114);
	var ReactMount = __webpack_require__(57);
	
	var invariant = __webpack_require__(72);
	
	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function() {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isMounted(),
	      'getDOMNode(): A component must be mounted to have a DOM node.'
	    ) : invariant(this.isMounted()));
	    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
	      return null;
	    }
	    return ReactMount.getNode(this._rootNodeID);
	  }
	};
	
	module.exports = ReactBrowserComponentMixin;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(93);
	var EventPluginHub = __webpack_require__(219);
	var EventPluginRegistry = __webpack_require__(220);
	var ReactEventEmitterMixin = __webpack_require__(221);
	var ViewportMetrics = __webpack_require__(222);
	
	var assign = __webpack_require__(63);
	var isEventSupported = __webpack_require__(105);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topBlur: 'blur',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topScroll: 'scroll',
	  topSelectionChange: 'selectionchange',
	  topTextInput: 'textInput',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(
	        ReactBrowserEventEmitter.handleTopLevel
	      );
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function() {
	    return !!(
	      ReactBrowserEventEmitter.ReactEventListener &&
	      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
	    );
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.
	      registrationNameDependencies[registrationName];
	
	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0, l = dependencies.length; i < l; i++) {
	      var dependency = dependencies[i];
	      if (!(
	            isListening.hasOwnProperty(dependency) &&
	            isListening[dependency]
	          )) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'wheel',
	              mountAt
	            );
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'mousewheel',
	              mountAt
	            );
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'DOMMouseScroll',
	              mountAt
	            );
	          }
	        } else if (dependency === topLevelTypes.topScroll) {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              mountAt
	            );
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
	            );
	          }
	        } else if (dependency === topLevelTypes.topFocus ||
	            dependency === topLevelTypes.topBlur) {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topFocus,
	              'focus',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topBlur,
	              'blur',
	              mountAt
	            );
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topFocus,
	              'focusin',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topBlur,
	              'focusout',
	              mountAt
	            );
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	            dependency,
	            topEventMapping[dependency],
	            mountAt
	          );
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },
	
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function(){
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },
	
	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginHub.registrationNameModules,
	
	  putListener: EventPluginHub.putListener,
	
	  getListener: EventPluginHub.getListener,
	
	  deleteListener: EventPluginHub.deleteListener,
	
	  deleteAllListeners: EventPluginHub.deleteAllListeners
	
	});
	
	module.exports = ReactBrowserEventEmitter;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextForBrowser
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var ESCAPE_LOOKUP = {
	  "&": "&amp;",
	  ">": "&gt;",
	  "<": "&lt;",
	  "\"": "&quot;",
	  "'": "&#x27;"
	};
	
	var ESCAPE_REGEX = /[&><"']/g;
	
	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}
	
	module.exports = escapeTextForBrowser;


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */
	
	"use strict";
	
	var ExecutionEnvironment = __webpack_require__(66);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */
	
	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without loosing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};
	
	
	module.exports = keyOf;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule monitorCodeUse
	 */
	
	"use strict";
	
	var invariant = __webpack_require__(72);
	
	/**
	 * Provides open-source compatible instrumentation for monitoring certain API
	 * uses before we're ready to issue a warning or refactor. It accepts an event
	 * name which may only contain the characters [a-z0-9_] and an optional data
	 * object with further information.
	 */
	
	function monitorCodeUse(eventName, data) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    eventName && !/[^a-z0-9_]/.test(eventName),
	    'You must provide an eventName using only the characters [a-z0-9_]'
	  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
	}
	
	module.exports = monitorCodeUse;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function(string) {
	    if (cache.hasOwnProperty(string)) {
	      return cache[string];
	    } else {
	      return cache[string] = callback.call(this, string);
	    }
	  };
	}
	
	module.exports = memoizeStringOnly;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */
	
	"use strict";
	
	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};
	
	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};
	
	module.exports = ReactRootIndex;


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */
	
	var isTextNode = __webpack_require__(223);
	
	/*jslint bitwise:true */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}
	
	module.exports = containsNode;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getReactRootElementInContainer
	 */
	
	"use strict";
	
	var DOC_NODE_TYPE = 9;
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 *                                           a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	module.exports = getReactRootElementInContainer;


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var warning = __webpack_require__(73);
	
	var ReactElement = __webpack_require__(50);
	var ReactLegacyElement = __webpack_require__(56);
	var ReactNativeComponent = __webpack_require__(224);
	var ReactEmptyComponent = __webpack_require__(114);
	
	/**
	 * Given an `element` create an instance that will actually be mounted.
	 *
	 * @param {object} element
	 * @param {*} parentCompositeType The composite type that resolved this.
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(element, parentCompositeType) {
	  var instance;
	
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      element && (typeof element.type === 'function' ||
	                     typeof element.type === 'string'),
	      'Only functions or strings can be mounted as React components.'
	    ) : null);
	
	    // Resolve mock instances
	    if (element.type._mockedReactClassConstructor) {
	      // If this is a mocked class, we treat the legacy factory as if it was the
	      // class constructor for future proofing unit tests. Because this might
	      // be mocked as a legacy factory, we ignore any warnings triggerd by
	      // this temporary hack.
	      ReactLegacyElement._isLegacyCallWarningEnabled = false;
	      try {
	        instance = new element.type._mockedReactClassConstructor(
	          element.props
	        );
	      } finally {
	        ReactLegacyElement._isLegacyCallWarningEnabled = true;
	      }
	
	      // If the mock implementation was a legacy factory, then it returns a
	      // element. We need to turn this into a real component instance.
	      if (ReactElement.isValidElement(instance)) {
	        instance = new instance.type(instance.props);
	      }
	
	      var render = instance.render;
	      if (!render) {
	        // For auto-mocked factories, the prototype isn't shimmed and therefore
	        // there is no render function on the instance. We replace the whole
	        // component with an empty component instance instead.
	        element = ReactEmptyComponent.getEmptyComponent();
	      } else {
	        if (render._isMockFunction && !render._getMockImplementation()) {
	          // Auto-mocked components may have a prototype with a mocked render
	          // function. For those, we'll need to mock the result of the render
	          // since we consider undefined to be invalid results from render.
	          render.mockImplementation(
	            ReactEmptyComponent.getEmptyComponent
	          );
	        }
	        instance.construct(element);
	        return instance;
	      }
	    }
	  }
	
	  // Special case string values
	  if (typeof element.type === 'string') {
	    instance = ReactNativeComponent.createInstanceForTag(
	      element.type,
	      element.props,
	      parentCompositeType
	    );
	  } else {
	    // Normal case for non-mocks and non-strings
	    instance = new element.type(element.props);
	  }
	
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof instance.construct === 'function' &&
	      typeof instance.mountComponent === 'function' &&
	      typeof instance.receiveComponent === 'function',
	      'Only React Components can be mounted.'
	    ) : null);
	  }
	
	  // This actually sets up the internal instance. This will become decoupled
	  // from the public instance in a future diff.
	  instance.construct(element);
	
	  return instance;
	}
	
	module.exports = instantiateReactComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  if (prevElement && nextElement &&
	      prevElement.type === nextElement.type &&
	      prevElement.key === nextElement.key &&
	      prevElement._owner === nextElement._owner) {
	    return true;
	  }
	  return false;
	}
	
	module.exports = shouldUpdateReactComponent;


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */
	
	"use strict";
	
	var ReactElement = __webpack_require__(50);
	
	var invariant = __webpack_require__(72);
	
	var component;
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIdsRegistry = {};
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function(emptyComponent) {
	    component = ReactElement.createFactory(emptyComponent);
	  }
	};
	
	/**
	 * @return {ReactComponent} component The injected empty component.
	 */
	function getEmptyComponent() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    component,
	    'Trying to return null from a render, but no null placeholder component ' +
	    'was injected.'
	  ) : invariant(component));
	  return component();
	}
	
	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIdsRegistry[id] = true;
	}
	
	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIdsRegistry[id];
	}
	
	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return nullComponentIdsRegistry[id];
	}
	
	var ReactEmptyComponent = {
	  deregisterNullComponentID: deregisterNullComponentID,
	  getEmptyComponent: getEmptyComponent,
	  injection: ReactEmptyComponentInjection,
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID
	};
	
	module.exports = ReactEmptyComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */
	
	"use strict";
	
	var ReactErrorUtils = {
	  /**
	   * Creates a guarded version of a function. This is supposed to make debugging
	   * of event handlers easier. To aid debugging with the browser's debugger,
	   * this currently simply returns the original function.
	   *
	   * @param {function} func Function to be executed
	   * @param {string} name The name of the guard
	   * @return {function}
	   */
	  guard: function(func, name) {
	    return func;
	  }
	};
	
	module.exports = ReactErrorUtils;


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTransferer
	 */
	
	"use strict";
	
	var assign = __webpack_require__(63);
	var emptyFunction = __webpack_require__(148);
	var invariant = __webpack_require__(72);
	var joinClasses = __webpack_require__(225);
	var warning = __webpack_require__(73);
	
	var didWarn = false;
	
	/**
	 * Creates a transfer strategy that will merge prop values using the supplied
	 * `mergeStrategy`. If a prop was previously unset, this just sets it.
	 *
	 * @param {function} mergeStrategy
	 * @return {function}
	 */
	function createTransferStrategy(mergeStrategy) {
	  return function(props, key, value) {
	    if (!props.hasOwnProperty(key)) {
	      props[key] = value;
	    } else {
	      props[key] = mergeStrategy(props[key], value);
	    }
	  };
	}
	
	var transferStrategyMerge = createTransferStrategy(function(a, b) {
	  // `merge` overrides the first object's (`props[key]` above) keys using the
	  // second object's (`value`) keys. An object's style's existing `propA` would
	  // get overridden. Flip the order here.
	  return assign({}, b, a);
	});
	
	/**
	 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
	 * NOTE: if you add any more exceptions to this list you should be sure to
	 * update `cloneWithProps()` accordingly.
	 */
	var TransferStrategies = {
	  /**
	   * Never transfer `children`.
	   */
	  children: emptyFunction,
	  /**
	   * Transfer the `className` prop by merging them.
	   */
	  className: createTransferStrategy(joinClasses),
	  /**
	   * Transfer the `style` prop (which is an object) by merging them.
	   */
	  style: transferStrategyMerge
	};
	
	/**
	 * Mutates the first argument by transferring the properties from the second
	 * argument.
	 *
	 * @param {object} props
	 * @param {object} newProps
	 * @return {object}
	 */
	function transferInto(props, newProps) {
	  for (var thisKey in newProps) {
	    if (!newProps.hasOwnProperty(thisKey)) {
	      continue;
	    }
	
	    var transferStrategy = TransferStrategies[thisKey];
	
	    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
	      transferStrategy(props, thisKey, newProps[thisKey]);
	    } else if (!props.hasOwnProperty(thisKey)) {
	      props[thisKey] = newProps[thisKey];
	    }
	  }
	  return props;
	}
	
	/**
	 * ReactPropTransferer are capable of transferring props to another component
	 * using a `transferPropsTo` method.
	 *
	 * @class ReactPropTransferer
	 */
	var ReactPropTransferer = {
	
	  TransferStrategies: TransferStrategies,
	
	  /**
	   * Merge two props objects using TransferStrategies.
	   *
	   * @param {object} oldProps original props (they take precedence)
	   * @param {object} newProps new props to merge in
	   * @return {object} a new object containing both sets of props merged.
	   */
	  mergeProps: function(oldProps, newProps) {
	    return transferInto(assign({}, oldProps), newProps);
	  },
	
	  /**
	   * @lends {ReactPropTransferer.prototype}
	   */
	  Mixin: {
	
	    /**
	     * Transfer props from this component to a target component.
	     *
	     * Props that do not have an explicit transfer strategy will be transferred
	     * only if the target component does not already have the prop set.
	     *
	     * This is usually used to pass down props to a returned root component.
	     *
	     * @param {ReactElement} element Component receiving the properties.
	     * @return {ReactElement} The supplied `component`.
	     * @final
	     * @protected
	     */
	    transferPropsTo: function(element) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        element._owner === this,
	        '%s: You can\'t call transferPropsTo() on a component that you ' +
	        'don\'t own, %s. This usually means you are calling ' +
	        'transferPropsTo() on a component passed in as props or children.',
	        this.constructor.displayName,
	        typeof element.type === 'string' ?
	        element.type :
	        element.type.displayName
	      ) : invariant(element._owner === this));
	
	      if ("production" !== process.env.NODE_ENV) {
	        if (!didWarn) {
	          didWarn = true;
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'transferPropsTo is deprecated. ' +
	            'See http://fb.me/react-transferpropsto for more information.'
	          ) : null);
	        }
	      }
	
	      // Because elements are immutable we have to merge into the existing
	      // props object rather than clone it.
	      transferInto(element.props, this.props);
	
	      return element;
	    }
	
	  }
	};
	
	module.exports = ReactPropTransferer;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */
	
	"use strict";
	
	var keyMirror = __webpack_require__(98);
	
	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});
	
	module.exports = ReactPropTypeLocations;


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */
	
	"use strict";
	
	var ReactPropTypeLocationNames = {};
	
	if ("production" !== process.env.NODE_ENV) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */
	
	"use strict";
	
	var adler32 = __webpack_require__(226);
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function(markup) {
	    var checksum = adler32(markup);
	    return markup.replace(
	      '>',
	      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
	    );
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function(markup, element) {
	    var existingChecksum = element.getAttribute(
	      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	    );
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */
	
	"use strict";
	
	var PooledClass = __webpack_require__(94);
	var CallbackQueue = __webpack_require__(213);
	var ReactPutListenerQueue = __webpack_require__(227);
	var Transaction = __webpack_require__(214);
	
	var assign = __webpack_require__(63);
	var emptyFunction = __webpack_require__(148);
	
	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },
	
	  close: emptyFunction
	};
	
	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },
	
	  close: emptyFunction
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  ON_DOM_READY_QUEUEING
	];
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap proceedures.
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },
	
	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	
	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};
	
	
	assign(
	  ReactServerRenderingTransaction.prototype,
	  Transaction.Mixin,
	  Mixin
	);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(93);
	var EventPropagators = __webpack_require__(228);
	var ExecutionEnvironment = __webpack_require__(66);
	var SyntheticInputEvent = __webpack_require__(229);
	
	var keyOf = __webpack_require__(106);
	
	var canUseTextInputEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'TextEvent' in window &&
	  !('documentMode' in document || isPresto())
	);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (
	    typeof opera === 'object' &&
	    typeof opera.version === 'function' &&
	    parseInt(opera.version(), 10) <= 12
	  );
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBeforeInput: null}),
	      captured: keyOf({onBeforeInputCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topTextInput,
	      topLevelTypes.topPaste
	    ]
	  }
	};
	
	// Track characters inserted via keypress and composition events.
	var fallbackChars = null;
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (
	    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	    !(nativeEvent.ctrlKey && nativeEvent.altKey)
	  );
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	
	    var chars;
	
	    if (canUseTextInputEvent) {
	      switch (topLevelType) {
	        case topLevelTypes.topKeyPress:
	          /**
	           * If native `textInput` events are available, our goal is to make
	           * use of them. However, there is a special case: the spacebar key.
	           * In Webkit, preventing default on a spacebar `textInput` event
	           * cancels character insertion, but it *also* causes the browser
	           * to fall back to its default spacebar behavior of scrolling the
	           * page.
	           *
	           * Tracking at:
	           * https://code.google.com/p/chromium/issues/detail?id=355103
	           *
	           * To avoid this issue, use the keypress event as if no `textInput`
	           * event is available.
	           */
	          var which = nativeEvent.which;
	          if (which !== SPACEBAR_CODE) {
	            return;
	          }
	
	          hasSpaceKeypress = true;
	          chars = SPACEBAR_CHAR;
	          break;
	
	        case topLevelTypes.topTextInput:
	          // Record the characters to be added to the DOM.
	          chars = nativeEvent.data;
	
	          // If it's a spacebar character, assume that we have already handled
	          // it at the keypress level and bail immediately. Android Chrome
	          // doesn't give us keycodes, so we need to blacklist it.
	          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	            return;
	          }
	
	          // Otherwise, carry on.
	          break;
	
	        default:
	          // For other native event types, do nothing.
	          return;
	      }
	    } else {
	      switch (topLevelType) {
	        case topLevelTypes.topPaste:
	          // If a paste event occurs after a keypress, throw out the input
	          // chars. Paste events should not lead to BeforeInput events.
	          fallbackChars = null;
	          break;
	        case topLevelTypes.topKeyPress:
	          /**
	           * As of v27, Firefox may fire keypress events even when no character
	           * will be inserted. A few possibilities:
	           *
	           * - `which` is `0`. Arrow keys, Esc key, etc.
	           *
	           * - `which` is the pressed key code, but no char is available.
	           *   Ex: 'AltGr + d` in Polish. There is no modified character for
	           *   this key combination and no character is inserted into the
	           *   document, but FF fires the keypress for char code `100` anyway.
	           *   No `input` event will occur.
	           *
	           * - `which` is the pressed key code, but a command combination is
	           *   being used. Ex: `Cmd+C`. No character is inserted, and no
	           *   `input` event will occur.
	           */
	          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	            fallbackChars = String.fromCharCode(nativeEvent.which);
	          }
	          break;
	        case topLevelTypes.topCompositionEnd:
	          fallbackChars = nativeEvent.data;
	          break;
	      }
	
	      // If no changes have occurred to the fallback string, no relevant
	      // event has fired and we're done.
	      if (fallbackChars === null) {
	        return;
	      }
	
	      chars = fallbackChars;
	    }
	
	    // If no characters are being inserted, no BeforeInput event should
	    // be fired.
	    if (!chars) {
	      return;
	    }
	
	    var event = SyntheticInputEvent.getPooled(
	      eventTypes.beforeInput,
	      topLevelTargetID,
	      nativeEvent
	    );
	
	    event.data = chars;
	    fallbackChars = null;
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }
	};
	
	module.exports = BeforeInputEventPlugin;


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(93);
	var EventPluginHub = __webpack_require__(219);
	var EventPropagators = __webpack_require__(228);
	var ExecutionEnvironment = __webpack_require__(66);
	var ReactUpdates = __webpack_require__(97);
	var SyntheticEvent = __webpack_require__(230);
	
	var isEventSupported = __webpack_require__(105);
	var isTextInputElement = __webpack_require__(231);
	var keyOf = __webpack_require__(106);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onChange: null}),
	      captured: keyOf({onChangeCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topChange,
	      topLevelTypes.topClick,
	      topLevelTypes.topFocus,
	      topLevelTypes.topInput,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  return (
	    elem.nodeName === 'SELECT' ||
	    (elem.nodeName === 'INPUT' && elem.type === 'file')
	  );
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (
	    !('documentMode' in document) || document.documentMode > 8
	  );
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(
	    eventTypes.change,
	    activeElementID,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue();
	}
	
	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}
	
	function getTargetIDForChangeEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (
	    !('documentMode' in document) || document.documentMode > 9
	  );
	}
	
	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp =  {
	  get: function() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(
	    target.constructor.prototype,
	    'value'
	  );
	
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	
	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	
	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}
	
	// For IE8 and IE9.
	function handleEventsForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetIDForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange ||
	      topLevelType === topLevelTypes.topKeyUp ||
	      topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}
	
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return (
	    elem.nodeName === 'INPUT' &&
	    (elem.type === 'checkbox' || elem.type === 'radio')
	  );
	}
	
	function getTargetIDForClickEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	
	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }
	
	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(
	          eventTypes.change,
	          targetID,
	          nativeEvent
	        );
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */
	
	"use strict";
	
	var nextReactRootIndex = 0;
	
	var ClientReactRootIndex = {
	  createReactRootIndex: function() {
	    return nextReactRootIndex++;
	  }
	};
	
	module.exports = ClientReactRootIndex;


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CompositionEventPlugin
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(93);
	var EventPropagators = __webpack_require__(228);
	var ExecutionEnvironment = __webpack_require__(66);
	var ReactInputSelection = __webpack_require__(239);
	var SyntheticCompositionEvent = __webpack_require__(240);
	
	var getTextContentAccessor = __webpack_require__(241);
	var keyOf = __webpack_require__(106);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var useCompositionEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'CompositionEvent' in window
	);
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. In Korean, for example,
	// the compositionend event contains only one character regardless of
	// how many characters have been composed since compositionstart.
	// We therefore use the fallback data while still using the native
	// events as triggers.
	var useFallbackData = (
	  !useCompositionEvent ||
	  (
	    'documentMode' in document &&
	    document.documentMode > 8 &&
	    document.documentMode <= 11
	  )
	);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	var currentComposition = null;
	
	// Events and their corresponding property names.
	var eventTypes = {
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionEnd: null}),
	      captured: keyOf({onCompositionEndCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionStart: null}),
	      captured: keyOf({onCompositionStartCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionStart,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionUpdate: null}),
	      captured: keyOf({onCompositionUpdateCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionUpdate,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  }
	};
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackStart(topLevelType, nativeEvent) {
	  return (
	    topLevelType === topLevelTypes.topKeyDown &&
	    nativeEvent.keyCode === START_KEYCODE
	  );
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return (nativeEvent.keyCode !== START_KEYCODE);
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Helper class stores information about selection and document state
	 * so we can figure out what changed at a later date.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this.root = root;
	  this.startSelection = ReactInputSelection.getSelection(root);
	  this.startValue = this.getText();
	}
	
	/**
	 * Get current text of input.
	 *
	 * @return {string}
	 */
	FallbackCompositionState.prototype.getText = function() {
	  return this.root.value || this.root[getTextContentAccessor()];
	};
	
	/**
	 * Text that has changed since the start of composition.
	 *
	 * @return {string}
	 */
	FallbackCompositionState.prototype.getData = function() {
	  var endValue = this.getText();
	  var prefixLength = this.startSelection.start;
	  var suffixLength = this.startValue.length - this.startSelection.end;
	
	  return endValue.substr(
	    prefixLength,
	    endValue.length - suffixLength - prefixLength
	  );
	};
	
	/**
	 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
	 * `onCompositionEnd` events on inputs, textareas and contentEditable
	 * nodes.
	 */
	var CompositionEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	
	    var eventType;
	    var data;
	
	    if (useCompositionEvent) {
	      eventType = getCompositionEventType(topLevelType);
	    } else if (!currentComposition) {
	      if (isFallbackStart(topLevelType, nativeEvent)) {
	        eventType = eventTypes.compositionStart;
	      }
	    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionEnd;
	    }
	
	    if (useFallbackData) {
	      // The current composition is stored statically and must not be
	      // overwritten while composition continues.
	      if (!currentComposition && eventType === eventTypes.compositionStart) {
	        currentComposition = new FallbackCompositionState(topLevelTarget);
	      } else if (eventType === eventTypes.compositionEnd) {
	        if (currentComposition) {
	          data = currentComposition.getData();
	          currentComposition = null;
	        }
	      }
	    }
	
	    if (eventType) {
	      var event = SyntheticCompositionEvent.getPooled(
	        eventType,
	        topLevelTargetID,
	        nativeEvent
	      );
	      if (data) {
	        // Inject data generated from fallback path into the synthetic event.
	        // This matches the property of native CompositionEventInterface.
	        event.data = data;
	      }
	      EventPropagators.accumulateTwoPhaseDispatches(event);
	      return event;
	    }
	  }
	};
	
	module.exports = CompositionEventPlugin;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */
	
	"use strict";
	
	 var keyOf = __webpack_require__(106);
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [
	  keyOf({ResponderEventPlugin: null}),
	  keyOf({SimpleEventPlugin: null}),
	  keyOf({TapEventPlugin: null}),
	  keyOf({EnterLeaveEventPlugin: null}),
	  keyOf({ChangeEventPlugin: null}),
	  keyOf({SelectEventPlugin: null}),
	  keyOf({CompositionEventPlugin: null}),
	  keyOf({BeforeInputEventPlugin: null}),
	  keyOf({AnalyticsEventPlugin: null}),
	  keyOf({MobileSafariClickEventPlugin: null})
	];
	
	module.exports = DefaultEventPluginOrder;


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(93);
	var EventPropagators = __webpack_require__(228);
	var SyntheticMouseEvent = __webpack_require__(232);
	
	var ReactMount = __webpack_require__(57);
	var keyOf = __webpack_require__(106);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({onMouseEnter: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  },
	  mouseLeave: {
	    registrationName: keyOf({onMouseLeave: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  }
	};
	
	var extractedEvents = [null, null];
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topMouseOver &&
	        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut &&
	        topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from, to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      to =
	        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
	        win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var fromID = from ? ReactMount.getID(from) : '';
	    var toID = to ? ReactMount.getID(to) : '';
	
	    var leave = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseLeave,
	      fromID,
	      nativeEvent
	    );
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;
	
	    var enter = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseEnter,
	      toID,
	      nativeEvent
	    );
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);
	
	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;
	
	    return extractedEvents;
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */
	
	/*jslint bitwise: true*/
	
	"use strict";
	
	var DOMProperty = __webpack_require__(101);
	var ExecutionEnvironment = __webpack_require__(66);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE =
	  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE =
	  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = (
	    implementation &&
	    implementation.hasFeature &&
	    implementation.hasFeature(
	      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
	      '1.1'
	    )
	  );
	}
	
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(
	    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
	  ),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusMixin
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	
	    /**
	     * Non-standard Properties
	     */
	    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
	    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
	    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
	    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
	    property: null // Supports OG in meta tags
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    encType: 'enctype',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};
	
	module.exports = HTMLDOMPropertyConfig;


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule MobileSafariClickEventPlugin
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(93);
	
	var emptyFunction = __webpack_require__(148);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	/**
	 * Mobile Safari does not fire properly bubble click events on non-interactive
	 * elements, which means delegated click listeners do not fire. The workaround
	 * for this bug involves attaching an empty click listener on the target node.
	 *
	 * This particular plugin works around the bug by attaching an empty click
	 * listener on `touchstart` (which does fire on every element).
	 */
	var MobileSafariClickEventPlugin = {
	
	  eventTypes: null,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topTouchStart) {
	      var target = nativeEvent.target;
	      if (target && !target.onclick) {
	        target.onclick = emptyFunction;
	      }
	    }
	  }
	
	};
	
	module.exports = MobileSafariClickEventPlugin;


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */
	
	/*jslint evil: true */
	
	"use strict";
	
	var ReactDOMIDOperations = __webpack_require__(233);
	var ReactMarkupChecksum = __webpack_require__(119);
	var ReactMount = __webpack_require__(57);
	var ReactPerf = __webpack_require__(59);
	var ReactReconcileTransaction = __webpack_require__(234);
	
	var getReactRootElementInContainer = __webpack_require__(111);
	var invariant = __webpack_require__(72);
	var setInnerHTML = __webpack_require__(235);
	
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	
	
	/**
	 * Abstracts away all functionality of `ReactComponent` requires knowledge of
	 * the browser context.
	 */
	var ReactComponentBrowserEnvironment = {
	  ReactReconcileTransaction: ReactReconcileTransaction,
	
	  BackendIDOperations: ReactDOMIDOperations,
	
	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  },
	
	  /**
	   * @param {string} markup Markup string to place into the DOM Element.
	   * @param {DOMElement} container DOM Element to insert markup into.
	   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
	   * container if possible.
	   */
	  mountImageIntoNode: ReactPerf.measure(
	    'ReactComponentBrowserEnvironment',
	    'mountImageIntoNode',
	    function(markup, container, shouldReuseMarkup) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        container && (
	          container.nodeType === ELEMENT_NODE_TYPE ||
	            container.nodeType === DOC_NODE_TYPE
	        ),
	        'mountComponentIntoNode(...): Target container is not valid.'
	      ) : invariant(container && (
	        container.nodeType === ELEMENT_NODE_TYPE ||
	          container.nodeType === DOC_NODE_TYPE
	      )));
	
	      if (shouldReuseMarkup) {
	        if (ReactMarkupChecksum.canReuseMarkup(
	          markup,
	          getReactRootElementInContainer(container))) {
	          return;
	        } else {
	          ("production" !== process.env.NODE_ENV ? invariant(
	            container.nodeType !== DOC_NODE_TYPE,
	            'You\'re trying to render a component to the document using ' +
	            'server rendering but the checksum was invalid. This usually ' +
	            'means you rendered a different component type or props on ' +
	            'the client from the one on the server, or your render() ' +
	            'methods are impure. React cannot handle this case due to ' +
	            'cross-browser quirks by rendering at the document root. You ' +
	            'should look for environment dependent code in your components ' +
	            'and ensure the props are the same client and server side.'
	          ) : invariant(container.nodeType !== DOC_NODE_TYPE));
	
	          if ("production" !== process.env.NODE_ENV) {
	            console.warn(
	              'React attempted to use reuse markup in a container but the ' +
	              'checksum was invalid. This generally means that you are ' +
	              'using server rendering and the markup generated on the ' +
	              'server was not what the client was expecting. React injected ' +
	              'new markup to compensate which works but you have lost many ' +
	              'of the benefits of server rendering. Instead, figure out ' +
	              'why the markup being generated is different on the client ' +
	              'or server.'
	            );
	          }
	        }
	      }
	
	      ("production" !== process.env.NODE_ENV ? invariant(
	        container.nodeType !== DOC_NODE_TYPE,
	        'You\'re trying to render a component to the document but ' +
	          'you didn\'t use server rendering. We can\'t do this ' +
	          'without using server rendering due to cross-browser quirks. ' +
	          'See renderComponentToString() for server rendering.'
	      ) : invariant(container.nodeType !== DOC_NODE_TYPE));
	
	      setInnerHTML(container, markup);
	    }
	  )
	};
	
	module.exports = ReactComponentBrowserEnvironment;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */
	
	"use strict";
	
	var ReactUpdates = __webpack_require__(97);
	var Transaction = __webpack_require__(214);
	
	var assign = __webpack_require__(63);
	var emptyFunction = __webpack_require__(148);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	assign(
	  ReactDefaultBatchingStrategyTransaction.prototype,
	  Transaction.Mixin,
	  {
	    getTransactionWrappers: function() {
	      return TRANSACTION_WRAPPERS;
	    }
	  }
	);
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function(callback, a, b) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b);
	    } else {
	      transaction.perform(callback, null, a, b);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */
	
	"use strict";
	
	var AutoFocusMixin = __webpack_require__(236);
	var ReactBrowserComponentMixin = __webpack_require__(102);
	var ReactCompositeComponent = __webpack_require__(47);
	var ReactElement = __webpack_require__(50);
	var ReactDOM = __webpack_require__(52);
	
	var keyMirror = __webpack_require__(98);
	
	// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
	var button = ReactElement.createFactory(ReactDOM.button.type);
	
	var mouseListenerNames = keyMirror({
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	});
	
	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMButton',
	
	  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],
	
	  render: function() {
	    var props = {};
	
	    // Copy the props; except the mouse listeners if we're disabled
	    for (var key in this.props) {
	      if (this.props.hasOwnProperty(key) &&
	          (!this.props.disabled || !mouseListenerNames[key])) {
	        props[key] = this.props[key];
	      }
	    }
	
	    return button(props, this.props.children);
	  }
	
	});
	
	module.exports = ReactDOMButton;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMForm
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(93);
	var LocalEventTrapMixin = __webpack_require__(237);
	var ReactBrowserComponentMixin = __webpack_require__(102);
	var ReactCompositeComponent = __webpack_require__(47);
	var ReactElement = __webpack_require__(50);
	var ReactDOM = __webpack_require__(52);
	
	// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
	var form = ReactElement.createFactory(ReactDOM.form.type);
	
	/**
	 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
	 * to capture it on the <form> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <form> a
	 * composite component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMForm = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMForm',
	
	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],
	
	  render: function() {
	    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
	    // `jshint` fails to parse JSX so in order for linting to work in the open
	    // source repo, we need to just use `ReactDOM.form`.
	    return form(this.props);
	  },
	
	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
	  }
	});
	
	module.exports = ReactDOMForm;


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMImg
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(93);
	var LocalEventTrapMixin = __webpack_require__(237);
	var ReactBrowserComponentMixin = __webpack_require__(102);
	var ReactCompositeComponent = __webpack_require__(47);
	var ReactElement = __webpack_require__(50);
	var ReactDOM = __webpack_require__(52);
	
	// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
	var img = ReactElement.createFactory(ReactDOM.img.type);
	
	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <img> element itself. There are lots of hacks we could do
	 * to accomplish this, but the most reliable is to make <img> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMImg = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMImg',
	  tagName: 'IMG',
	
	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],
	
	  render: function() {
	    return img(this.props);
	  },
	
	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
	  }
	});
	
	module.exports = ReactDOMImg;


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */
	
	"use strict";
	
	var AutoFocusMixin = __webpack_require__(236);
	var DOMPropertyOperations = __webpack_require__(43);
	var LinkedValueUtils = __webpack_require__(238);
	var ReactBrowserComponentMixin = __webpack_require__(102);
	var ReactCompositeComponent = __webpack_require__(47);
	var ReactElement = __webpack_require__(50);
	var ReactDOM = __webpack_require__(52);
	var ReactMount = __webpack_require__(57);
	var ReactUpdates = __webpack_require__(97);
	
	var assign = __webpack_require__(63);
	var invariant = __webpack_require__(72);
	
	// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
	var input = ReactElement.createFactory(ReactDOM.input.type);
	
	var instancesByReactID = {};
	
	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}
	
	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMInput',
	
	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],
	
	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    return {
	      initialChecked: this.props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null
	    };
	  },
	
	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);
	
	    props.defaultChecked = null;
	    props.defaultValue = null;
	
	    var value = LinkedValueUtils.getValue(this);
	    props.value = value != null ? value : this.state.initialValue;
	
	    var checked = LinkedValueUtils.getChecked(this);
	    props.checked = checked != null ? checked : this.state.initialChecked;
	
	    props.onChange = this._handleChange;
	
	    return input(props, this.props.children);
	  },
	
	  componentDidMount: function() {
	    var id = ReactMount.getID(this.getDOMNode());
	    instancesByReactID[id] = this;
	  },
	
	  componentWillUnmount: function() {
	    var rootNode = this.getDOMNode();
	    var id = ReactMount.getID(rootNode);
	    delete instancesByReactID[id];
	  },
	
	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var rootNode = this.getDOMNode();
	    if (this.props.checked != null) {
	      DOMPropertyOperations.setValueForProperty(
	        rootNode,
	        'checked',
	        this.props.checked || false
	      );
	    }
	
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },
	
	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    // Here we use asap to wait until all updates have propagated, which
	    // is important when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	
	    var name = this.props.name;
	    if (this.props.type === 'radio' && name != null) {
	      var rootNode = this.getDOMNode();
	      var queryRoot = rootNode;
	
	      while (queryRoot.parentNode) {
	        queryRoot = queryRoot.parentNode;
	      }
	
	      // If `rootNode.form` was non-null, then we could try `form.elements`,
	      // but that sometimes behaves strangely in IE8. We could also try using
	      // `form.getElementsByName`, but that will only return direct children
	      // and won't include inputs that use the HTML5 `form=` attribute. Since
	      // the input might not even be in a form, let's just use the global
	      // `querySelectorAll` to ensure we don't miss anything.
	      var group = queryRoot.querySelectorAll(
	        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
	        var otherNode = group[i];
	        if (otherNode === rootNode ||
	            otherNode.form !== rootNode.form) {
	          continue;
	        }
	        var otherID = ReactMount.getID(otherNode);
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherID,
	          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
	          'same `name` is not supported.'
	        ) : invariant(otherID));
	        var otherInstance = instancesByReactID[otherID];
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherInstance,
	          'ReactDOMInput: Unknown radio button ID %s.',
	          otherID
	        ) : invariant(otherInstance));
	        // If this is a controlled radio button group, forcing the input that
	        // was previously checked to update will cause it to be come re-checked
	        // as appropriate.
	        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	      }
	    }
	
	    return returnValue;
	  }
	
	});
	
	module.exports = ReactDOMInput;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */
	
	"use strict";
	
	var ReactBrowserComponentMixin = __webpack_require__(102);
	var ReactCompositeComponent = __webpack_require__(47);
	var ReactElement = __webpack_require__(50);
	var ReactDOM = __webpack_require__(52);
	
	var warning = __webpack_require__(73);
	
	// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
	var option = ReactElement.createFactory(ReactDOM.option.type);
	
	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMOption',
	
	  mixins: [ReactBrowserComponentMixin],
	
	  componentWillMount: function() {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        this.props.selected == null,
	        'Use the `defaultValue` or `value` props on <select> instead of ' +
	        'setting `selected` on <option>.'
	      ) : null);
	    }
	  },
	
	  render: function() {
	    return option(this.props, this.props.children);
	  }
	
	});
	
	module.exports = ReactDOMOption;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */
	
	"use strict";
	
	var AutoFocusMixin = __webpack_require__(236);
	var LinkedValueUtils = __webpack_require__(238);
	var ReactBrowserComponentMixin = __webpack_require__(102);
	var ReactCompositeComponent = __webpack_require__(47);
	var ReactElement = __webpack_require__(50);
	var ReactDOM = __webpack_require__(52);
	var ReactUpdates = __webpack_require__(97);
	
	var assign = __webpack_require__(63);
	
	// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
	var select = ReactElement.createFactory(ReactDOM.select.type);
	
	function updateWithPendingValueIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.setState({value: this._pendingValue});
	    this._pendingValue = 0;
	  }
	}
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function selectValueType(props, propName, componentName) {
	  if (props[propName] == null) {
	    return;
	  }
	  if (props.multiple) {
	    if (!Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
	        ("`multiple` is true.")
	      );
	    }
	  } else {
	    if (Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
	        ("value if `multiple` is false.")
	      );
	    }
	  }
	}
	
	/**
	 * If `value` is supplied, updates <option> elements on mount and update.
	 * @param {ReactComponent} component Instance of ReactDOMSelect
	 * @param {?*} propValue For uncontrolled components, null/undefined. For
	 * controlled components, a string (or with `multiple`, a list of strings).
	 * @private
	 */
	function updateOptions(component, propValue) {
	  var multiple = component.props.multiple;
	  var value = propValue != null ? propValue : component.state.value;
	  var options = component.getDOMNode().options;
	  var selectedValue, i, l;
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0, l = value.length; i < l; ++i) {
	      selectedValue['' + value[i]] = true;
	    }
	  } else {
	    selectedValue = '' + value;
	  }
	  for (i = 0, l = options.length; i < l; i++) {
	    var selected = multiple ?
	      selectedValue.hasOwnProperty(options[i].value) :
	      options[i].value === selectedValue;
	
	    if (selected !== options[i].selected) {
	      options[i].selected = selected;
	    }
	  }
	}
	
	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * string. If `multiple` is true, the prop must be an array of strings.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMSelect',
	
	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],
	
	  propTypes: {
	    defaultValue: selectValueType,
	    value: selectValueType
	  },
	
	  getInitialState: function() {
	    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
	  },
	
	  componentWillMount: function() {
	    this._pendingValue = null;
	  },
	
	  componentWillReceiveProps: function(nextProps) {
	    if (!this.props.multiple && nextProps.multiple) {
	      this.setState({value: [this.state.value]});
	    } else if (this.props.multiple && !nextProps.multiple) {
	      this.setState({value: this.state.value[0]});
	    }
	  },
	
	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);
	
	    props.onChange = this._handleChange;
	    props.value = null;
	
	    return select(props, this.props.children);
	  },
	
	  componentDidMount: function() {
	    updateOptions(this, LinkedValueUtils.getValue(this));
	  },
	
	  componentDidUpdate: function(prevProps) {
	    var value = LinkedValueUtils.getValue(this);
	    var prevMultiple = !!prevProps.multiple;
	    var multiple = !!this.props.multiple;
	    if (value != null || prevMultiple !== multiple) {
	      updateOptions(this, value);
	    }
	  },
	
	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	
	    var selectedValue;
	    if (this.props.multiple) {
	      selectedValue = [];
	      var options = event.target.options;
	      for (var i = 0, l = options.length; i < l; i++) {
	        if (options[i].selected) {
	          selectedValue.push(options[i].value);
	        }
	      }
	    } else {
	      selectedValue = event.target.value;
	    }
	
	    this._pendingValue = selectedValue;
	    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
	    return returnValue;
	  }
	
	});
	
	module.exports = ReactDOMSelect;


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */
	
	"use strict";
	
	var AutoFocusMixin = __webpack_require__(236);
	var DOMPropertyOperations = __webpack_require__(43);
	var LinkedValueUtils = __webpack_require__(238);
	var ReactBrowserComponentMixin = __webpack_require__(102);
	var ReactCompositeComponent = __webpack_require__(47);
	var ReactElement = __webpack_require__(50);
	var ReactDOM = __webpack_require__(52);
	var ReactUpdates = __webpack_require__(97);
	
	var assign = __webpack_require__(63);
	var invariant = __webpack_require__(72);
	
	var warning = __webpack_require__(73);
	
	// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
	var textarea = ReactElement.createFactory(ReactDOM.textarea.type);
	
	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}
	
	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMTextarea',
	
	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],
	
	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = this.props.children;
	    if (children != null) {
	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'Use the `defaultValue` or `value` props instead of setting ' +
	          'children on <textarea>.'
	        ) : null);
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        defaultValue == null,
	        'If you supply `defaultValue` on a <textarea>, do not pass children.'
	      ) : invariant(defaultValue == null));
	      if (Array.isArray(children)) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          children.length <= 1,
	          '<textarea> can only have at most one child.'
	        ) : invariant(children.length <= 1));
	        children = children[0];
	      }
	
	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(this);
	    return {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue)
	    };
	  },
	
	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML == null,
	      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
	    ) : invariant(props.dangerouslySetInnerHTML == null));
	
	    props.defaultValue = null;
	    props.value = null;
	    props.onChange = this._handleChange;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    return textarea(props, this.state.initialValue);
	  },
	
	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      var rootNode = this.getDOMNode();
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },
	
	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	    return returnValue;
	  }
	
	});
	
	module.exports = ReactDOMTextarea;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var EventListener = __webpack_require__(242);
	var ExecutionEnvironment = __webpack_require__(66);
	var PooledClass = __webpack_require__(94);
	var ReactInstanceHandles = __webpack_require__(55);
	var ReactMount = __webpack_require__(57);
	var ReactUpdates = __webpack_require__(97);
	
	var assign = __webpack_require__(63);
	var getEventTarget = __webpack_require__(243);
	var getUnboundedScrollPosition = __webpack_require__(244);
	
	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(
	  TopLevelCallbackBookKeeping,
	  PooledClass.twoArgumentPooler
	);
	
	function handleTopLevelImpl(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(
	    getEventTarget(bookKeeping.nativeEvent)
	  ) || window;
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }
	
	  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(
	      bookKeeping.topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      bookKeeping.nativeEvent
	    );
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function() {
	    return ReactEventListener._enabled;
	  },
	
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return;
	    }
	    return EventListener.listen(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return;
	    }
	    return EventListener.capture(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },
	
	  monitorScrollValue: function(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	    EventListener.listen(window, 'resize', callback);
	  },
	
	  dispatchEvent: function(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
	      topLevelType,
	      nativeEvent
	    );
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */
	
	"use strict";
	
	var DOMProperty = __webpack_require__(101);
	var EventPluginHub = __webpack_require__(219);
	var ReactComponent = __webpack_require__(46);
	var ReactCompositeComponent = __webpack_require__(47);
	var ReactEmptyComponent = __webpack_require__(114);
	var ReactBrowserEventEmitter = __webpack_require__(103);
	var ReactNativeComponent = __webpack_require__(224);
	var ReactPerf = __webpack_require__(59);
	var ReactRootIndex = __webpack_require__(109);
	var ReactUpdates = __webpack_require__(97);
	
	var ReactInjection = {
	  Component: ReactComponent.injection,
	  CompositeComponent: ReactCompositeComponent.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(93);
	var EventPropagators = __webpack_require__(228);
	var ReactInputSelection = __webpack_require__(239);
	var SyntheticEvent = __webpack_require__(230);
	
	var getActiveElement = __webpack_require__(245);
	var isTextInputElement = __webpack_require__(231);
	var keyOf = __webpack_require__(106);
	var shallowEqual = __webpack_require__(246);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSelect: null}),
	      captured: keyOf({onSelectCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topContextMenu,
	      topLevelTypes.topFocus,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topMouseDown,
	      topLevelTypes.topMouseUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};
	
	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @param {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node &&
	      ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown ||
	      activeElement == null ||
	      activeElement != getActiveElement()) {
	    return;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(
	      eventTypes.select,
	      activeElementID,
	      nativeEvent
	    );
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) ||
	            topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't).
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      case topLevelTypes.topSelectionChange:
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent);
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */
	
	"use strict";
	
	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);
	
	var ServerReactRootIndex = {
	  createReactRootIndex: function() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};
	
	module.exports = ServerReactRootIndex;


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(93);
	var EventPluginUtils = __webpack_require__(44);
	var EventPropagators = __webpack_require__(228);
	var SyntheticClipboardEvent = __webpack_require__(249);
	var SyntheticEvent = __webpack_require__(230);
	var SyntheticFocusEvent = __webpack_require__(250);
	var SyntheticKeyboardEvent = __webpack_require__(251);
	var SyntheticMouseEvent = __webpack_require__(232);
	var SyntheticDragEvent = __webpack_require__(252);
	var SyntheticTouchEvent = __webpack_require__(253);
	var SyntheticUIEvent = __webpack_require__(254);
	var SyntheticWheelEvent = __webpack_require__(255);
	
	var getEventCharCode = __webpack_require__(256);
	
	var invariant = __webpack_require__(72);
	var keyOf = __webpack_require__(106);
	var warning = __webpack_require__(73);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBlur: true}),
	      captured: keyOf({onBlurCapture: true})
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onClick: true}),
	      captured: keyOf({onClickCapture: true})
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onContextMenu: true}),
	      captured: keyOf({onContextMenuCapture: true})
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCopy: true}),
	      captured: keyOf({onCopyCapture: true})
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCut: true}),
	      captured: keyOf({onCutCapture: true})
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDoubleClick: true}),
	      captured: keyOf({onDoubleClickCapture: true})
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrag: true}),
	      captured: keyOf({onDragCapture: true})
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnd: true}),
	      captured: keyOf({onDragEndCapture: true})
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnter: true}),
	      captured: keyOf({onDragEnterCapture: true})
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragExit: true}),
	      captured: keyOf({onDragExitCapture: true})
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragLeave: true}),
	      captured: keyOf({onDragLeaveCapture: true})
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragOver: true}),
	      captured: keyOf({onDragOverCapture: true})
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragStart: true}),
	      captured: keyOf({onDragStartCapture: true})
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrop: true}),
	      captured: keyOf({onDropCapture: true})
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onFocus: true}),
	      captured: keyOf({onFocusCapture: true})
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onInput: true}),
	      captured: keyOf({onInputCapture: true})
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyDown: true}),
	      captured: keyOf({onKeyDownCapture: true})
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyPress: true}),
	      captured: keyOf({onKeyPressCapture: true})
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyUp: true}),
	      captured: keyOf({onKeyUpCapture: true})
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onLoad: true}),
	      captured: keyOf({onLoadCapture: true})
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onError: true}),
	      captured: keyOf({onErrorCapture: true})
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseDown: true}),
	      captured: keyOf({onMouseDownCapture: true})
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseMove: true}),
	      captured: keyOf({onMouseMoveCapture: true})
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOut: true}),
	      captured: keyOf({onMouseOutCapture: true})
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOver: true}),
	      captured: keyOf({onMouseOverCapture: true})
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseUp: true}),
	      captured: keyOf({onMouseUpCapture: true})
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onPaste: true}),
	      captured: keyOf({onPasteCapture: true})
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onReset: true}),
	      captured: keyOf({onResetCapture: true})
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScroll: true}),
	      captured: keyOf({onScrollCapture: true})
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSubmit: true}),
	      captured: keyOf({onSubmitCapture: true})
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchCancel: true}),
	      captured: keyOf({onTouchCancelCapture: true})
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchEnd: true}),
	      captured: keyOf({onTouchEndCapture: true})
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchMove: true}),
	      captured: keyOf({onTouchMoveCapture: true})
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchStart: true}),
	      captured: keyOf({onTouchStartCapture: true})
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onWheel: true}),
	      captured: keyOf({onWheelCapture: true})
	    }
	  }
	};
	
	var topLevelEventsToDispatchConfig = {
	  topBlur:        eventTypes.blur,
	  topClick:       eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy:        eventTypes.copy,
	  topCut:         eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag:        eventTypes.drag,
	  topDragEnd:     eventTypes.dragEnd,
	  topDragEnter:   eventTypes.dragEnter,
	  topDragExit:    eventTypes.dragExit,
	  topDragLeave:   eventTypes.dragLeave,
	  topDragOver:    eventTypes.dragOver,
	  topDragStart:   eventTypes.dragStart,
	  topDrop:        eventTypes.drop,
	  topError:       eventTypes.error,
	  topFocus:       eventTypes.focus,
	  topInput:       eventTypes.input,
	  topKeyDown:     eventTypes.keyDown,
	  topKeyPress:    eventTypes.keyPress,
	  topKeyUp:       eventTypes.keyUp,
	  topLoad:        eventTypes.load,
	  topMouseDown:   eventTypes.mouseDown,
	  topMouseMove:   eventTypes.mouseMove,
	  topMouseOut:    eventTypes.mouseOut,
	  topMouseOver:   eventTypes.mouseOver,
	  topMouseUp:     eventTypes.mouseUp,
	  topPaste:       eventTypes.paste,
	  topReset:       eventTypes.reset,
	  topScroll:      eventTypes.scroll,
	  topSubmit:      eventTypes.submit,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd:    eventTypes.touchEnd,
	  topTouchMove:   eventTypes.touchMove,
	  topTouchStart:  eventTypes.touchStart,
	  topWheel:       eventTypes.wheel
	};
	
	for (var topLevelType in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
	}
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * Same as the default implementation, except cancels the event when return
	   * value is false. This behavior will be disabled in a future release.
	   *
	   * @param {object} Event to be dispatched.
	   * @param {function} Application-level callback.
	   * @param {string} domID DOM ID to pass to the callback.
	   */
	  executeDispatch: function(event, listener, domID) {
	    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);
	
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof returnValue !== 'boolean',
	      'Returning `false` from an event handler is deprecated and will be ' +
	      'ignored in a future release. Instead, manually call ' +
	      'e.stopPropagation() or e.preventDefault(), as appropriate.'
	    ) : null);
	
	    if (returnValue === false) {
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  },
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topError:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSubmit:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      EventConstructor,
	      'SimpleEventPlugin: Unhandled event type, `%s`.',
	      topLevelType
	    ) : invariant(EventConstructor));
	    var event = EventConstructor.getPooled(
	      dispatchConfig,
	      topLevelTargetID,
	      nativeEvent
	    );
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }
	
	};
	
	module.exports = SimpleEventPlugin;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */
	
	/*jslint bitwise: true*/
	
	"use strict";
	
	var DOMProperty = __webpack_require__(101);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	
	var SVGDOMPropertyConfig = {
	  Properties: {
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox'
	  }
	};
	
	module.exports = SVGDOMPropertyConfig;


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createFullPageComponent
	 * @typechecks
	 */
	
	"use strict";
	
	// Defeat circular references by requiring this directly.
	var ReactCompositeComponent = __webpack_require__(47);
	var ReactElement = __webpack_require__(50);
	
	var invariant = __webpack_require__(72);
	
	/**
	 * Create a component that will throw an exception when unmounted.
	 *
	 * Components like <html> <head> and <body> can't be removed or added
	 * easily in a cross-browser way, however it's valuable to be able to
	 * take advantage of React's reconciliation for styling and <title>
	 * management. So we just document it and throw in dangerous cases.
	 *
	 * @param {string} tag The tag to wrap
	 * @return {function} convenience constructor of new component
	 */
	function createFullPageComponent(tag) {
	  var elementFactory = ReactElement.createFactory(tag);
	
	  var FullPageComponent = ReactCompositeComponent.createClass({
	    displayName: 'ReactFullPageComponent' + tag,
	
	    componentWillUnmount: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        false,
	        '%s tried to unmount. Because of cross-browser quirks it is ' +
	        'impossible to unmount some top-level components (eg <html>, <head>, ' +
	        'and <body>) reliably and efficiently. To fix this, have a single ' +
	        'top-level component that never unmounts render these elements.',
	        this.constructor.displayName
	      ) : invariant(false));
	    },
	
	    render: function() {
	      return elementFactory(this.props);
	    }
	  });
	
	  return FullPageComponent;
	}
	
	module.exports = createFullPageComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var DOMProperty = __webpack_require__(101);
	var ReactDefaultPerfAnalysis = __webpack_require__(247);
	var ReactMount = __webpack_require__(57);
	var ReactPerf = __webpack_require__(59);
	
	var performanceNow = __webpack_require__(248);
	
	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}
	
	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}
	
	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,
	
	  start: function() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }
	
	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },
	
	  stop: function() {
	    ReactPerf.enableMeasure = false;
	  },
	
	  getLastMeasurements: function() {
	    return ReactDefaultPerf._allMeasurements;
	  },
	
	  printExclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },
	
	  printInclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },
	
	  getMeasurementsSummaryMap: function(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
	      measurements,
	      true
	    );
	    return summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },
	
	  printWasted: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },
	
	  printDOM: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function(item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result['type'] = item.type;
	      result['args'] = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },
	
	  _recordWrite: function(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes =
	      ReactDefaultPerf
	        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
	        .writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },
	
	  measure: function(moduleName, fnName, func) {
	    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      var totalTime;
	      var rv;
	      var start;
	
	      if (fnName === '_renderNewRootComponent' ||
	          fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ].totalTime = performanceNow() - start;
	        return rv;
	      } else if (moduleName === 'ReactDOMIDOperations' ||
	        moduleName === 'ReactComponentBrowserEnvironment') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (fnName === 'mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function(update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(
	              update.parentID,
	              update.type,
	              totalTime,
	              writeArgs
	            );
	          });
	        } else {
	          // basic format
	          ReactDefaultPerf._recordWrite(
	            args[0],
	            fnName,
	            totalTime,
	            Array.prototype.slice.call(args, 1)
	          );
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (
	        fnName === 'mountComponent' ||
	        fnName === 'updateComponent' || // TODO: receiveComponent()?
	        fnName === '_renderValidatedComponent')) {
	
	        var rootNodeID = fnName === 'mountComponent' ?
	          args[0] :
	          this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';
	
	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ];
	
	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          mountStack.push(0);
	        }
	
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }
	
	        entry.displayNames[rootNodeID] = {
	          current: this.constructor.displayName,
	          owner: this._owner ? this._owner.constructor.displayName : '<root>'
	        };
	
	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};
	
	module.exports = ReactDefaultPerf;


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */
	
	"use strict";
	
	var keyMirror = __webpack_require__(98);
	
	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  TEXT_CONTENT: null
	});
	
	module.exports = ReactMultiChildUpdateTypes;


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */
	
	"use strict";
	
	var ReactTextComponent = __webpack_require__(62);
	
	var traverseAllChildren = __webpack_require__(95);
	var warning = __webpack_require__(73);
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = !result.hasOwnProperty(name);
	  ("production" !== process.env.NODE_ENV ? warning(
	    keyUnique,
	    'flattenChildren(...): Encountered two children with the same key, ' +
	    '`%s`. Child keys must be unique; when two children share a key, only ' +
	    'the first child will be used.',
	    name
	  ) : null);
	  if (keyUnique && child != null) {
	    var type = typeof child;
	    var normalizedValue;
	
	    if (type === 'string') {
	      normalizedValue = ReactTextComponent(child);
	    } else if (type === 'number') {
	      normalizedValue = ReactTextComponent('' + child);
	    } else {
	      normalizedValue = child;
	    }
	
	    result[name] = normalizedValue;
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}
	
	module.exports = flattenChildren;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */
	
	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function() { return this; };
	emptyFunction.thatReturnsArgument = function(arg) { return arg; };
	
	module.exports = emptyFunction;


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var invariant = __webpack_require__(72);
	var canUseDOM = __webpack_require__(66).canUseDOM;
	
	/**
	 * Returns the current scroll position of the window as { x, y }.
	 */
	function getWindowScrollPosition() {
	  invariant(canUseDOM, "Cannot get current scroll position without a DOM");
	
	  return {
	    x: window.pageXOffset || document.documentElement.scrollLeft,
	    y: window.pageYOffset || document.documentElement.scrollTop
	  };
	}
	
	module.exports = getWindowScrollPosition;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Long = __webpack_require__(259).Long
	  , Double = __webpack_require__(260).Double
	  , Timestamp = __webpack_require__(261).Timestamp
	  , ObjectID = __webpack_require__(262).ObjectID
	  , Symbol = __webpack_require__(263).Symbol
	  , Code = __webpack_require__(264).Code
	  , MinKey = __webpack_require__(265).MinKey
	  , MaxKey = __webpack_require__(266).MaxKey
	  , DBRef = __webpack_require__(267).DBRef
	  , Binary = __webpack_require__(268).Binary
	  , BinaryParser = __webpack_require__(269).BinaryParser
	  , writeIEEE754 = __webpack_require__(270).writeIEEE754
	  , readIEEE754 = __webpack_require__(270).readIEEE754
	
	// To ensure that 0.4 of node works correctly
	var isDate = function isDate(d) {
	  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';
	}
	
	/**
	 * Create a new BSON instance
	 *
	 * @class Represents the BSON Parser
	 * @return {BSON} instance of BSON Parser.
	 */
	function BSON () {};
	
	/**
	 * @ignore
	 * @api private
	 */
	// BSON MAX VALUES
	BSON.BSON_INT32_MAX = 0x7FFFFFFF;
	BSON.BSON_INT32_MIN = -0x80000000;
	
	BSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;
	BSON.BSON_INT64_MIN = -Math.pow(2, 63);
	
	// JS MAX PRECISE VALUES
	BSON.JS_INT_MAX = 0x20000000000000;  // Any integer up to 2^53 can be precisely represented by a double.
	BSON.JS_INT_MIN = -0x20000000000000;  // Any integer down to -2^53 can be precisely represented by a double.
	
	// Internal long versions
	var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000);  // Any integer up to 2^53 can be precisely represented by a double.
	var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000);  // Any integer down to -2^53 can be precisely represented by a double.
	
	/**
	 * Number BSON Type
	 *
	 * @classconstant BSON_DATA_NUMBER
	 **/
	BSON.BSON_DATA_NUMBER = 1;
	/**
	 * String BSON Type
	 *
	 * @classconstant BSON_DATA_STRING
	 **/
	BSON.BSON_DATA_STRING = 2;
	/**
	 * Object BSON Type
	 *
	 * @classconstant BSON_DATA_OBJECT
	 **/
	BSON.BSON_DATA_OBJECT = 3;
	/**
	 * Array BSON Type
	 *
	 * @classconstant BSON_DATA_ARRAY
	 **/
	BSON.BSON_DATA_ARRAY = 4;
	/**
	 * Binary BSON Type
	 *
	 * @classconstant BSON_DATA_BINARY
	 **/
	BSON.BSON_DATA_BINARY = 5;
	/**
	 * Binary BSON Type
	 *
	 * @classconstant BSON_DATA_UNDEFINED
	 **/
	BSON.BSON_DATA_UNDEFINED = 6;
	/**
	 * ObjectID BSON Type
	 *
	 * @classconstant BSON_DATA_OID
	 **/
	BSON.BSON_DATA_OID = 7;
	/**
	 * Boolean BSON Type
	 *
	 * @classconstant BSON_DATA_BOOLEAN
	 **/
	BSON.BSON_DATA_BOOLEAN = 8;
	/**
	 * Date BSON Type
	 *
	 * @classconstant BSON_DATA_DATE
	 **/
	BSON.BSON_DATA_DATE = 9;
	/**
	 * null BSON Type
	 *
	 * @classconstant BSON_DATA_NULL
	 **/
	BSON.BSON_DATA_NULL = 10;
	/**
	 * RegExp BSON Type
	 *
	 * @classconstant BSON_DATA_REGEXP
	 **/
	BSON.BSON_DATA_REGEXP = 11;
	/**
	 * Code BSON Type
	 *
	 * @classconstant BSON_DATA_CODE
	 **/
	BSON.BSON_DATA_CODE = 13;
	/**
	 * Symbol BSON Type
	 *
	 * @classconstant BSON_DATA_SYMBOL
	 **/
	BSON.BSON_DATA_SYMBOL = 14;
	/**
	 * Code with Scope BSON Type
	 *
	 * @classconstant BSON_DATA_CODE_W_SCOPE
	 **/
	BSON.BSON_DATA_CODE_W_SCOPE = 15;
	/**
	 * 32 bit Integer BSON Type
	 *
	 * @classconstant BSON_DATA_INT
	 **/
	BSON.BSON_DATA_INT = 16;
	/**
	 * Timestamp BSON Type
	 *
	 * @classconstant BSON_DATA_TIMESTAMP
	 **/
	BSON.BSON_DATA_TIMESTAMP = 17;
	/**
	 * Long BSON Type
	 *
	 * @classconstant BSON_DATA_LONG
	 **/
	BSON.BSON_DATA_LONG = 18;
	/**
	 * MinKey BSON Type
	 *
	 * @classconstant BSON_DATA_MIN_KEY
	 **/
	BSON.BSON_DATA_MIN_KEY = 0xff;
	/**
	 * MaxKey BSON Type
	 *
	 * @classconstant BSON_DATA_MAX_KEY
	 **/
	BSON.BSON_DATA_MAX_KEY = 0x7f;
	
	/**
	 * Binary Default Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_DEFAULT
	 **/
	BSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;
	/**
	 * Binary Function Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_FUNCTION
	 **/
	BSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;
	/**
	 * Binary Byte Array Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY
	 **/
	BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;
	/**
	 * Binary UUID Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_UUID
	 **/
	BSON.BSON_BINARY_SUBTYPE_UUID = 3;
	/**
	 * Binary MD5 Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_MD5
	 **/
	BSON.BSON_BINARY_SUBTYPE_MD5 = 4;
	/**
	 * Binary User Defined Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED
	 **/
	BSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;
	
	/**
	 * Calculate the bson size for a passed in Javascript object.
	 *
	 * @param {Object} object the Javascript object to calculate the BSON byte size for.
	 * @param {Boolean} [serializeFunctions] serialize all functions in the object **(default:false)**.
	 * @return {Number} returns the number of bytes the BSON object will take up.
	 * @api public
	 */
	BSON.calculateObjectSize = function calculateObjectSize(object, serializeFunctions) {
	  var totalLength = (4 + 1);
	
	  if(Array.isArray(object)) {
	    for(var i = 0; i < object.length; i++) {
	      totalLength += calculateElement(i.toString(), object[i], serializeFunctions)
	    }
	  } else {
			// If we have toBSON defined, override the current object
			if(object.toBSON) {
				object = object.toBSON();
			}
	
			// Calculate size
	    for(var key in object) {
	      totalLength += calculateElement(key, object[key], serializeFunctions)
	    }
	  }
	
	  return totalLength;
	}
	
	/**
	 * @ignore
	 * @api private
	 */
	function calculateElement(name, value, serializeFunctions) {
	  var isBuffer = typeof Buffer !== 'undefined';
	  
	  // If we have toBSON defined, override the current object
	  if(value && value.toBSON){
	        value = value.toBSON();
	  }
	  
	  switch(typeof value) {
	    case 'string':
	      return 1 + (!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1 + 4 + (!isBuffer ? numberOfBytes(value) : Buffer.byteLength(value, 'utf8')) + 1;
	    case 'number':
	      if(Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {
	        if(value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) { // 32 bit
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (4 + 1);
	        } else {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);
	        }
	      } else {  // 64 bit
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);
	      }
	    case 'undefined':
	      return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1);
	    case 'boolean':
	      return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1 + 1);
	    case 'object':
	      if(value == null || value instanceof MinKey || value instanceof MaxKey || value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1);
	      } else if(value instanceof ObjectID || value['_bsontype'] == 'ObjectID') {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (12 + 1);
	      } else if(value instanceof Date || isDate(value)) {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);
	      } else if(typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1 + 4 + 1) + value.length;
	      } else if(value instanceof Long || value instanceof Double || value instanceof Timestamp
	          || value['_bsontype'] == 'Long' || value['_bsontype'] == 'Double' || value['_bsontype'] == 'Timestamp') {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);
	      } else if(value instanceof Code || value['_bsontype'] == 'Code') {
	        // Calculate size depending on the availability of a scope
	        if(value.scope != null && Object.keys(value.scope).length > 0) {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + 4 + (!isBuffer ? numberOfBytes(value.code.toString()) : Buffer.byteLength(value.code.toString(), 'utf8')) + 1 + BSON.calculateObjectSize(value.scope, serializeFunctions);
	        } else {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + (!isBuffer ? numberOfBytes(value.code.toString()) : Buffer.byteLength(value.code.toString(), 'utf8')) + 1;
	        }
	      } else if(value instanceof Binary || value['_bsontype'] == 'Binary') {
	        // Check what kind of subtype we have
	        if(value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (value.position + 1 + 4 + 1 + 4);
	        } else {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (value.position + 1 + 4 + 1);
	        }
	      } else if(value instanceof Symbol || value['_bsontype'] == 'Symbol') {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + ((!isBuffer ? numberOfBytes(value.value) : Buffer.byteLength(value.value, 'utf8')) + 4 + 1 + 1);
	      } else if(value instanceof DBRef || value['_bsontype'] == 'DBRef') {
	        // Set up correct object for serialization
	        var ordered_values = {
	            '$ref': value.namespace
	          , '$id' : value.oid
	        };
	
	        // Add db reference if it exists
	        if(null != value.db) {
	          ordered_values['$db'] = value.db;
	        }
	
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + BSON.calculateObjectSize(ordered_values, serializeFunctions);
	      } else if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]') {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + (!isBuffer ? numberOfBytes(value.source) : Buffer.byteLength(value.source, 'utf8')) + 1
	            + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1
	      } else {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + BSON.calculateObjectSize(value, serializeFunctions) + 1;
	      }
	    case 'function':
	      // WTF for 0.4.X where typeof /someregexp/ === 'function'
	      if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]' || String.call(value) == '[object RegExp]') {
	        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + (!isBuffer ? numberOfBytes(value.source) : Buffer.byteLength(value.source, 'utf8')) + 1
	          + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1
	      } else {
	        if(serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + 4 + (!isBuffer ? numberOfBytes(value.toString()) : Buffer.byteLength(value.toString(), 'utf8')) + 1 + BSON.calculateObjectSize(value.scope, serializeFunctions);
	        } else if(serializeFunctions) {
	          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + (!isBuffer ? numberOfBytes(value.toString()) : Buffer.byteLength(value.toString(), 'utf8')) + 1;
	        }
	      }
	  }
	
	  return 0;
	}
	
	/**
	 * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.
	 *
	 * @param {Object} object the Javascript object to serialize.
	 * @param {Boolean} checkKeys the serializer will check if keys are valid.
	 * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.
	 * @param {Number} index the index in the buffer where we wish to start serializing into.
	 * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.
	 * @return {Number} returns the new write index in the Buffer.
	 * @api public
	 */
	BSON.serializeWithBufferAndIndex = function serializeWithBufferAndIndex(object, checkKeys, buffer, index, serializeFunctions) {
	  // Default setting false
	  serializeFunctions = serializeFunctions == null ? false : serializeFunctions;
	  // Write end information (length of the object)
	  var size = buffer.length;
	  // Write the size of the object
	  buffer[index++] = size & 0xff;
	  buffer[index++] = (size >> 8) & 0xff;
	  buffer[index++] = (size >> 16) & 0xff;
	  buffer[index++] = (size >> 24) & 0xff;
	  return serializeObject(object, checkKeys, buffer, index, serializeFunctions) - 1;
	}
	
	/**
	 * @ignore
	 * @api private
	 */
	var serializeObject = function(object, checkKeys, buffer, index, serializeFunctions) {
	  if(object.toBSON) {
	    if(typeof object.toBSON != 'function') throw new Error("toBSON is not a function");
	    object = object.toBSON();
	    if(object != null && typeof object != 'object') throw new Error("toBSON function did not return an object");
	  }
	
	  // Process the object
	  if(Array.isArray(object)) {
	    for(var i = 0; i < object.length; i++) {
	      index = packElement(i.toString(), object[i], checkKeys, buffer, index, serializeFunctions);
	    }
	  } else {
			// If we have toBSON defined, override the current object
			if(object.toBSON) {
				object = object.toBSON();
			}
	
			// Serialize the object
	    for(var key in object) {
	      // Check the key and throw error if it's illegal
	      if (key != '$db' && key != '$ref' && key != '$id') {
	        // dollars and dots ok
	        BSON.checkKey(key, !checkKeys);
	      }
	
	      // Pack the element
	      index = packElement(key, object[key], checkKeys, buffer, index, serializeFunctions);
	    }
	  }
	
	  // Write zero
	  buffer[index++] = 0;
	  return index;
	}
	
	var stringToBytes = function(str) {
	  var ch, st, re = [];
	  for (var i = 0; i < str.length; i++ ) {
	    ch = str.charCodeAt(i);  // get char
	    st = [];                 // set up "stack"
	    do {
	      st.push( ch & 0xFF );  // push byte to stack
	      ch = ch >> 8;          // shift value down by 1 byte
	    }
	    while ( ch );
	    // add stack contents to result
	    // done because chars have "wrong" endianness
	    re = re.concat( st.reverse() );
	  }
	  // return an array of bytes
	  return re;
	}
	
	var numberOfBytes = function(str) {
	  var ch, st, re = 0;
	  for (var i = 0; i < str.length; i++ ) {
	    ch = str.charCodeAt(i);  // get char
	    st = [];                 // set up "stack"
	    do {
	      st.push( ch & 0xFF );  // push byte to stack
	      ch = ch >> 8;          // shift value down by 1 byte
	    }
	    while ( ch );
	    // add stack contents to result
	    // done because chars have "wrong" endianness
	    re = re + st.length;
	  }
	  // return an array of bytes
	  return re;
	}
	
	/**
	 * @ignore
	 * @api private
	 */
	var writeToTypedArray = function(buffer, string, index) {
	  var bytes = stringToBytes(string);
	  for(var i = 0; i < bytes.length; i++) {
	    buffer[index + i] = bytes[i];
	  }
	  return bytes.length;
	}
	
	/**
	 * @ignore
	 * @api private
	 */
	var supportsBuffer = typeof Buffer != 'undefined';
	
	/**
	 * @ignore
	 * @api private
	 */
	var packElement = function(name, value, checkKeys, buffer, index, serializeFunctions) {
		
	  // If we have toBSON defined, override the current object
	  if(value && value.toBSON){
	        value = value.toBSON();
	  }
	  
	  var startIndex = index;
	
	  switch(typeof value) {
	    case 'string':
	      // console.log("+++++++++++ index string:: " + index)
	      // Encode String type
	      buffer[index++] = BSON.BSON_DATA_STRING;
	      // Number of written bytes
	      var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	      // Encode the name
	      index = index + numberOfWrittenBytes + 1;
	      buffer[index - 1] = 0;
	
	      // Calculate size
	      var size = supportsBuffer ? Buffer.byteLength(value) + 1 : numberOfBytes(value) + 1;
	      // console.log("====== key :: " + name + " size ::" + size)
	      // Write the size of the string to buffer
	      buffer[index + 3] = (size >> 24) & 0xff;
	      buffer[index + 2] = (size >> 16) & 0xff;
	      buffer[index + 1] = (size >> 8) & 0xff;
	      buffer[index] = size & 0xff;
	      // Ajust the index
	      index = index + 4;
	      // Write the string
	      supportsBuffer ? buffer.write(value, index, 'utf8') : writeToTypedArray(buffer, value, index);
	      // Update index
	      index = index + size - 1;
	      // Write zero
	      buffer[index++] = 0;
	      // Return index
	      return index;
	    case 'number':
	      // We have an integer value
	      if(Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {
	        // If the value fits in 32 bits encode as int, if it fits in a double
	        // encode it as a double, otherwise long
	        if(value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) {
	          // Set int type 32 bits or less
	          buffer[index++] = BSON.BSON_DATA_INT;
	          // Number of written bytes
	          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	          // Encode the name
	          index = index + numberOfWrittenBytes + 1;
	          buffer[index - 1] = 0;
	          // Write the int value
	          buffer[index++] = value & 0xff;
	          buffer[index++] = (value >> 8) & 0xff;
	          buffer[index++] = (value >> 16) & 0xff;
	          buffer[index++] = (value >> 24) & 0xff;
	        } else if(value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {
	          // Encode as double
	          buffer[index++] = BSON.BSON_DATA_NUMBER;
	          // Number of written bytes
	          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	          // Encode the name
	          index = index + numberOfWrittenBytes + 1;
	          buffer[index - 1] = 0;
	          // Write float
	          writeIEEE754(buffer, value, index, 'little', 52, 8);
	          // Ajust index
	          index = index + 8;
	        } else {
	          // Set long type
	          buffer[index++] = BSON.BSON_DATA_LONG;
	          // Number of written bytes
	          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	          // Encode the name
	          index = index + numberOfWrittenBytes + 1;
	          buffer[index - 1] = 0;
	          var longVal = Long.fromNumber(value);
	          var lowBits = longVal.getLowBits();
	          var highBits = longVal.getHighBits();
	          // Encode low bits
	          buffer[index++] = lowBits & 0xff;
	          buffer[index++] = (lowBits >> 8) & 0xff;
	          buffer[index++] = (lowBits >> 16) & 0xff;
	          buffer[index++] = (lowBits >> 24) & 0xff;
	          // Encode high bits
	          buffer[index++] = highBits & 0xff;
	          buffer[index++] = (highBits >> 8) & 0xff;
	          buffer[index++] = (highBits >> 16) & 0xff;
	          buffer[index++] = (highBits >> 24) & 0xff;
	        }
	      } else {
	        // Encode as double
	        buffer[index++] = BSON.BSON_DATA_NUMBER;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        // Write float
	        writeIEEE754(buffer, value, index, 'little', 52, 8);
	        // Ajust index
	        index = index + 8;
	      }
	
	      return index;
	    case 'undefined':
	      // Set long type
	      buffer[index++] = BSON.BSON_DATA_NULL;
	      // Number of written bytes
	      var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	      // Encode the name
	      index = index + numberOfWrittenBytes + 1;
	      buffer[index - 1] = 0;
	      return index;
	    case 'boolean':
	      // Write the type
	      buffer[index++] = BSON.BSON_DATA_BOOLEAN;
	      // Number of written bytes
	      var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	      // Encode the name
	      index = index + numberOfWrittenBytes + 1;
	      buffer[index - 1] = 0;
	      // Encode the boolean value
	      buffer[index++] = value ? 1 : 0;
	      return index;
	    case 'object':
	      if(value === null || value instanceof MinKey || value instanceof MaxKey
	          || value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {
	        // Write the type of either min or max key
	        if(value === null) {
	          buffer[index++] = BSON.BSON_DATA_NULL;
	        } else if(value instanceof MinKey) {
	          buffer[index++] = BSON.BSON_DATA_MIN_KEY;
	        } else {
	          buffer[index++] = BSON.BSON_DATA_MAX_KEY;
	        }
	
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        return index;
	      } else if(value instanceof ObjectID || value['_bsontype'] == 'ObjectID') {
	        // console.log("+++++++++++ index OBJECTID:: " + index)
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_OID;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	
	        // Write objectid
	        supportsBuffer ? buffer.write(value.id, index, 'binary') : writeToTypedArray(buffer, value.id, index);
	        // Ajust index
	        index = index + 12;
	        return index;
	      } else if(value instanceof Date || isDate(value)) {
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_DATE;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	
	        // Write the date
	        var dateInMilis = Long.fromNumber(value.getTime());
	        var lowBits = dateInMilis.getLowBits();
	        var highBits = dateInMilis.getHighBits();
	        // Encode low bits
	        buffer[index++] = lowBits & 0xff;
	        buffer[index++] = (lowBits >> 8) & 0xff;
	        buffer[index++] = (lowBits >> 16) & 0xff;
	        buffer[index++] = (lowBits >> 24) & 0xff;
	        // Encode high bits
	        buffer[index++] = highBits & 0xff;
	        buffer[index++] = (highBits >> 8) & 0xff;
	        buffer[index++] = (highBits >> 16) & 0xff;
	        buffer[index++] = (highBits >> 24) & 0xff;
	        return index;
	      } else if(typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_BINARY;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        // Get size of the buffer (current write point)
	        var size = value.length;
	        // Write the size of the string to buffer
	        buffer[index++] = size & 0xff;
	        buffer[index++] = (size >> 8) & 0xff;
	        buffer[index++] = (size >> 16) & 0xff;
	        buffer[index++] = (size >> 24) & 0xff;
	        // Write the default subtype
	        buffer[index++] = BSON.BSON_BINARY_SUBTYPE_DEFAULT;
	        // Copy the content form the binary field to the buffer
	        value.copy(buffer, index, 0, size);
	        // Adjust the index
	        index = index + size;
	        return index;
	      } else if(value instanceof Long || value instanceof Timestamp || value['_bsontype'] == 'Long' || value['_bsontype'] == 'Timestamp') {
	        // Write the type
	        buffer[index++] = value instanceof Long || value['_bsontype'] == 'Long' ? BSON.BSON_DATA_LONG : BSON.BSON_DATA_TIMESTAMP;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        // Write the date
	        var lowBits = value.getLowBits();
	        var highBits = value.getHighBits();
	        // Encode low bits
	        buffer[index++] = lowBits & 0xff;
	        buffer[index++] = (lowBits >> 8) & 0xff;
	        buffer[index++] = (lowBits >> 16) & 0xff;
	        buffer[index++] = (lowBits >> 24) & 0xff;
	        // Encode high bits
	        buffer[index++] = highBits & 0xff;
	        buffer[index++] = (highBits >> 8) & 0xff;
	        buffer[index++] = (highBits >> 16) & 0xff;
	        buffer[index++] = (highBits >> 24) & 0xff;
	        return index;
	      } else if(value instanceof Double || value['_bsontype'] == 'Double') {
	        // Encode as double
	        buffer[index++] = BSON.BSON_DATA_NUMBER;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        // Write float
	        writeIEEE754(buffer, value, index, 'little', 52, 8);
	        // Ajust index
	        index = index + 8;
	        return index;
	      } else if(value instanceof Code || value['_bsontype'] == 'Code') {
	        if(value.scope != null && Object.keys(value.scope).length > 0) {
	          // Write the type
	          buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE;
	          // Number of written bytes
	          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	          // Encode the name
	          index = index + numberOfWrittenBytes + 1;
	          buffer[index - 1] = 0;
	          // Calculate the scope size
	          var scopeSize = BSON.calculateObjectSize(value.scope, serializeFunctions);
	          // Function string
	          var functionString = value.code.toString();
	          // Function Size
	          var codeSize = supportsBuffer ? Buffer.byteLength(functionString) + 1 : numberOfBytes(functionString) + 1;
	
	          // Calculate full size of the object
	          var totalSize = 4 + codeSize + scopeSize + 4;
	
	          // Write the total size of the object
	          buffer[index++] = totalSize & 0xff;
	          buffer[index++] = (totalSize >> 8) & 0xff;
	          buffer[index++] = (totalSize >> 16) & 0xff;
	          buffer[index++] = (totalSize >> 24) & 0xff;
	
	          // Write the size of the string to buffer
	          buffer[index++] = codeSize & 0xff;
	          buffer[index++] = (codeSize >> 8) & 0xff;
	          buffer[index++] = (codeSize >> 16) & 0xff;
	          buffer[index++] = (codeSize >> 24) & 0xff;
	
	          // Write the string
	          supportsBuffer ? buffer.write(functionString, index, 'utf8') : writeToTypedArray(buffer, functionString, index);
	          // Update index
	          index = index + codeSize - 1;
	          // Write zero
	          buffer[index++] = 0;
	          // Serialize the scope object
	          var scopeObjectBuffer = supportsBuffer ? new Buffer(scopeSize) : new Uint8Array(new ArrayBuffer(scopeSize));
	          // Execute the serialization into a seperate buffer
	          serializeObject(value.scope, checkKeys, scopeObjectBuffer, 0, serializeFunctions);
	
	          // Adjusted scope Size (removing the header)
	          var scopeDocSize = scopeSize;
	          // Write scope object size
	          buffer[index++] = scopeDocSize & 0xff;
	          buffer[index++] = (scopeDocSize >> 8) & 0xff;
	          buffer[index++] = (scopeDocSize >> 16) & 0xff;
	          buffer[index++] = (scopeDocSize >> 24) & 0xff;
	
	          // Write the scopeObject into the buffer
	          supportsBuffer ? scopeObjectBuffer.copy(buffer, index, 0, scopeSize) : buffer.set(scopeObjectBuffer, index);
	          // Adjust index, removing the empty size of the doc (5 bytes 0000000005)
	          index = index + scopeDocSize - 5;
	          // Write trailing zero
	          buffer[index++] = 0;
	          return index
	        } else {
	          buffer[index++] = BSON.BSON_DATA_CODE;
	          // Number of written bytes
	          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	          // Encode the name
	          index = index + numberOfWrittenBytes + 1;
	          buffer[index - 1] = 0;
	          // Function string
	          var functionString = value.code.toString();
	          // Function Size
	          var size = supportsBuffer ? Buffer.byteLength(functionString) + 1 : numberOfBytes(functionString) + 1;
	          // Write the size of the string to buffer
	          buffer[index++] = size & 0xff;
	          buffer[index++] = (size >> 8) & 0xff;
	          buffer[index++] = (size >> 16) & 0xff;
	          buffer[index++] = (size >> 24) & 0xff;
	          // Write the string
	          supportsBuffer ? buffer.write(functionString, index, 'utf8') : writeToTypedArray(buffer, functionString, index);
	          // Update index
	          index = index + size - 1;
	          // Write zero
	          buffer[index++] = 0;
	          return index;
	        }
	      } else if(value instanceof Binary || value['_bsontype'] == 'Binary') {
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_BINARY;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        // Extract the buffer
	        var data = value.value(true);
	        // Calculate size
	        var size = value.position;
	        // Write the size of the string to buffer
	        buffer[index++] = size & 0xff;
	        buffer[index++] = (size >> 8) & 0xff;
	        buffer[index++] = (size >> 16) & 0xff;
	        buffer[index++] = (size >> 24) & 0xff;
	        // Write the subtype to the buffer
	        buffer[index++] = value.sub_type;
	
	        // If we have binary type 2 the 4 first bytes are the size
	        if(value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) {
	          buffer[index++] = size & 0xff;
	          buffer[index++] = (size >> 8) & 0xff;
	          buffer[index++] = (size >> 16) & 0xff;
	          buffer[index++] = (size >> 24) & 0xff;
	        }
	
	        // Write the data to the object
	        supportsBuffer ? data.copy(buffer, index, 0, value.position) : buffer.set(data, index);
	        // Ajust index
	        index = index + value.position;
	        return index;
	      } else if(value instanceof Symbol || value['_bsontype'] == 'Symbol') {
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_SYMBOL;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        // Calculate size
	        var size = supportsBuffer ? Buffer.byteLength(value.value) + 1 : numberOfBytes(value.value) + 1;
	        // Write the size of the string to buffer
	        buffer[index++] = size & 0xff;
	        buffer[index++] = (size >> 8) & 0xff;
	        buffer[index++] = (size >> 16) & 0xff;
	        buffer[index++] = (size >> 24) & 0xff;
	        // Write the string
	        buffer.write(value.value, index, 'utf8');
	        // Update index
	        index = index + size - 1;
	        // Write zero
	        buffer[index++] = 0x00;
	        return index;
	      } else if(value instanceof DBRef || value['_bsontype'] == 'DBRef') {
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_OBJECT;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	        // Set up correct object for serialization
	        var ordered_values = {
	            '$ref': value.namespace
	          , '$id' : value.oid
	        };
	
	        // Add db reference if it exists
	        if(null != value.db) {
	          ordered_values['$db'] = value.db;
	        }
	
	        // Message size
	        var size = BSON.calculateObjectSize(ordered_values, serializeFunctions);
	        // Serialize the object
	        var endIndex = BSON.serializeWithBufferAndIndex(ordered_values, checkKeys, buffer, index, serializeFunctions);
	        // Write the size of the string to buffer
	        buffer[index++] = size & 0xff;
	        buffer[index++] = (size >> 8) & 0xff;
	        buffer[index++] = (size >> 16) & 0xff;
	        buffer[index++] = (size >> 24) & 0xff;
	        // Write zero for object
	        buffer[endIndex++] = 0x00;
	        // Return the end index
	        return endIndex;
	      } else if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]') {
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_REGEXP;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	
	        // Write the regular expression string
	        supportsBuffer ? buffer.write(value.source, index, 'utf8') : writeToTypedArray(buffer, value.source, index);
	        // Adjust the index
	        index = index + (supportsBuffer ? Buffer.byteLength(value.source) : numberOfBytes(value.source));
	        // Write zero
	        buffer[index++] = 0x00;
	        // Write the parameters
	        if(value.global) buffer[index++] = 0x73; // s
	        if(value.ignoreCase) buffer[index++] = 0x69; // i
	        if(value.multiline) buffer[index++] = 0x6d; // m
	        // Add ending zero
	        buffer[index++] = 0x00;
	        return index;
	      } else {
	        // Write the type
	        buffer[index++] = Array.isArray(value) ? BSON.BSON_DATA_ARRAY : BSON.BSON_DATA_OBJECT;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Adjust the index
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
		      var endIndex = serializeObject(value, checkKeys, buffer, index + 4, serializeFunctions);
	        // Write size
	        var size = endIndex - index;
	        // Write the size of the string to buffer
	        buffer[index++] = size & 0xff;
	        buffer[index++] = (size >> 8) & 0xff;
	        buffer[index++] = (size >> 16) & 0xff;
	        buffer[index++] = (size >> 24) & 0xff;
	        return endIndex;
	      }
	    case 'function':
	      // WTF for 0.4.X where typeof /someregexp/ === 'function'
	      if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]' || String.call(value) == '[object RegExp]') {
	        // Write the type
	        buffer[index++] = BSON.BSON_DATA_REGEXP;
	        // Number of written bytes
	        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	        // Encode the name
	        index = index + numberOfWrittenBytes + 1;
	        buffer[index - 1] = 0;
	
	        // Write the regular expression string
	        buffer.write(value.source, index, 'utf8');
	        // Adjust the index
	        index = index + (supportsBuffer ? Buffer.byteLength(value.source) : numberOfBytes(value.source));
	        // Write zero
	        buffer[index++] = 0x00;
	        // Write the parameters
	        if(value.global) buffer[index++] = 0x73; // s
	        if(value.ignoreCase) buffer[index++] = 0x69; // i
	        if(value.multiline) buffer[index++] = 0x6d; // m
	        // Add ending zero
	        buffer[index++] = 0x00;
	        return index;
	      } else {
	        if(serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {
	          // Write the type
	          buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE;
	          // Number of written bytes
	          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	          // Encode the name
	          index = index + numberOfWrittenBytes + 1;
	          buffer[index - 1] = 0;
	          // Calculate the scope size
	          var scopeSize = BSON.calculateObjectSize(value.scope, serializeFunctions);
	          // Function string
	          var functionString = value.toString();
	          // Function Size
	          var codeSize = supportsBuffer ? Buffer.byteLength(functionString) + 1 : numberOfBytes(functionString) + 1;
	
	          // Calculate full size of the object
	          var totalSize = 4 + codeSize + scopeSize;
	
	          // Write the total size of the object
	          buffer[index++] = totalSize & 0xff;
	          buffer[index++] = (totalSize >> 8) & 0xff;
	          buffer[index++] = (totalSize >> 16) & 0xff;
	          buffer[index++] = (totalSize >> 24) & 0xff;
	
	          // Write the size of the string to buffer
	          buffer[index++] = codeSize & 0xff;
	          buffer[index++] = (codeSize >> 8) & 0xff;
	          buffer[index++] = (codeSize >> 16) & 0xff;
	          buffer[index++] = (codeSize >> 24) & 0xff;
	
	          // Write the string
	          supportsBuffer ? buffer.write(functionString, index, 'utf8') : writeToTypedArray(buffer, functionString, index);
	          // Update index
	          index = index + codeSize - 1;
	          // Write zero
	          buffer[index++] = 0;
	          // Serialize the scope object
	          var scopeObjectBuffer = new Buffer(scopeSize);
	          // Execute the serialization into a seperate buffer
	          serializeObject(value.scope, checkKeys, scopeObjectBuffer, 0, serializeFunctions);
	
	          // Adjusted scope Size (removing the header)
	          var scopeDocSize = scopeSize - 4;
	          // Write scope object size
	          buffer[index++] = scopeDocSize & 0xff;
	          buffer[index++] = (scopeDocSize >> 8) & 0xff;
	          buffer[index++] = (scopeDocSize >> 16) & 0xff;
	          buffer[index++] = (scopeDocSize >> 24) & 0xff;
	
	          // Write the scopeObject into the buffer
	          scopeObjectBuffer.copy(buffer, index, 0, scopeSize);
	
	          // Adjust index, removing the empty size of the doc (5 bytes 0000000005)
	          index = index + scopeDocSize - 5;
	          // Write trailing zero
	          buffer[index++] = 0;
	          return index
	        } else if(serializeFunctions) {
	          buffer[index++] = BSON.BSON_DATA_CODE;
	          // Number of written bytes
	          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);
	          // Encode the name
	          index = index + numberOfWrittenBytes + 1;
	          buffer[index - 1] = 0;
	          // Function string
	          var functionString = value.toString();
	          // Function Size
	          var size = supportsBuffer ? Buffer.byteLength(functionString) + 1 : numberOfBytes(functionString) + 1;
	          // Write the size of the string to buffer
	          buffer[index++] = size & 0xff;
	          buffer[index++] = (size >> 8) & 0xff;
	          buffer[index++] = (size >> 16) & 0xff;
	          buffer[index++] = (size >> 24) & 0xff;
	          // Write the string
	          supportsBuffer ? buffer.write(functionString, index, 'utf8') : writeToTypedArray(buffer, functionString, index);
	          // Update index
	          index = index + size - 1;
	          // Write zero
	          buffer[index++] = 0;
	          return index;
	        }
	      }
	  }
	
	  // If no value to serialize
	  return index;
	}
	
	/**
	 * Serialize a Javascript object.
	 *
	 * @param {Object} object the Javascript object to serialize.
	 * @param {Boolean} checkKeys the serializer will check if keys are valid.
	 * @param {Boolean} asBuffer return the serialized object as a Buffer object **(ignore)**.
	 * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.
	 * @return {Buffer} returns the Buffer object containing the serialized object.
	 * @api public
	 */
	BSON.serialize = function(object, checkKeys, asBuffer, serializeFunctions) {
	  // Throw error if we are trying serialize an illegal type
	  if(object == null || typeof object != 'object' || Array.isArray(object)) 
	    throw new Error("Only javascript objects supported");
	  
	  // Emoty target buffer
	  var buffer = null;
	  // Calculate the size of the object
	  var size = BSON.calculateObjectSize(object, serializeFunctions);
	  // Fetch the best available type for storing the binary data
	  if(buffer = typeof Buffer != 'undefined') {
	    buffer = new Buffer(size);
	    asBuffer = true;
	  } else if(typeof Uint8Array != 'undefined') {
	    buffer = new Uint8Array(new ArrayBuffer(size));
	  } else {
	    buffer = new Array(size);
	  }
	
	  // If asBuffer is false use typed arrays
	  BSON.serializeWithBufferAndIndex(object, checkKeys, buffer, 0, serializeFunctions);
	  // console.log("++++++++++++++++++++++++++++++++++++ OLDJS :: " + buffer.length)  
	  // console.log(buffer.toString('hex'))
	  // console.log(buffer.toString('ascii'))
	  return buffer;
	}
	
	/**
	 * Contains the function cache if we have that enable to allow for avoiding the eval step on each deserialization, comparison is by md5
	 *
	 * @ignore
	 * @api private
	 */
	var functionCache = BSON.functionCache = {};
	
	/**
	 * Crc state variables shared by function
	 *
	 * @ignore
	 * @api private
	 */
	var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];
	
	/**
	 * CRC32 hash method, Fast and enough versitility for our usage
	 *
	 * @ignore
	 * @api private
	 */
	var crc32 =  function(string, start, end) {
	  var crc = 0
	  var x = 0;
	  var y = 0;
	  crc = crc ^ (-1);
	
	  for(var i = start, iTop = end; i < iTop;i++) {
	  	y = (crc ^ string[i]) & 0xFF;
	    x = table[y];
	  	crc = (crc >>> 8) ^ x;
	  }
	
	  return crc ^ (-1);
	}
	
	/**
	 * Deserialize stream data as BSON documents.
	 *
	 * Options
	 *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.
	 *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.
	 *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.
	 *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits
	 *
	 * @param {Buffer} data the buffer containing the serialized set of BSON documents.
	 * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.
	 * @param {Number} numberOfDocuments number of documents to deserialize.
	 * @param {Array} documents an array where to store the deserialized documents.
	 * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.
	 * @param {Object} [options] additional options used for the deserialization.
	 * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.
	 * @api public
	 */
	BSON.deserializeStream = function(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {
	  // if(numberOfDocuments !== documents.length) throw new Error("Number of expected results back is less than the number of documents");
	  options = options != null ? options : {};
	  var index = startIndex;
	  // Loop over all documents
	  for(var i = 0; i < numberOfDocuments; i++) {
	    // Find size of the document
	    var size = data[index] | data[index + 1] << 8 | data[index + 2] << 16 | data[index + 3] << 24;
	    // Update options with index
	    options['index'] = index;
	    // Parse the document at this point
	    documents[docStartIndex + i] = BSON.deserialize(data, options);
	    // Adjust index by the document size
	    index = index + size;
	  }
	
	  // Return object containing end index of parsing and list of documents
	  return index;
	}
	
	/**
	 * Ensure eval is isolated.
	 *
	 * @ignore
	 * @api private
	 */
	var isolateEvalWithHash = function(functionCache, hash, functionString, object) {
	  // Contains the value we are going to set
	  var value = null;
	
	  // Check for cache hit, eval if missing and return cached function
	  if(functionCache[hash] == null) {
	    eval("value = " + functionString);
	    functionCache[hash] = value;
	  }
	  // Set the object
	  return functionCache[hash].bind(object);
	}
	
	/**
	 * Ensure eval is isolated.
	 *
	 * @ignore
	 * @api private
	 */
	var isolateEval = function(functionString) {
	  // Contains the value we are going to set
	  var value = null;
	  // Eval the function
	  eval("value = " + functionString);
	  return value;
	}
	
	/**
	 * Convert Uint8Array to String
	 *
	 * @ignore
	 * @api private
	 */
	var convertUint8ArrayToUtf8String = function(byteArray, startIndex, endIndex) {
	  return BinaryParser.decode_utf8(convertArraytoUtf8BinaryString(byteArray, startIndex, endIndex));
	}
	
	var convertArraytoUtf8BinaryString = function(byteArray, startIndex, endIndex) {
	  var result = "";
	  for(var i = startIndex; i < endIndex; i++) {
	    result = result + String.fromCharCode(byteArray[i]);
	  }
	
	  return result;
	};
	
	/**
	 * Deserialize data as BSON.
	 *
	 * Options
	 *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.
	 *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.
	 *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.
	 *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits
	 *
	 * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.
	 * @param {Object} [options] additional options used for the deserialization.
	 * @param {Boolean} [isArray] ignore used for recursive parsing.
	 * @return {Object} returns the deserialized Javascript Object.
	 * @api public
	 */
	BSON.deserialize = function(buffer, options, isArray) {
	  // Options
	  options = options == null ? {} : options;
	  var evalFunctions = options['evalFunctions'] == null ? false : options['evalFunctions'];
	  var cacheFunctions = options['cacheFunctions'] == null ? false : options['cacheFunctions'];
	  var cacheFunctionsCrc32 = options['cacheFunctionsCrc32'] == null ? false : options['cacheFunctionsCrc32'];
	  var promoteLongs = options['promoteLongs'] == null ? true : options['promoteLongs'];
	
	  // Validate that we have at least 4 bytes of buffer
	  if(buffer.length < 5) throw new Error("corrupt bson message < 5 bytes long");
	
	  // Set up index
	  var index = typeof options['index'] == 'number' ? options['index'] : 0;
	  // Reads in a C style string
	  var readCStyleString = function() {
	    // Get the start search index
	    var i = index;
	    // Locate the end of the c string
	    while(buffer[i] !== 0x00 && i < buffer.length) { 
	      i++ 
	    }
	    // If are at the end of the buffer there is a problem with the document
	    if(i >= buffer.length) throw new Error("Bad BSON Document: illegal CString")
	    // Grab utf8 encoded string
	    var string = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('utf8', index, i) : convertUint8ArrayToUtf8String(buffer, index, i);
	    // Update index position
	    index = i + 1;
	    // Return string
	    return string;
	  }
	
	  // Create holding object
	  var object = isArray ? [] : {};
	
	  // Read the document size
	  var size = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	
	  // Ensure buffer is valid size
	  if(size < 5 || size > buffer.length) throw new Error("corrupt bson message");
	
	  // While we have more left data left keep parsing
	  while(true) {
	    // Read the type
	    var elementType = buffer[index++];
	    // If we get a zero it's the last byte, exit
	    if(elementType == 0) break;
	    // Read the name of the field
	    var name = readCStyleString();
	    // Switch on the type
	    switch(elementType) {
	      case BSON.BSON_DATA_OID:
	        var string = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('binary', index, index + 12) : convertArraytoUtf8BinaryString(buffer, index, index + 12);
	        // Decode the oid
	        object[name] = new ObjectID(string);
	        // Update index
	        index = index + 12;
	        break;
	      case BSON.BSON_DATA_STRING:
	        // Read the content of the field
	        var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Add string to object
	        object[name] = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('utf8', index, index + stringSize - 1) : convertUint8ArrayToUtf8String(buffer, index, index + stringSize - 1);
	        // Update parse index position
	        index = index + stringSize;
	        break;
	      case BSON.BSON_DATA_INT:
	        // Decode the 32bit value
	        object[name] = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        break;
	      case BSON.BSON_DATA_NUMBER:
	        // Decode the double value
	        object[name] = readIEEE754(buffer, index, 'little', 52, 8);
	        // Update the index
	        index = index + 8;
	        break;
	      case BSON.BSON_DATA_DATE:
	        // Unpack the low and high bits
	        var lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Set date object
	        object[name] = new Date(new Long(lowBits, highBits).toNumber());
	        break;
	      case BSON.BSON_DATA_BOOLEAN:
	        // Parse the boolean value
	        object[name] = buffer[index++] == 1;
	        break;
	      case BSON.BSON_DATA_UNDEFINED:
	      case BSON.BSON_DATA_NULL:
	        // Parse the boolean value
	        object[name] = null;
	        break;
	      case BSON.BSON_DATA_BINARY:
	        // Decode the size of the binary blob
	        var binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Decode the subtype
	        var subType = buffer[index++];
	        // Decode as raw Buffer object if options specifies it
	        if(buffer['slice'] != null) {
	          // If we have subtype 2 skip the 4 bytes for the size
	          if(subType == Binary.SUBTYPE_BYTE_ARRAY) {
	            binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	          }
	          // Slice the data
	          object[name] = new Binary(buffer.slice(index, index + binarySize), subType);
	        } else {
	          var _buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(binarySize)) : new Array(binarySize);
	          // If we have subtype 2 skip the 4 bytes for the size
	          if(subType == Binary.SUBTYPE_BYTE_ARRAY) {
	            binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	          }
	          // Copy the data
	          for(var i = 0; i < binarySize; i++) {
	            _buffer[i] = buffer[index + i];
	          }
	          // Create the binary object
	          object[name] = new Binary(_buffer, subType);
	        }
	        // Update the index
	        index = index + binarySize;
	        break;
	      case BSON.BSON_DATA_ARRAY:
	        options['index'] = index;
	        // Decode the size of the array document
	        var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;
	        // Set the array to the object
	        object[name] = BSON.deserialize(buffer, options, true);
	        // Adjust the index
	        index = index + objectSize;
	        break;
	      case BSON.BSON_DATA_OBJECT:
	        options['index'] = index;
	        // Decode the size of the object document
	        var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;
	        // Set the array to the object
	        object[name] = BSON.deserialize(buffer, options, false);
	        // Adjust the index
	        index = index + objectSize;
	        break;
	      case BSON.BSON_DATA_REGEXP:
	        // Create the regexp
	        var source = readCStyleString();
	        var regExpOptions = readCStyleString();
	        // For each option add the corresponding one for javascript
	        var optionsArray = new Array(regExpOptions.length);
	
	        // Parse options
	        for(var i = 0; i < regExpOptions.length; i++) {
	          switch(regExpOptions[i]) {
	            case 'm':
	              optionsArray[i] = 'm';
	              break;
	            case 's':
	              optionsArray[i] = 'g';
	              break;
	            case 'i':
	              optionsArray[i] = 'i';
	              break;
	          }
	        }
	
	        object[name] = new RegExp(source, optionsArray.join(''));
	        break;
	      case BSON.BSON_DATA_LONG:
	        // Unpack the low and high bits
	        var lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Create long object
	        var long = new Long(lowBits, highBits); 
	        // Promote the long if possible
	        if(promoteLongs) {
	          object[name] = long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG) ? long.toNumber() : long;
	        } else {
	          object[name] = long;
	        }
	        break;
	      case BSON.BSON_DATA_SYMBOL:
	        // Read the content of the field
	        var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Add string to object
	        object[name] = new Symbol(buffer.toString('utf8', index, index + stringSize - 1));
	        // Update parse index position
	        index = index + stringSize;
	        break;
	      case BSON.BSON_DATA_TIMESTAMP:
	        // Unpack the low and high bits
	        var lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Set the object
	        object[name] = new Timestamp(lowBits, highBits);
	        break;
	      case BSON.BSON_DATA_MIN_KEY:
	        // Parse the object
	        object[name] = new MinKey();
	        break;
	      case BSON.BSON_DATA_MAX_KEY:
	        // Parse the object
	        object[name] = new MaxKey();
	        break;
	      case BSON.BSON_DATA_CODE:
	        // Read the content of the field
	        var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Function string
	        var functionString = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('utf8', index, index + stringSize - 1) : convertUint8ArrayToUtf8String(buffer, index, index + stringSize - 1);
	
	        // If we are evaluating the functions
	        if(evalFunctions) {
	          // Contains the value we are going to set
	          var value = null;
	          // If we have cache enabled let's look for the md5 of the function in the cache
	          if(cacheFunctions) {
	            var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;
	            // Got to do this to avoid V8 deoptimizing the call due to finding eval
	            object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);
	          } else {
	            // Set directly
	            object[name] = isolateEval(functionString);
	          }
	        } else {
	          object[name]  = new Code(functionString, {});
	        }
	
	        // Update parse index position
	        index = index + stringSize;
	        break;
	      case BSON.BSON_DATA_CODE_W_SCOPE:
	        // Read the content of the field
	        var totalSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        // Javascript function
	        var functionString = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('utf8', index, index + stringSize - 1) : convertUint8ArrayToUtf8String(buffer, index, index + stringSize - 1);
	        // Update parse index position
	        index = index + stringSize;
	        // Parse the element
	        options['index'] = index;
	        // Decode the size of the object document
	        var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;
	        // Decode the scope object
	        var scopeObject = BSON.deserialize(buffer, options, false);
	        // Adjust the index
	        index = index + objectSize;
	
	        // If we are evaluating the functions
	        if(evalFunctions) {
	          // Contains the value we are going to set
	          var value = null;
	          // If we have cache enabled let's look for the md5 of the function in the cache
	          if(cacheFunctions) {
	            var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;
	            // Got to do this to avoid V8 deoptimizing the call due to finding eval
	            object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);
	          } else {
	            // Set directly
	            object[name] = isolateEval(functionString);
	          }
	
	          // Set the scope on the object
	          object[name].scope = scopeObject;
	        } else {
	          object[name]  = new Code(functionString, scopeObject);
	        }
	
	        // Add string to object
	        break;
	    }
	  }
	
	  // Check if we have a db ref object
	  if(object['$id'] != null) object = new DBRef(object['$ref'], object['$id'], object['$db']);
	
	  // Return the final objects
	  return object;
	}
	
	/**
	 * Check if key name is valid.
	 *
	 * @ignore
	 * @api private
	 */
	BSON.checkKey = function checkKey (key, dollarsAndDotsOk) {
	  if (!key.length) return;
	  // Check if we have a legal key for the object
	  if (!!~key.indexOf("\x00")) {
	    // The BSON spec doesn't allow keys with null bytes because keys are
	    // null-terminated.
	    throw Error("key " + key + " must not contain null bytes");
	  }
	  if (!dollarsAndDotsOk) {
	    if('$' == key[0]) {
	      throw Error("key " + key + " must not start with '$'");
	    } else if (!!~key.indexOf('.')) {
	      throw Error("key " + key + " must not contain '.'");
	    }
	  }
	};
	
	/**
	 * Deserialize data as BSON.
	 *
	 * Options
	 *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.
	 *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.
	 *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.
	 *
	 * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.
	 * @param {Object} [options] additional options used for the deserialization.
	 * @param {Boolean} [isArray] ignore used for recursive parsing.
	 * @return {Object} returns the deserialized Javascript Object.
	 * @api public
	 */
	BSON.prototype.deserialize = function(data, options) {
	  return BSON.deserialize(data, options);
	}
	
	/**
	 * Deserialize stream data as BSON documents.
	 *
	 * Options
	 *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.
	 *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.
	 *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.
	 *
	 * @param {Buffer} data the buffer containing the serialized set of BSON documents.
	 * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.
	 * @param {Number} numberOfDocuments number of documents to deserialize.
	 * @param {Array} documents an array where to store the deserialized documents.
	 * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.
	 * @param {Object} [options] additional options used for the deserialization.
	 * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.
	 * @api public
	 */
	BSON.prototype.deserializeStream = function(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {
	  return BSON.deserializeStream(data, startIndex, numberOfDocuments, documents, docStartIndex, options);
	}
	
	/**
	 * Serialize a Javascript object.
	 *
	 * @param {Object} object the Javascript object to serialize.
	 * @param {Boolean} checkKeys the serializer will check if keys are valid.
	 * @param {Boolean} asBuffer return the serialized object as a Buffer object **(ignore)**.
	 * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.
	 * @return {Buffer} returns the Buffer object containing the serialized object.
	 * @api public
	 */
	BSON.prototype.serialize = function(object, checkKeys, asBuffer, serializeFunctions) {
	  return BSON.serialize(object, checkKeys, asBuffer, serializeFunctions);
	}
	
	/**
	 * Calculate the bson size for a passed in Javascript object.
	 *
	 * @param {Object} object the Javascript object to calculate the BSON byte size for.
	 * @param {Boolean} [serializeFunctions] serialize all functions in the object **(default:false)**.
	 * @return {Number} returns the number of bytes the BSON object will take up.
	 * @api public
	 */
	BSON.prototype.calculateObjectSize = function(object, serializeFunctions) {
	  return BSON.calculateObjectSize(object, serializeFunctions);
	}
	
	/**
	 * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.
	 *
	 * @param {Object} object the Javascript object to serialize.
	 * @param {Boolean} checkKeys the serializer will check if keys are valid.
	 * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.
	 * @param {Number} index the index in the buffer where we wish to start serializing into.
	 * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.
	 * @return {Number} returns the new write index in the Buffer.
	 * @api public
	 */
	BSON.prototype.serializeWithBufferAndIndex = function(object, checkKeys, buffer, startIndex, serializeFunctions) {
	  return BSON.serializeWithBufferAndIndex(object, checkKeys, buffer, startIndex, serializeFunctions);
	}
	
	/**
	 * @ignore
	 * @api private
	 */
	exports.Code = Code;
	exports.Symbol = Symbol;
	exports.BSON = BSON;
	exports.DBRef = DBRef;
	exports.Binary = Binary;
	exports.ObjectID = ObjectID;
	exports.Long = Long;
	exports.Timestamp = Timestamp;
	exports.Double = Double;
	exports.MinKey = MinKey;
	exports.MaxKey = MaxKey;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	module.exports = __webpack_require__(272);


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';
	
	var util = __webpack_require__(282),
	    BaseStore = __webpack_require__(271),
	    IGNORE_ON_PROTOTYPE = ['statics', 'storeName', 'handlers', 'mixins'];
	
	function createChainedFunction(one, two) {
	    return function chainedFunction() {
	        one.apply(this, arguments);
	        two.apply(this, arguments);
	    };
	}
	
	function mixInto(dest, src) {
	    Object.keys(src).forEach(function (prop) {
	        if (-1 !== IGNORE_ON_PROTOTYPE.indexOf(prop)) {
	            return;
	        }
	        if ('initialize' === prop) {
	            if (!dest[prop]) {
	                dest[prop] = src[prop];
	            } else {
	                dest[prop] = createChainedFunction(dest[prop], src[prop]);
	            }
	        } else {
	            if (dest.hasOwnProperty(prop)) {
	                throw new Error('Mixin property collision for property "' + prop + '"');
	            }
	            dest[prop] = src[prop];
	        }
	    });
	}
	
	/**
	 * Helper for creating a store class
	 * @method createStore
	 * @param {Object} spec
	 * @param {String} spec.storeName The name of the store
	 * @param {Object} spec.handlers Hash of action name to method name of action handlers
	 * @param {Function} spec.initialize Function called during construction for setting the default state
	 * @param {Function} spec.dehydrate Function that returns serializable data to send to the client
	 * @param {Function} spec.rehydrate Function that takes in serializable data to rehydrate the store
	 */
	module.exports = function createStore(spec) {
	    spec.statics = spec.statics || {};
	    if (!spec.storeName && !spec.statics.storeName) {
	        throw new Error('createStore called without a storeName');
	    }
	    var Store = function (dispatcher) {
	        BaseStore.call(this, dispatcher);
	    };
	
	    util.inherits(Store, BaseStore);
	
	    Object.keys(spec.statics).forEach(function (prop) {
	        Store[prop] = spec.statics[prop];
	    });
	
	    Store.storeName = spec.storeName || Store.storeName;
	    Store.handlers = spec.handlers || Store.handlers;
	    Store.mixins = spec.mixins || Store.mixins;
	
	    if (Store.mixins) {
	        Store.mixins.forEach(function(mixin) {
	            mixInto(Store.prototype, mixin);
	        });
	    }
	    mixInto(Store.prototype, spec);
	
	    return Store;
	};


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (context, payload, done) {
	  context.dispatch("UPDATE_TIME");
	  done();
	};
	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Module dependencies.
	 */
	var Collection = __webpack_require__(172).Collection,
	    Cursor = __webpack_require__(197).Cursor,
	    DbCommand = __webpack_require__(175).DbCommand,
	    utils = __webpack_require__(207);
	
	/**
	 * Allows the user to access the admin functionality of MongoDB
	 *
	 * @class Represents the Admin methods of MongoDB.
	 * @param {Object} db Current db instance we wish to perform Admin operations on.
	 * @return {Function} Constructor for Admin type.
	 */
	function Admin(db) {
	  if(!(this instanceof Admin)) return new Admin(db);
	
	  /**
	   * Retrieve the server information for the current
	   * instance of the db client
	   *
	   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from buildInfo or null if an error occured.
	   * @return {null} Returns no result
	   * @api public
	   */
	  this.buildInfo = function(callback) {
	    this.serverInfo(callback);
	  }
	
	  /**
	   * Retrieve the server information for the current
	   * instance of the db client
	   *
	   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from serverInfo or null if an error occured.
	   * @return {null} Returns no result
	   * @api private
	   */
	  this.serverInfo = function(callback) {
	    db.executeDbAdminCommand({buildinfo:1}, function(err, doc) {
	      if(err != null) return callback(err, null);
	      return callback(null, doc.documents[0]);
	    });
	  }
	
	  /**
	   * Retrieve this db's server status.
	   *
	   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from serverStatus or null if an error occured.
	   * @return {null}
	   * @api public
	   */
	  this.serverStatus = function(callback) {
	    var self = this;
	
	    db.executeDbAdminCommand({serverStatus: 1}, function(err, doc) {
	      if(err == null && doc.documents[0].ok === 1) {
	        callback(null, doc.documents[0]);
	      } else {
	        if(err) return callback(err, false);
	        return callback(utils.toError(doc.documents[0]), false);
	      }
	    });
	  };
	
	  /**
	   * Retrieve the current profiling Level for MongoDB
	   *
	   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from profilingLevel or null if an error occured.
	   * @return {null} Returns no result
	   * @api public
	   */
	  this.profilingLevel = function(callback) {
	    var self = this;
	
	    db.executeDbAdminCommand({profile:-1}, function(err, doc) {
	      doc = doc.documents[0];
	
	      if(err == null && doc.ok === 1) {
	        var was = doc.was;
	        if(was == 0) return callback(null, "off");
	        if(was == 1) return callback(null, "slow_only");
	        if(was == 2) return callback(null, "all");
	          return callback(new Error("Error: illegal profiling level value " + was), null);
	      } else {
	        err != null ? callback(err, null) : callback(new Error("Error with profile command"), null);
	      }
	    });
	  };
	
	  /**
	   * Ping the MongoDB server and retrieve results
	   *
	   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from ping or null if an error occured.
	   * @return {null} Returns no result
	   * @api public
	   */
	  this.ping = function(options, callback) {
	    // Unpack calls
	    var args = Array.prototype.slice.call(arguments, 0);
	    db.executeDbAdminCommand({ping: 1}, args.pop());
	  }
	
	  /**
	   * Authenticate against MongoDB
	   *
	   * @param {String} username The user name for the authentication.
	   * @param {String} password The password for the authentication.
	   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from authenticate or null if an error occured.
	   * @return {null} Returns no result
	   * @api public
	   */
	  this.authenticate = function(username, password, callback) {
	    db.authenticate(username, password, {authdb: 'admin'}, function(err, doc) {
	      return callback(err, doc);
	    })
	  }
	
	  /**
	   * Logout current authenticated user
	   *
	   * @param {Object} [options] Optional parameters to the command.
	   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from logout or null if an error occured.
	   * @return {null} Returns no result
	   * @api public
	   */
	  this.logout = function(callback) {
	    db.logout({authdb: 'admin'},  function(err, doc) {
	      return callback(err, doc);
	    })
	  }
	
	  /**
	   * Add a user to the MongoDB server, if the user exists it will
	   * overwrite the current password
	   *
	   * Options
	   *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	   *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	   *
	   * @param {String} username The user name for the authentication.
	   * @param {String} password The password for the authentication.
	   * @param {Object} [options] additional options during update.
	   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from addUser or null if an error occured.
	   * @return {null} Returns no result
	   * @api public
	   */
	  this.addUser = function(username, password, options, callback) {
	    var args = Array.prototype.slice.call(arguments, 2);
	    callback = args.pop();
	    options = args.length ? args.shift() : {};
	    // Set the db name to admin
	    options.dbName = 'admin';
	    // Add user
	    db.addUser(username, password, options, function(err, doc) {
	      return callback(err, doc);
	    })
	  }
	  /**
	   * Remove a user from the MongoDB server
	   *
	   * Options
	   *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	   *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	   *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	   *
	   * @param {String} username The user name for the authentication.
	   * @param {Object} [options] additional options during update.
	   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from removeUser or null if an error occured.
	   * @return {null} Returns no result
	   * @api public
	   */
	  this.removeUser = function(username, options, callback) {
	    var self = this;
	    var args = Array.prototype.slice.call(arguments, 1);
	    callback = args.pop();
	    options = args.length ? args.shift() : {};
	    options.dbName = 'admin';
	
	    db.removeUser(username, options, function(err, doc) {
	      return callback(err, doc);
	    })
	  }
	
	  /**
	   * Set the current profiling level of MongoDB
	   *
	   * @param {String} level The new profiling level (off, slow_only, all)
	   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from setProfilingLevel or null if an error occured.
	   * @return {null} Returns no result
	   * @api public
	   */
	  this.setProfilingLevel = function(level, callback) {
	    var self = this;
	    var command = {};
	    var profile = 0;
	
	    if(level == "off") {
	      profile = 0;
	    } else if(level == "slow_only") {
	      profile = 1;
	    } else if(level == "all") {
	      profile = 2;
	    } else {
	      return callback(new Error("Error: illegal profiling level value " + level));
	    }
	
	    // Set up the profile number
	    command['profile'] = profile;
	
	    db.executeDbAdminCommand(command, function(err, doc) {
	      doc = doc.documents[0];
	
	      if(err == null && doc.ok === 1)
	        return callback(null, level);
	      return err != null ? callback(err, null) : callback(new Error("Error with profile command"), null);
	    });
	  };
	
	  /**
	   * Retrive the current profiling information for MongoDB
	   *
	   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from profilingInfo or null if an error occured.
	   * @return {null} Returns no result
	   * @api public
	   */
	  this.profilingInfo = function(callback) {
	    try {
	      new Cursor(db, new Collection(db, DbCommand.SYSTEM_PROFILE_COLLECTION), {}, {}, {dbName: 'admin'}).toArray(function(err, items) {
	          return callback(err, items);
	      });
	    } catch (err) {
	      return callback(err, null);
	    }
	  };
	
	  /**
	   * Execute a db command against the Admin database
	   *
	   * @param {Object} command A command object `{ping:1}`.
	   * @param {Object} [options] Optional parameters to the command.
	   * @param {Function} callback this will be called after executing this method. The command always return the whole result of the command as the second parameter.
	   * @return {null} Returns no result
	   * @api public
	   */
	  this.command = function(command, options, callback) {
	    var self = this;
	    var args = Array.prototype.slice.call(arguments, 1);
	    callback = args.pop();
	    options = args.length ? args.shift() : {};
	
	    // Execute a command
	    db.executeDbAdminCommand(command, options, function(err, doc) {
	      // Ensure change before event loop executes
	      return callback != null ? callback(err, doc) : null;
	    });
	  }
	
	  /**
	   * Validate an existing collection
	   *
	   * @param {String} collectionName The name of the collection to validate.
	   * @param {Object} [options] Optional parameters to the command.
	   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from validateCollection or null if an error occured.
	   * @return {null} Returns no result
	   * @api public
	   */
	  this.validateCollection = function(collectionName, options, callback) {
	    var args = Array.prototype.slice.call(arguments, 1);
	    callback = args.pop();
	    options = args.length ? args.shift() : {};
	
	    var self = this;
	    var command = {validate: collectionName};
	    var keys = Object.keys(options);
	
	    // Decorate command with extra options
	    for(var i = 0; i < keys.length; i++) {
	      if(options.hasOwnProperty(keys[i])) {
	        command[keys[i]] = options[keys[i]];
	      }
	    }
	
	    db.command(command, function(err, doc) {
	      if(err != null) return callback(err, null);
	
	      if(doc.ok === 0)
	        return callback(new Error("Error with validate command"), null);
	      if(doc.result != null && doc.result.constructor != String)
	        return callback(new Error("Error with validation data"), null);
	      if(doc.result != null && doc.result.match(/exception|corrupt/) != null)
	        return callback(new Error("Error: invalid collection " + collectionName), null);
	      if(doc.valid != null && !doc.valid)
	        return callback(new Error("Error: invalid collection " + collectionName), null);
	
	      return callback(null, doc);
	    });
	  };
	
	  /**
	   * List the available databases
	   *
	   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from listDatabases or null if an error occured.
	   * @return {null} Returns no result
	   * @api public
	   */
	  this.listDatabases = function(callback) {
	    // Execute the listAllDatabases command
	    db.executeDbAdminCommand({listDatabases:1}, {}, function(err, doc) {
	      if(err != null) return callback(err, null);
	      return callback(null, doc.documents[0]);
	    });
	  }
	
	  /**
	   * Get ReplicaSet status
	   *
	   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from replSetGetStatus or null if an error occured.
	   * @return {null}
	   * @api public
	   */
	  this.replSetGetStatus = function(callback) {
	    var self = this;
	
	    db.executeDbAdminCommand({replSetGetStatus:1}, function(err, doc) {
	      if(err == null && doc.documents[0].ok === 1)
	        return callback(null, doc.documents[0]);
	      if(err) return callback(err, false);
	      return callback(utils.toError(doc.documents[0]), false);
	    });
	  };
	};
	
	/**
	 * @ignore
	 */
	exports.Admin = Admin;


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	var ReadPreference = __webpack_require__(187).ReadPreference
		, Readable = __webpack_require__(295).Readable || __webpack_require__(299).Readable
		, CommandCursor = __webpack_require__(173).CommandCursor
		, utils = __webpack_require__(207)
		, shared = __webpack_require__(171)
		, inherits = __webpack_require__(282).inherits;
	
	var AggregationCursor = function(collection, serverCapabilities, options) {	
		var pipe = [];
		var self = this;
		var results = null;	
		var _cursor_options = {};
		// Ensure we have options set up
		options = options == null ? {} : options;
	
		// If a pipeline was provided
		pipe = Array.isArray(options.pipe) ? options.pipe : pipe;
		// Set passed in batchSize if provided
		if(typeof options.batchSize == 'number') _cursor_options.batchSize = options.batchSize;
		// Get the read Preference
		var readPreference = shared._getReadConcern(collection, options);
	
		// Set up
		Readable.call(this, {objectMode: true});
	
		// Contains connection
		var connection = null;
	
		// Set the read preference
		var _options = { 
			readPreference: readPreference
		};
	
		// Actual command
		var command = {
				aggregate: collection.collectionName
			, pipeline: pipe
			, cursor: _cursor_options
		}
	
		// If allowDiskUse is set
		if(typeof options.allowDiskUse == 'boolean') 
			command.allowDiskUse = options.allowDiskUse;
	
	  // If maxTimeMS is set
	  if(typeof options.maxTimeMS == 'number')
	    command.maxTimeMS = options.maxTimeMS;
	
		// Command cursor (if we support one)
		var commandCursor = new CommandCursor(collection.db, collection, command);
	
		this.explain = function(callback) {
			if(typeof callback != 'function') 
				throw utils.toError("AggregationCursor explain requires a callback function");
			
			// Add explain options
			_options.explain = true;
			// Execute aggregation pipeline
			collection.aggregate(pipe, _options, function(err, results) {
				if(err) return callback(err, null);
				callback(null, results);
			});
		}
	
		this.get = function(callback) {
			if(typeof callback != 'function') 
				throw utils.toError("AggregationCursor get requires a callback function");		
		  // Checkout a connection
		  var _connection = collection.db.serverConfig.checkoutReader(_options.readPreference);
		  // Fall back
			if(!_connection.serverCapabilities.hasAggregationCursor) {
				return collection.aggregate(pipe, _options, function(err, results) {
					if(err) return callback(err);
					callback(null, results);
				});			
			}
	
			// Execute get using command Cursor
			commandCursor.get({connection: _connection}, callback);
		}
	
		this.getOne = function(callback) {
			if(typeof callback != 'function') 
				throw utils.toError("AggregationCursor getOne requires a callback function");		
			// Set the limit to 1
			pipe.push({$limit: 1});
			// For now we have no cursor command so let's just wrap existing results
			collection.aggregate(pipe, _options, function(err, results) {
				if(err) return callback(err);
				callback(null, results[0]);
			});
		}
	
		this.each = function(callback) {
		  // Checkout a connection if we have none
		  if(!connection)
		  	connection = collection.db.serverConfig.checkoutReader(_options.readPreference);
		  
		  // Fall back
			if(!connection.serverCapabilities.hasAggregationCursor) {
				return collection.aggregate(pipe, _options, function(err, _results) {
					if(err) return callback(err);
	
					while(_results.length > 0) {
						callback(null, _results.shift());
					}
	
					callback(null, null);
				});
			}
	
			// Execute each using command Cursor
			commandCursor.each({connection: connection}, function(err, doc) {
				callback(err, doc);
			});		
		}
	
		this.next = function(callback) {
			if(typeof callback != 'function') 
				throw utils.toError("AggregationCursor next requires a callback function");		
	
		  // Checkout a connection if we have none
		  if(!connection)
		  	connection = collection.db.serverConfig.checkoutReader(_options.readPreference);
		  
		  // Fall back
			if(!connection.serverCapabilities.hasAggregationCursor) {
				if(!results) {
					// For now we have no cursor command so let's just wrap existing results
					return collection.aggregate(pipe, _options, function(err, _results) {
						if(err) return callback(err);
						results = _results;
		        
		        // Ensure we don't issue undefined
		        var item = results.shift();
		        callback(null, item ? item : null);
					});			
				}
	
		    // Ensure we don't issue undefined
		    var item = results.shift();
		    // Return the item
		    return callback(null, item ? item : null);
		  }
	
			// Execute next using command Cursor
			commandCursor.next({connection: connection}, callback);		
		}
	
		//
		// Close method
		//
		this.close = function(callback) {
			if(typeof callback != 'function') 
				throw utils.toError("AggregationCursor close requires a callback function");		
	
		  // Checkout a connection if we have none
		  if(!connection)
		  	connection = collection.db.serverConfig.checkoutReader(_options.readPreference);
	
		  // Fall back
			if(!connection.serverCapabilities.hasAggregationCursor) {
				return callback(null, null);
			}
	
			// Execute next using command Cursor
			commandCursor.close(callback);		
		}
	
		//
		// Stream method
		//
		this._read = function(n) {
			self.next(function(err, result) {
				if(err) {
					self.emit('error', err);
					return self.push(null);
				}
	
				self.push(result);
			});
		}
	}
	
	// Inherit from Readable
	if(Readable != null) {
		inherits(AggregationCursor, Readable);	
	}
	
	// Exports the Aggregation Framework
	exports.AggregationCursor = AggregationCursor;


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var DbCommand = __webpack_require__(175).DbCommand
	  , utils = __webpack_require__(207)
	  , crypto = __webpack_require__(296);
	
	var authenticate = function(db, username, password, authdb, options, callback) {
	  var numberOfConnections = 0;
	  var errorObject = null;
	  var numberOfValidConnections = 0;
	  var credentialsValid = false;
	  options = options || {};
	
	  if(options['connection'] != null) {
	    //if a connection was explicitly passed on options, then we have only one...
	    numberOfConnections = 1;
	  } else {
	    // Get the amount of connections in the pool to ensure we have authenticated all comments
	    numberOfConnections = db.serverConfig.allRawConnections().length;
	    options['onAll'] = true;
	  }
	
	  // Return connection option
	  options.returnConnection = true;
	
	  // Execute nonce command
	  db.command({'getnonce':1}, options, function(err, result, connection) {
	    // Execute on all the connections
	    if(err == null) {
	      // Nonce used to make authentication request with md5 hash
	      var nonce = result.nonce;
	
	      // Use node md5 generator
	      var md5 = crypto.createHash('md5');
	      // Generate keys used for authentication
	      md5.update(username + ":mongo:" + password);
	      var hash_password = md5.digest('hex');
	      // Final key
	      md5 = crypto.createHash('md5');
	      md5.update(nonce + username + hash_password);
	      var key = md5.digest('hex');
	      
	      // Creat cmd
	      var cmd = {'authenticate':1, 'user':username, 'nonce':nonce, 'key':key};
	
	      // Execute command
	      db.db(authdb).command(cmd, {connection:connection}, function(err, result) {
	        // Count down
	        numberOfConnections = numberOfConnections - 1;
	        
	        // Ensure we save any error
	        if(err) { 
	          errorObject = err;
	        } else {
	          credentialsValid = true;
	          numberOfValidConnections = numberOfValidConnections + 1;
	        }
	
	        // Work around the case where the number of connections are 0
	        if(numberOfConnections <= 0 && typeof callback == 'function') {
	          var internalCallback = callback;
	          callback = null;
	
	          if(errorObject == null && credentialsValid) {
	            db.serverConfig.auth.add('MONGODB-CR', db.databaseName, username, password, authdb);
	            // Return callback
	            internalCallback(errorObject, true);
	          } else if(numberOfValidConnections > 0 && numberOfValidConnections != numberOfConnections
	            && credentialsValid) {
	              // One or more servers failed on auth (f.ex secondary hanging on foreground indexing)
	              db.serverConfig.auth.add('MONGODB-CR', db.databaseName, username, password, authdb);
	              // Return callback
	              internalCallback(errorObject, true);
	          } else {
	            internalCallback(errorObject, false);
	          }
	        }
	      });
	    }
	  });
	}
	
	exports.authenticate = authenticate;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var DbCommand = __webpack_require__(175).DbCommand
	  , utils = __webpack_require__(207)
	  , format = __webpack_require__(282).format;
	
	// Kerberos class
	var Kerberos = null;
	var MongoAuthProcess = null;
	// Try to grab the Kerberos class
	try {
	  Kerberos = __webpack_require__(297).Kerberos
	  // Authentication process for Mongo
	  MongoAuthProcess = __webpack_require__(297).processes.MongoAuthProcess
	} catch(err) {}
	
	var authenticate = function(db, username, password, authdb, options, callback) {
	  var numberOfConnections = 0;
	  var errorObject = null;  
	  var numberOfValidConnections = 0;
	  var credentialsValid = false;
	  options = options || {};
	  
	  // We don't have the Kerberos library
	  if(Kerberos == null) return callback(new Error("Kerberos library is not installed"));  
	
	  if(options['connection'] != null) {
	    //if a connection was explicitly passed on options, then we have only one...
	    numberOfConnections = 1;
	  } else {
	    // Get the amount of connections in the pool to ensure we have authenticated all comments
	    numberOfConnections = db.serverConfig.allRawConnections().length;
	    options['onAll'] = true;
	  }
	
	  // Grab all the connections
	  var connections = options['connection'] != null ? [options['connection']] : db.serverConfig.allRawConnections();
	  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';
	
	  // Authenticate all connections
	  for(var i = 0; i < numberOfConnections; i++) {
	
	    // Start Auth process for a connection
	    GSSAPIInitialize(db, username, password, authdb, gssapiServiceName, connections[i], function(err, result) {
	      // Adjust number of connections left to connect
	      numberOfConnections = numberOfConnections - 1;
	
	      // Ensure we save any error
	      if(err) { 
	        errorObject = err;
	      } else {
	        credentialsValid = true;
	        numberOfValidConnections = numberOfValidConnections + 1;
	      }
	
	      // Work around the case where the number of connections are 0
	      if(numberOfConnections <= 0 && typeof callback == 'function') {
	        var internalCallback = callback;
	        callback = null;
	
	        // We are done
	        if(errorObject == null && numberOfConnections == 0) {
	          // We authenticated correctly save the credentials
	          db.serverConfig.auth.add('GSSAPI', db.databaseName, username, password, authdb, gssapiServiceName);
	          // Return valid callback
	          return internalCallback(null, true);
	        } else if(numberOfValidConnections > 0 && numberOfValidConnections != numberOfConnections
	          && credentialsValid) {
	            // We authenticated correctly save the credentials
	            db.serverConfig.auth.add('GSSAPI', db.databaseName, username, password, authdb, gssapiServiceName);
	            // Return valid callback
	            return internalCallback(null, true);
	        } else {
	          return internalCallback(errorObject, false);        
	        }
	      }
	    });    
	  }
	}
	
	//
	// Initialize step
	var GSSAPIInitialize = function(db, username, password, authdb, gssapiServiceName, connection, callback) {
	  // Create authenticator
	  var mongo_auth_process = new MongoAuthProcess(connection.socketOptions.host, connection.socketOptions.port, gssapiServiceName);
	
	  // Perform initialization
	  mongo_auth_process.init(username, password, function(err, context) {
	    if(err) return callback(err, false);
	
	    // Perform the first step
	    mongo_auth_process.transition('', function(err, payload) {
	      if(err) return callback(err, false);
	
	      // Call the next db step
	      MongoDBGSSAPIFirstStep(mongo_auth_process, payload, db, username, password, authdb, connection, callback);
	    });
	  });
	}
	
	//
	// Perform first step against mongodb
	var MongoDBGSSAPIFirstStep = function(mongo_auth_process, payload, db, username, password, authdb, connection, callback) {
	  // Build the sasl start command
	  var command = {
	      saslStart: 1
	    , mechanism: 'GSSAPI'
	    , payload: payload
	    , autoAuthorize: 1
	  };
	
	  // Execute first sasl step
	  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {
	    if(err) return callback(err, false);
	    // Get the payload
	    doc = doc.documents[0];
	    var db_payload = doc.payload;
	
	    mongo_auth_process.transition(doc.payload, function(err, payload) {
	      if(err) return callback(err, false);
	
	      // MongoDB API Second Step
	      MongoDBGSSAPISecondStep(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback);
	    });
	  });
	}
	
	//
	// Perform first step against mongodb
	var MongoDBGSSAPISecondStep = function(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback) {
	  // Build Authentication command to send to MongoDB
	  var command = {
	      saslContinue: 1
	    , conversationId: doc.conversationId
	    , payload: payload
	  };
	
	  // Execute the command
	  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {
	    if(err) return callback(err, false);
	
	    // Get the result document
	    doc = doc.documents[0];
	
	    // Call next transition for kerberos
	    mongo_auth_process.transition(doc.payload, function(err, payload) {
	      if(err) return callback(err, false);
	
	      // Call the last and third step
	      MongoDBGSSAPIThirdStep(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback);
	    });    
	  });
	}
	
	var MongoDBGSSAPIThirdStep = function(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback) {
	  // Build final command
	  var command = {
	      saslContinue: 1
	    , conversationId: doc.conversationId
	    , payload: payload
	  };
	
	  // Let's finish the auth process against mongodb
	  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {
	    if(err) return callback(err, false);
	
	    mongo_auth_process.transition(null, function(err, payload) {
	      if(err) return callback(err, false);
	      callback(null, true);
	    });
	  });
	}
	
	exports.authenticate = authenticate;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	var DbCommand = __webpack_require__(175).DbCommand
	  , utils = __webpack_require__(207)
	  , crypto = __webpack_require__(296)
	  , Binary = __webpack_require__(150).Binary
	  , format = __webpack_require__(282).format;
	
	var authenticate = function(db, username, password, options, callback) {
	  var numberOfConnections = 0;
	  var errorObject = null;
	  var numberOfValidConnections = 0;
	  var credentialsValid = false;
	  options = options || {};
	  
	  if(options['connection'] != null) {
	    //if a connection was explicitly passed on options, then we have only one...
	    numberOfConnections = 1;
	  } else {
	    // Get the amount of connections in the pool to ensure we have authenticated all comments
	    numberOfConnections = db.serverConfig.allRawConnections().length;
	    options['onAll'] = true;
	  }
	
	  // Create payload
	  var payload = new Binary(format("\x00%s\x00%s", username, password));
	
	  // Let's start the sasl process
	  var command = {
	      saslStart: 1
	    , mechanism: 'PLAIN'
	    , payload: payload
	    , autoAuthorize: 1
	  };
	
	  // Grab all the connections
	  var connections = options['connection'] != null ? [options['connection']] : db.serverConfig.allRawConnections();
	
	  // Authenticate all connections
	  for(var i = 0; i < numberOfConnections; i++) {
	    var connection = connections[i];
	    // Execute first sasl step
	    db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, result) {
	      // Count down
	      numberOfConnections = numberOfConnections - 1;
	
	      // Ensure we save any error
	      if(err) {
	        errorObject = err;
	      } else if(result.documents[0].err != null || result.documents[0].errmsg != null){
	        errorObject = utils.toError(result.documents[0]);
	      } else {
	        credentialsValid = true;
	        numberOfValidConnections = numberOfValidConnections + 1;        
	      }
	
	      // Work around the case where the number of connections are 0
	      if(numberOfConnections <= 0 && typeof callback == 'function') {
	        var internalCallback = callback;
	        callback = null;
	
	        if(errorObject == null && credentialsValid) {
	          // We authenticated correctly save the credentials
	          db.serverConfig.auth.add('PLAIN', db.databaseName, username, password);
	          // Return callback
	          internalCallback(errorObject, true);
	        } else if(numberOfValidConnections > 0 && numberOfValidConnections != numberOfConnections
	          && credentialsValid) {
	            // We authenticated correctly save the credentials
	            db.serverConfig.auth.add('PLAIN', db.databaseName, username, password);
	            // Return callback
	            internalCallback(errorObject, true);
	        } else {
	          internalCallback(errorObject, false);
	        }
	      }
	    });
	  }
	}
	
	exports.authenticate = authenticate;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var DbCommand = __webpack_require__(175).DbCommand
	  , utils = __webpack_require__(207)
	  , crypto = __webpack_require__(296)
	  , Binary = __webpack_require__(150).Binary
	  , f = __webpack_require__(282).format;
	
	var authenticate = function(db, username, password, authdb, options, callback) {
	  var numberOfConnections = 0;
	  var errorObject = null;
	  var numberOfValidConnections = 0;
	  var credentialsValid = false;
	  options = options || {};
	
	  // Grab all the connections
	  var connections = options['connection'] != null ? [options['connection']] : db.serverConfig.allRawConnections().slice(0);
	  if(connections.length > 1) {
	    options['onAll'] = true; 
	  }
	
	  // Total connections
	  var count = connections.length;
	  if(count == 0) return callback(null, null);
	
	  // Valid connections
	  var numberOfValidConnections = 0;
	  var credentialsValid = false;
	  var errorObject = null;
	
	  // For each connection we need to authenticate
	  while(connections.length > 0) {    
	    // Execute MongoCR
	    var executeScram = function(connection) {
	      // Clean up the user
	      username = username.replace('=', "=3D").replace(',', '=2C');
	
	      // Create a random nonce
	      var nonce = crypto.randomBytes(24).toString('base64');
	      // var nonce = 'MsQUY9iw0T9fx2MUEz6LZPwGuhVvWAhc'
	      var firstBare = f("n=%s,r=%s", username, nonce);
	
	      // Build command structure
	      var cmd = {
	          saslStart: 1
	        , mechanism: 'SCRAM-SHA-1'
	        , payload: new Binary(f("n,,%s", firstBare))
	        , autoAuthorize: 1
	      }
	
	      // Handle the error
	      var handleError = function(err, r) {
	        if(err) {
	          errorObject = err; return false;
	        } else if(r['$err']) {
	          errorObject = r; return false;
	        } else if(r['errmsg']) {
	          errorObject = r; return false;
	        } else {
	          credentialsValid = true;
	          numberOfValidConnections = numberOfValidConnections + 1;            
	        }
	
	        return true
	      }
	
	      // Finish up
	      var finish = function(_count, _numberOfValidConnections) {
	        if(_count == 0 && _numberOfValidConnections > 0) {
	          db.serverConfig.auth.add('SCRAM-SHA-1', db.databaseName, username, password, authdb);
	          // Return correct authentication
	          return callback(null, true);
	        } else if(_count == 0) {
	          if(errorObject == null) errorObject = utils.toError(f("failed to authenticate using scram"));
	          return callback(errorObject, false);
	        }
	      }
	
	      var handleEnd = function(_err, _r) {
	        // Handle any error
	        handleError(_err, _r)
	        // Adjust the number of connections
	        count = count - 1;
	        // Execute the finish
	        finish(count, numberOfValidConnections);                
	      }
	
	      // Execute start sasl command
	      db.db(authdb).command(cmd, { connection: connection }, function(err, r) {
	        // Do we have an error, handle it
	        if(handleError(err, r) == false) {
	          count = count - 1;
	
	          if(count == 0 && numberOfValidConnections > 0) {
	            // Store the auth details
	            addAuthSession(new AuthSession(db, username, password));
	            // Return correct authentication
	            return callback(null, true);
	          } else if(count == 0) {
	            if(errorObject == null) errorObject = utils.toError(f("failed to authenticate using scram"));
	            return callback(errorObject, false);
	          }
	
	          return;
	        }
	
	        // Get the dictionary
	        var dict = parsePayload(r.payload.value())
	
	        // Unpack dictionary
	        var iterations = parseInt(dict.i, 10);
	        var salt = dict.s;
	        var rnonce = dict.r;
	
	        // Set up start of proof
	        var withoutProof = f("c=biws,r=%s", rnonce);
	        var passwordDig = passwordDigest(username, password);
	        var saltedPassword = hi(passwordDig
	            , new Buffer(salt, 'base64')
	            , iterations);
	        
	        // Create the client key
	        var hmac = crypto.createHmac('sha1', saltedPassword);
	        hmac.update(new Buffer("Client Key"));
	        var clientKey = hmac.digest();
	
	        // Create the stored key
	        var hash = crypto.createHash('sha1');
	        hash.update(clientKey);
	        var storedKey = hash.digest();
	
	        // Create the authentication message
	        var authMsg = [firstBare, r.payload.value().toString('base64'), withoutProof].join(',');
	
	        // Create client signature
	        var hmac = crypto.createHmac('sha1', storedKey);
	        hmac.update(new Buffer(authMsg));          
	        var clientSig = hmac.digest();
	
	        // Create client proof
	        var clientProof = f("p=%s", new Buffer(xor(clientKey, clientSig)).toString('base64'));
	
	        // Create client final
	        var clientFinal = [withoutProof, clientProof].join(',');
	
	        // Generate server key
	        var hmac = crypto.createHmac('sha1', saltedPassword);
	        hmac.update(new Buffer('Server Key'))
	        var serverKey = hmac.digest();
	
	        // Generate server signature
	        var hmac = crypto.createHmac('sha1', serverKey);
	        hmac.update(new Buffer(authMsg))
	        var serverSig = hmac.digest();
	
	        //
	        // Create continue message
	        var cmd = {
	            saslContinue: 1
	          , conversationId: r.conversationId
	          , payload: new Binary(new Buffer(clientFinal))
	        }
	
	        //
	        // Execute sasl continue
	        db.db(authdb).command(cmd, { connection: connection }, function(err, r) {
	          if(err) return handleEnd(err, r);
	          if(r && r.done == false) {
	            var cmd = {
	                saslContinue: 1
	              , conversationId: r.conversationId
	              , payload: new Buffer(0)
	            }
	
	            db.db(authdb).command(cmd, { connection: connection }, function(err, r) {
	              handleEnd(err, r);
	            });
	          } else {
	            handleEnd(err, r);
	          }
	        });
	      });
	    }
	
	    // Get the connection
	    executeScram(connections.shift());
	  }
	}
	
	var parsePayload = function(payload) {
	  var dict = {};
	  var parts = payload.split(',');
	
	  for(var i = 0; i < parts.length; i++) {
	    var valueParts = parts[i].split('=');
	    dict[valueParts[0]] = valueParts[1];
	  }
	
	  return dict;
	}
	
	var passwordDigest = function(username, password) {
	  if(typeof username != 'string') throw utils.toError("username must be a string");
	  if(typeof password != 'string') throw utils.toError("password must be a string");
	  if(password.length == 0) throw utils.toError("password cannot be empty");
	  // Use node md5 generator
	  var md5 = crypto.createHash('md5');
	  // Generate keys used for authentication
	  md5.update(username + ":mongo:" + password);
	  return md5.digest('hex');
	}
	
	// XOR two buffers
	var xor = function(a, b) {
	  if (!Buffer.isBuffer(a)) a = new Buffer(a)
	  if (!Buffer.isBuffer(b)) b = new Buffer(b)
	  var res = []
	  if (a.length > b.length) {
	    for (var i = 0; i < b.length; i++) {
	      res.push(a[i] ^ b[i])
	    }
	  } else {
	    for (var i = 0; i < a.length; i++) {
	      res.push(a[i] ^ b[i])
	    }
	  }
	  return new Buffer(res);
	}
	
	// Create a final digest
	var hi = function(data, salt, iterations) {
	  // Create digest
	  var digest = function(msg) {
	    var hmac = crypto.createHmac('sha1', data);
	    hmac.update(msg);
	    var result = hmac.digest()
	    return result;
	  }
	
	  // Create variables
	  salt = Buffer.concat([salt, new Buffer('\x00\x00\x00\x01')])
	  var ui = digest(salt);
	  var u1 = ui;
	  
	  for(var i = 0; i < iterations - 1; i++) {
	    u1 = digest(u1);
	    ui = xor(ui, u1);
	  }
	
	  return ui;
	}
	
	exports.authenticate = authenticate;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	var DbCommand = __webpack_require__(175).DbCommand
	  , utils = __webpack_require__(207)
	  , format = __webpack_require__(282).format;
	
	// Kerberos class
	var Kerberos = null;
	var MongoAuthProcess = null;
	// Try to grab the Kerberos class
	try {
	  Kerberos = __webpack_require__(297).Kerberos
	  // Authentication process for Mongo
	  MongoAuthProcess = __webpack_require__(297).processes.MongoAuthProcess
	} catch(err) {}
	
	var authenticate = function(db, username, password, authdb, options, callback) {
	  var numberOfConnections = 0;
	  var errorObject = null;  
	  var numberOfValidConnections = 0;
	  var credentialsValid = false;
	  options = options || {};
	
	  // We don't have the Kerberos library
	  if(Kerberos == null) return callback(new Error("Kerberos library is not installed"));
	
	  if(options['connection'] != null) {
	    //if a connection was explicitly passed on options, then we have only one...
	    numberOfConnections = 1;
	  } else {
	    // Get the amount of connections in the pool to ensure we have authenticated all comments
	    numberOfConnections = db.serverConfig.allRawConnections().length;
	    options['onAll'] = true;
	  }
	
	  // Set the sspi server name
	  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';
	
	  // Grab all the connections
	  var connections = db.serverConfig.allRawConnections();
	  
	  // Authenticate all connections
	  for(var i = 0; i < numberOfConnections; i++) {
	    // Start Auth process for a connection
	    SSIPAuthenticate(db, username, password, authdb, gssapiServiceName, connections[i], function(err, result) {
	      // Adjust number of connections left to connect
	      numberOfConnections = numberOfConnections - 1;
	
	      // Ensure we save any error
	      if(err) { 
	        errorObject = err;
	      } else {
	        credentialsValid = true;
	        numberOfValidConnections = numberOfValidConnections + 1;
	      }
	
	      // Work around the case where the number of connections are 0
	      if(numberOfConnections <= 0 && typeof callback == 'function') {
	        var internalCallback = callback;
	        callback = null;
	
	        if(errorObject == null) {
	          // We authenticated correctly save the credentials
	          db.serverConfig.auth.add('GSSAPI', db.databaseName, username, password, authdb, gssapiServiceName);
	          // Return valid callback
	          return internalCallback(null, true);          
	        } else if(numberOfValidConnections > 0 && numberOfValidConnections != numberOfConnections
	          && credentialsValid) {
	            // We authenticated correctly save the credentials
	            db.serverConfig.auth.add('GSSAPI', db.databaseName, username, password, authdb, gssapiServiceName);
	            // Return valid callback
	            return internalCallback(null, true);                    
	        } else {
	          return internalCallback(errorObject, false);
	        }
	      }
	    });    
	  }
	}
	
	var SSIPAuthenticate = function(db, username, password, authdb, service_name, connection, callback) {
	  // --------------------------------------------------------------
	  // Async Version
	  // --------------------------------------------------------------
	  var command = {
	      saslStart: 1
	    , mechanism: 'GSSAPI'
	    , payload: ''
	    , autoAuthorize: 1
	  };
	
	  // Create authenticator
	  var mongo_auth_process = new MongoAuthProcess(connection.socketOptions.host, connection.socketOptions.port, service_name);
	
	  // Execute first sasl step
	  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {
	    if(err) return callback(err);
	    doc = doc.documents[0];
	
	    mongo_auth_process.init(username, password, function(err) {
	      if(err) return callback(err);
	
	      mongo_auth_process.transition(doc.payload, function(err, payload) {
	        if(err) return callback(err);
	
	        // Perform the next step against mongod
	        var command = {
	            saslContinue: 1
	          , conversationId: doc.conversationId
	          , payload: payload
	        };
	
	        // Execute the command
	        db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {
	          if(err) return callback(err);
	          doc = doc.documents[0];
	
	          mongo_auth_process.transition(doc.payload, function(err, payload) {
	            if(err) return callback(err);
	
	            // Perform the next step against mongod
	            var command = {
	                saslContinue: 1
	              , conversationId: doc.conversationId
	              , payload: payload
	            };
	
	            // Execute the command
	            db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {
	              if(err) return callback(err);
	              doc = doc.documents[0];
	              
	              mongo_auth_process.transition(doc.payload, function(err, payload) {
	                // Perform the next step against mongod
	                var command = {
	                    saslContinue: 1
	                  , conversationId: doc.conversationId
	                  , payload: payload
	                };
	
	                // Execute the command
	                db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {
	                  if(err) return callback(err);
	                  doc = doc.documents[0];
	
	                  if(doc.done) return callback(null, true);
	                  callback(new Error("Authentication failed"), false);
	                });        
	              });
	            });
	          });
	        });
	      });
	    });
	  });  
	}
	
	exports.authenticate = authenticate;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	var DbCommand = __webpack_require__(175).DbCommand
	  , utils = __webpack_require__(207)
	  , Binary = __webpack_require__(150).Binary
	  , format = __webpack_require__(282).format;
	
	var authenticate = function(db, username, password, options, callback, t) {
	  var numberOfConnections = 0;
	  var errorObject = null;
	  var numberOfValidConnections = 0;
	  var credentialsValid = false;
	  options = options || {};
	  
	  if(options['connection'] != null) {
	    //if a connection was explicitly passed on options, then we have only one...
	    numberOfConnections = 1;
	  } else {
	    // Get the amount of connections in the pool to ensure we have authenticated all comments
	    numberOfConnections = db.serverConfig.allRawConnections().length;
	    options['onAll'] = true;
	  }
	
	  // Let's start the sasl process
	  var command = {
	      authenticate: 1
	    , mechanism: 'MONGODB-X509'
	    , user: username
	  };
	
	  // Grab all the connections
	  var connections = options['connection'] != null ? [options['connection']] : db.serverConfig.allRawConnections();
	
	  // Authenticate all connections
	  for(var i = 0; i < numberOfConnections; i++) {
	    var connection = connections[i];
	    // Execute first sasl step
	    db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, result) {
	      // Count down
	      numberOfConnections = numberOfConnections - 1;
	
	      // Ensure we save any error
	      if(err) {
	        errorObject = err;
	      } else if(result.documents[0].err != null || result.documents[0].errmsg != null){
	        errorObject = utils.toError(result.documents[0]);
	      } else {
	        credentialsValid = true;
	        numberOfValidConnections = numberOfValidConnections + 1;        
	      }
	
	      // Work around the case where the number of connections are 0
	      if(numberOfConnections <= 0 && typeof callback == 'function') {
	        var internalCallback = callback;
	        callback = null;
	
	        if(errorObject == null && credentialsValid) {
	          // We authenticated correctly save the credentials
	          db.serverConfig.auth.add('MONGODB-X509', db.databaseName, username, password);
	          // Return callback
	          internalCallback(errorObject, true);          
	        } else {
	          internalCallback(errorObject, false);
	        }
	      }
	    });
	  }
	}
	
	exports.authenticate = authenticate;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(171)
	  , utils = __webpack_require__(207)
	  , AggregationCursor = __webpack_require__(155).AggregationCursor
	  , Code = __webpack_require__(150).Code  
	  , DbCommand = __webpack_require__(175).DbCommand;
	
	/**
	 * Functions that are passed as scope args must
	 * be converted to Code instances.
	 * @ignore
	 */
	function processScope (scope) {
	  if (!utils.isObject(scope)) {
	    return scope;
	  }
	
	  var keys = Object.keys(scope);
	  var i = keys.length;
	  var key;
	  var new_scope = {};
	
	  while (i--) {
	    key = keys[i];
	    if ('function' == typeof scope[key]) {
	      new_scope[key] = new Code(String(scope[key]));
	    } else {
	      new_scope[key] = processScope(scope[key]);
	    }
	  }
	
	  return new_scope;
	}
	
	var pipe = function() {
	  return new AggregationCursor(this, this.serverCapabilities);
	}
	
	var mapReduce = function mapReduce (map, reduce, options, callback) {
	  if ('function' === typeof options) callback = options, options = {};
	  // Out must allways be defined (make sure we don't break weirdly on pre 1.8+ servers)
	  if(null == options.out) {
	    throw new Error("the out option parameter must be defined, see mongodb docs for possible values");
	  }
	
	  if ('function' === typeof map) {
	    map = map.toString();
	  }
	
	  if ('function' === typeof reduce) {
	    reduce = reduce.toString();
	  }
	
	  if ('function' === typeof options.finalize) {
	    options.finalize = options.finalize.toString();
	  }
	
	  var mapCommandHash = {
	      mapreduce: this.collectionName
	    , map: map
	    , reduce: reduce
	  };
	
	  // Add any other options passed in
	  for (var name in options) {
	    if ('scope' == name) {
	      mapCommandHash[name] = processScope(options[name]);
	    } else {
	      mapCommandHash[name] = options[name];
	    }
	  }
	
	  // Set read preference if we set one
	  var readPreference = shared._getReadConcern(this, options);
	
	  // If we have a read preference and inline is not set as output fail hard
	  if((readPreference != false && readPreference != 'primary') 
	    && options['out'] && (options['out'].inline != 1 && options['out'] != 'inline')) {
	      readPreference = 'primary';    
	  }
	
	  // self
	  var self = this;
	  var cmd = DbCommand.createDbCommand(this.db, mapCommandHash);
	
	  this.db._executeQueryCommand(cmd, {readPreference:readPreference}, function (err, result) {
	    if(err) return callback(err);
	    if(!result || !result.documents || result.documents.length == 0)
	      return callback(Error("command failed to return results"), null)
	
	    // Check if we have an error
	    if(1 != result.documents[0].ok || result.documents[0].err || result.documents[0].errmsg) {
	      return callback(utils.toError(result.documents[0]));
	    }
	
	    // Create statistics value
	    var stats = {};
	    if(result.documents[0].timeMillis) stats['processtime'] = result.documents[0].timeMillis;
	    if(result.documents[0].counts) stats['counts'] = result.documents[0].counts;
	    if(result.documents[0].timing) stats['timing'] = result.documents[0].timing;
	
	    // invoked with inline?
	    if(result.documents[0].results) {
	      // If we wish for no verbosity
	      if(options['verbose'] == null || !options['verbose']) {
	        return callback(null, result.documents[0].results);
	      }
	      return callback(null, result.documents[0].results, stats);
	    }
	
	    // The returned collection
	    var collection = null;
	
	    // If we have an object it's a different db
	    if(result.documents[0].result != null && typeof result.documents[0].result == 'object') {
	      var doc = result.documents[0].result;
	      collection = self.db.db(doc.db).collection(doc.collection);
	    } else {
	      // Create a collection object that wraps the result collection
	      collection = self.db.collection(result.documents[0].result)
	    }
	
	    // If we wish for no verbosity
	    if(options['verbose'] == null || !options['verbose']) {
	      return callback(err, collection);
	    }
	
	    // Return stats as third set of values
	    callback(err, collection, stats);
	  });
	};
	
	/**
	 * Group function helper
	 * @ignore
	 */
	var groupFunction = function () {
	  var c = db[ns].find(condition);
	  var map = new Map();
	  var reduce_function = reduce;
	
	  while (c.hasNext()) {
	    var obj = c.next();
	    var key = {};
	
	    for (var i = 0, len = keys.length; i < len; ++i) {
	      var k = keys[i];
	      key[k] = obj[k];
	    }
	
	    var aggObj = map.get(key);
	
	    if (aggObj == null) {
	      var newObj = Object.extend({}, key);
	      aggObj = Object.extend(newObj, initial);
	      map.put(key, aggObj);
	    }
	
	    reduce_function(obj, aggObj);
	  }
	
	  return { "result": map.values() };
	}.toString();
	
	var group = function group(keys, condition, initial, reduce, finalize, command, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 3);
	  callback = args.pop();
	  // Fetch all commands
	  reduce = args.length ? args.shift() : null;
	  finalize = args.length ? args.shift() : null;
	  command = args.length ? args.shift() : null;
	  options = args.length ? args.shift() || {} : {};
	
	  // Make sure we are backward compatible
	  if(!(typeof finalize == 'function')) {
	    command = finalize;
	    finalize = null;
	  }
	
	  if (!Array.isArray(keys) && keys instanceof Object && typeof(keys) !== 'function' && !(keys instanceof Code)) {
	    keys = Object.keys(keys);
	  }
	
	  if(typeof reduce === 'function') {
	    reduce = reduce.toString();
	  }
	
	  if(typeof finalize === 'function') {
	    finalize = finalize.toString();
	  }
	
	  // Set up the command as default
	  command = command == null ? true : command;
	
	  // Execute using the command
	  if(command) {
	    var reduceFunction = reduce instanceof Code
	        ? reduce
	        : new Code(reduce);
	
	    var selector = {
	      group: {
	          'ns': this.collectionName
	        , '$reduce': reduceFunction
	        , 'cond': condition
	        , 'initial': initial
	        , 'out': "inline"
	      }
	    };
	
	    // if finalize is defined
	    if(finalize != null) selector.group['finalize'] = finalize;
	    // Set up group selector
	    if ('function' === typeof keys || keys instanceof Code) {
	      selector.group.$keyf = keys instanceof Code
	        ? keys
	        : new Code(keys);
	    } else {
	      var hash = {};
	      keys.forEach(function (key) {
	        hash[key] = 1;
	      });
	      selector.group.key = hash;
	    }
	
	    // Set read preference if we set one
	    var readPreference = shared._getReadConcern(this, options);
	    // Execute command
	    this.db.command(selector, {readPreference: readPreference}, function(err, result) {
	      if(err) return callback(err, null);
	      callback(null, result.retval);
	    });
	  } else {
	    // Create execution scope
	    var scope = reduce != null && reduce instanceof Code
	      ? reduce.scope
	      : {};
	
	    scope.ns = this.collectionName;
	    scope.keys = keys;
	    scope.condition = condition;
	    scope.initial = initial;
	
	    // Pass in the function text to execute within mongodb.
	    var groupfn = groupFunction.replace(/ reduce;/, reduce.toString() + ';');
	
	    this.db.eval(new Code(groupfn, scope), function (err, results) {
	      if (err) return callback(err, null);
	      callback(null, results.result || results);
	    });
	  }
	};
	
	var aggregate = function(pipeline, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  var self = this;
	
	  // If we have any of the supported options in the options object
	  var opts = args[args.length - 1] || {};
	  options = opts.readPreference 
	    || opts.explain 
	    || opts.cursor 
	    || opts.out
	    || opts.maxTimeMS
	    || opts.allowDiskUse ? args.pop() : {}
	
	  // If the callback is the option (as for cursor override it)
	  if(typeof callback == 'object' && callback != null) options = callback;
	
	  // Convert operations to an array
	  if(!Array.isArray(args[0])) {
	    pipeline = [];
	    // Push all the operations to the pipeline
	    for(var i = 0; i < args.length; i++) pipeline.push(args[i]);
	  }
	
	  // Is the user requesting a cursor
	  if(options.cursor != null && options.out == null) {
	    if(typeof options.cursor != 'object') throw utils.toError('cursor options must be an object');
	    // Set the aggregation cursor options
	    var agg_cursor_options = options.cursor;
	    agg_cursor_options.pipe = pipeline;
	    agg_cursor_options.allowDiskUse = options.allowDiskUse == null ? false : options.allowDiskUse;
	    // Set the maxTimeMS if passed in
	    if(typeof options.maxTimeMS == 'number') agg_cursor_options.maxTimeMS = options.maxTimeMS;
	    // Return the aggregation cursor
	    return new AggregationCursor(this, this.serverCapabilities, agg_cursor_options);
	  }
	
	  // If out was specified
	  if(typeof options.out == 'string') {
	    pipeline.push({$out: options.out});
	  }
	
	  // Build the command
	  var command = { aggregate : this.collectionName, pipeline : pipeline};
	  // If we have allowDiskUse defined
	  if(options.allowDiskUse) command.allowDiskUse = options.allowDiskUse;
	  // Set the maxTimeMS if passed in
	  if(typeof options.maxTimeMS == 'number') command.maxTimeMS = options.maxTimeMS;
	
	  // Ensure we have the right read preference inheritance
	  options.readPreference = shared._getReadConcern(this, options);
	  // If explain has been specified add it
	  if(options.explain) command.explain = options.explain;
	  // Execute the command
	  this.db.command(command, options, function(err, result) {
	    if(err) {
	      callback(err);
	    } else if(result['err'] || result['errmsg']) {
	      callback(utils.toError(result));
	    } else if(typeof result == 'object' && result['serverPipeline']) {
	      callback(null, result['serverPipeline']);
	    } else if(typeof result == 'object' && result['stages']) {
	      callback(null, result['stages']);
	    } else {
	      callback(null, result.result);
	    }
	  });
	}
	
	exports.mapReduce = mapReduce;
	exports.group = group;
	exports.aggregate = aggregate;
	exports.pipe = pipe;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var utils = __webpack_require__(207);
	
	// Error codes
	var UNKNOWN_ERROR = 8;
	var INVALID_BSON_ERROR = 22;
	var WRITE_CONCERN_ERROR = 64;
	var MULTIPLE_ERROR = 65;
	
	// Insert types
	var INSERT = 1;
	var UPDATE = 2;
	var REMOVE = 3
	
	/**
	 * Helper function to define properties
	 */
	var defineReadOnlyProperty = function(self, name, value) {
	  Object.defineProperty(self, name, {
	      enumerable: true
	    , get: function() {
	      return value;
	    }
	  });
	}
	
	/**
	 * Keeps the state of a unordered batch so we can rewrite the results
	 * correctly after command execution
	 */
	var Batch = function(batchType, originalZeroIndex) {  
	  this.originalZeroIndex = originalZeroIndex;
	  this.currentIndex = 0;
	  this.originalIndexes = [];
	  this.batchType = batchType;
	  this.operations = [];
	  this.size = 0;
	  this.sizeBytes = 0;
	}
	
	/**
	 * Wraps a legacy operation so we can correctly rewrite it's error
	 */
	var LegacyOp = function(batchType, operation, index) {
	  this.batchType = batchType;
	  this.index = index;
	  this.operation = operation;
	}
	
	/**
	 * Create a new BatchWriteResult instance (INTERNAL TYPE, do not instantiate directly)
	 *
	 * @class Represents a BatchWriteResult
	 * @property **ok** {boolean} did bulk operation correctly execute
	 * @property **nInserted** {number} number of inserted documents
	 * @property **nUpdated** {number} number of documents updated logically
	 * @property **nUpserted** {number} number of upserted documents
	 * @property **nModified** {number} number of documents updated physically on disk
	 * @property **nRemoved** {number} number of removed documents
	 * @param {Object} batchResult internal data structure with results.
	 * @return {BatchWriteResult} a BatchWriteResult instance
	 */
	var BatchWriteResult = function(bulkResult) {
	  defineReadOnlyProperty(this, "ok", bulkResult.ok);
	  defineReadOnlyProperty(this, "nInserted", bulkResult.nInserted);
	  defineReadOnlyProperty(this, "nUpserted", bulkResult.nUpserted);
	  defineReadOnlyProperty(this, "nMatched", bulkResult.nMatched);
	  defineReadOnlyProperty(this, "nModified", bulkResult.nModified);
	  defineReadOnlyProperty(this, "nRemoved", bulkResult.nRemoved);
	  
	  /**
	   * Return an array of upserted ids
	   *
	   * @return {Array}
	   * @api public
	   */
	  this.getUpsertedIds = function() {
	    return bulkResult.upserted;
	  }
	
	  /**
	   * Return the upserted id at position x
	   *
	   * @param {Number} index the number of the upserted id to return, returns undefined if no result for passed in index
	   * @return {Array}
	   * @api public
	   */
	  this.getUpsertedIdAt = function(index) {
	    return bulkResult.upserted[index]; 
	  }
	
	  /**
	   * Return raw internal result
	   *
	   * @return {Object}
	   * @api public
	   */
	  this.getRawResponse = function() {
	    return bulkResult;
	  }
	
	  /**
	   * Returns true if the bulk operation contains a write error
	   *
	   * @return {Boolean}
	   * @api public
	   */
	  this.hasWriteErrors = function() {
	    return bulkResult.writeErrors.length > 0;
	  }
	
	  /**
	   * Returns the number of write errors off the bulk operation
	   *
	   * @return {Number}
	   * @api public
	   */
	  this.getWriteErrorCount = function() {
	    return bulkResult.writeErrors.length;
	  }
	
	  /**
	   * Returns a specific write error object
	   *
	   * @return {WriteError}
	   * @api public
	   */
	  this.getWriteErrorAt = function(index) {
	    if(index < bulkResult.writeErrors.length) {
	      return bulkResult.writeErrors[index];
	    }
	    return null;
	  }
	
	  /**
	   * Retrieve all write errors
	   *
	   * @return {Array}
	   * @api public
	   */
	  this.getWriteErrors = function() {
	    return bulkResult.writeErrors;
	  }
	
	  /**
	   * Retrieve lastOp if available
	   *
	   * @return {Array}
	   * @api public
	   */
	  this.getLastOp = function() {
	    return bulkResult.lastOp;
	  }
	
	  /**
	   * Retrieve the write concern error if any
	   *
	   * @return {WriteConcernError}
	   * @api public
	   */
	  this.getWriteConcernError = function() {
	    if(bulkResult.writeConcernErrors.length == 0) {
	      return null;
	    } else if(bulkResult.writeConcernErrors.length == 1) {
	      // Return the error
	      return bulkResult.writeConcernErrors[0];
	    } else {
	
	      // Combine the errors
	      var errmsg = "";
	      for(var i = 0; i < bulkResult.writeConcernErrors.length; i++) {
	        var err = bulkResult.writeConcernErrors[i];
	        errmsg = errmsg + err.errmsg;
	        
	        // TODO: Something better
	        if(i == 0) errmsg = errmsg + " and ";
	      }
	
	      return new WriteConcernError({ errmsg : errmsg, code : WRITE_CONCERN_ERROR });
	    }
	  }
	
	  this.toJSON = function() {
	    return bulkResult;
	  }
	
	  this.toString = function() {
	    return "BatchWriteResult(" + this.toJSON(bulkResult) + ")";
	  }
	
	  this.isOk = function() {
	    return bulkResult.ok == 1;
	  }
	}
	
	/**
	 * Wraps a write concern error
	 */
	var WriteConcernError = function(err) {
	  if(!(this instanceof WriteConcernError)) return new WriteConcernError(err);
	
	  // Define properties
	  defineReadOnlyProperty(this, "code", err.code);
	  defineReadOnlyProperty(this, "errmsg", err.errmsg);
	
	  this.toJSON = function() {
	    return {code: err.code, errmsg: err.errmsg};
	  }
	
	  this.toString = function() {
	    return "WriteConcernError(" + err.errmsg + ")";
	  }
	}
	
	/**
	 * Wraps the error
	 */
	var WriteError = function(err) {
	  if(!(this instanceof WriteError)) return new WriteError(err);
	
	  // Define properties
	  defineReadOnlyProperty(this, "code", err.code);
	  defineReadOnlyProperty(this, "index", err.index);
	  defineReadOnlyProperty(this, "errmsg", err.errmsg);
	
	  //
	  // Define access methods
	  this.getOperation = function() {
	    return err.op;
	  }
	
	  this.toJSON = function() {
	    return {code: err.code, index: err.index, errmsg: err.errmsg, op: err.op};
	  }
	
	  this.toString = function() {
	    return "WriteError(" + JSON.stringify(this.toJSON()) + ")";
	  }
	}
	
	/**
	 * Merges results into shared data structure
	 */
	var mergeBatchResults = function(ordered, batch, bulkResult, err, result) {
	  // If we have an error set the result to be the err object
	  if(err) {
	    result = err;
	  }
	
	  // Do we have a top level error stop processing and return
	  if(result.ok == 0 && bulkResult.ok == 1) {
	    bulkResult.ok = 0;
	    bulkResult.error = utils.toError(result);
	    return;
	  } else if(result.ok == 0 && bulkResult.ok == 0) {
	    return;
	  }
	
	  // Add lastop if available
	  if(result.lastOp) {
	    bulkResult.lastOp = result.lastOp;
	  }
	
	  // If we have an insert Batch type
	  if(batch.batchType == INSERT && result.n) {
	    bulkResult.nInserted = bulkResult.nInserted + result.n;
	  }
	
	  // If we have an insert Batch type
	  if(batch.batchType == REMOVE && result.n) {
	    bulkResult.nRemoved = bulkResult.nRemoved + result.n;
	  }
	
	  var nUpserted = 0;
	
	  // We have an array of upserted values, we need to rewrite the indexes
	  if(Array.isArray(result.upserted)) {
	    nUpserted = result.upserted.length;
	
	    for(var i = 0; i < result.upserted.length; i++) {
	      bulkResult.upserted.push({
	          index: result.upserted[i].index + batch.originalZeroIndex
	        , _id: result.upserted[i]._id
	      });
	    }
	  } else if(result.upserted) {
	
	    nUpserted = 1;
	
	    bulkResult.upserted.push({
	        index: batch.originalZeroIndex
	      , _id: result.upserted
	    });
	  }
	
	  // If we have an update Batch type
	  if(batch.batchType == UPDATE && result.n) {
	    var nModified = result.nModified;
	    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;
	    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);
	    
	    if(typeof nModified == 'number') {
	      bulkResult.nModified = bulkResult.nModified + nModified;
	    } else {
	      bulkResult.nModified = null;
	    }
	  }
	
	  if(Array.isArray(result.writeErrors)) {
	    for(var i = 0; i < result.writeErrors.length; i++) {
	
	      var writeError = {
	          index: batch.originalZeroIndex + result.writeErrors[i].index
	        , code: result.writeErrors[i].code
	        , errmsg: result.writeErrors[i].errmsg
	        , op: batch.operations[result.writeErrors[i].index]
	      };
	
	      bulkResult.writeErrors.push(new WriteError(writeError));
	    }
	  }
	
	  if(result.writeConcernError) {
	    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));
	  }
	}
	
	// 
	// Merge a legacy result into the master results
	var mergeLegacyResults = function(_ordered, _op, _batch, _results, _result, _index) {
	  // If we have an error already
	  if(_results.ok == 0) return false;
	  // Handle error
	  if((_result.errmsg || _result.err || _result instanceof Error) && _result.wtimeout != true) {
	    // && ((_result.wtimeout == null && _result.jnote == null && _result.wnote == null)) || _result.err == "norepl") {
	    var code = _result.code || UNKNOWN_ERROR; // Returned error code or unknown code
	    var errmsg = _result.errmsg || _result.err;
	    errmsg = errmsg || _result.message;
	
	    // Result is replication issue, rewrite error to match write command      
	    if(_result.wnote || _result.wtimeout || _result.jnote) {
	      // Set the code to replication error
	      code = WRITE_CONCERN_ERROR;
	      // Ensure we get the right error message
	      errmsg = _result.wnote || errmsg;
	      errmsg = _result.jnote || errmsg;
	    }
	
	    //
	    // We have an error that is a show stopper, 16544 and 13 are auth errors that should stop processing
	    if(_result.wnote 
	      || _result.jnote == "journaling not enabled on this server" 
	      || _result.err == "norepl"
	      || _result.code == 16544 
	      || _result.code == 13) {
	      _results.ok = 0;
	      _results.error = utils.toError({code: code, errmsg: errmsg});
	      return false;
	    }    
	
	    // Create a write error
	    var errResult = new WriteError({
	        index: _index
	      , code: code
	      , errmsg: errmsg
	      , op: _op      
	    });
	    
	    // Err details
	    _results.writeErrors.push(errResult);
	
	    // Check if we any errors
	    if(_ordered == true 
	      && _result.jnote == null 
	      && _result.wnote == null 
	      && _result.wtimeout == null) {
	      return false;
	    }
	  } else if(_batch.batchType == INSERT) {
	    _results.nInserted = _results.nInserted + 1;
	  } else if(_batch.batchType == UPDATE) {
	    // If we have an upserted value or if the user provided a custom _id value
	    if(_result.upserted || (!_result.updatedExisting && _result.upserted == null)) {
	      _results.nUpserted = _results.nUpserted + 1;
	    } else {
	      _results.nMatched = _results.nMatched + _result.n;
	      _results.nModified = null;
	     }
	  } else if(_batch.batchType == REMOVE) {
	    _results.nRemoved = _results.nRemoved + _result;
	  }
	
	  // We have a write concern error, add a write concern error to the results
	  if(_result.wtimeout != null || _result.jnote != null || _result.wnote != null) {
	    var error = _result.err || _result.errmsg || _result.wnote || _result.jnote || _result.wtimeout;
	    var code = _result.code || WRITE_CONCERN_ERROR;
	    // Push a write concern error to the list
	    _results.writeConcernErrors.push(new WriteConcernError({errmsg: error, code: code}));
	  }
	
	  // We have an upserted field (might happen with a write concern error)
	  if(_result.upserted) {
	    _results.upserted.push({
	        index: _index
	      , _id: _result.upserted
	    })
	  } else if(!_result.updatedExisting && _result.upserted == null && _op.q && _op.q._id) {
	    _results.upserted.push({
	        index: _index
	      , _id: _op.q._id
	    })    
	  }
	}
	
	//
	// Clone the options
	var cloneOptions = function(options) {
	  var clone = {};
	  var keys = Object.keys(options);
	  for(var i = 0; i < keys.length; i++) {
	    clone[keys[i]] = options[keys[i]];
	  }
	
	  return clone;
	}
	
	// Exports symbols
	exports.BatchWriteResult = BatchWriteResult;
	exports.WriteError = WriteError;
	exports.Batch = Batch;
	exports.LegacyOp = LegacyOp;
	exports.mergeBatchResults = mergeBatchResults;
	exports.cloneOptions = cloneOptions;
	exports.mergeLegacyResults = mergeLegacyResults;
	exports.INVALID_BSON_ERROR = INVALID_BSON_ERROR;
	exports.WRITE_CONCERN_ERROR = WRITE_CONCERN_ERROR;
	exports.MULTIPLE_ERROR = MULTIPLE_ERROR;
	exports.UNKNOWN_ERROR = UNKNOWN_ERROR;
	exports.INSERT = INSERT;
	exports.UPDATE = UPDATE;
	exports.REMOVE = REMOVE;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(171)
		, common = __webpack_require__(163)
		, utils = __webpack_require__(207)
	  , hasWriteCommands = utils.hasWriteCommands
	  , WriteError = common.WriteError
	  , BatchWriteResult = common.BatchWriteResult
	  , LegacyOp = common.LegacyOp
	  , ObjectID = __webpack_require__(150).ObjectID
	  , Batch = common.Batch
	  , mergeBatchResults = common.mergeBatchResults;
	
	/**
	 * Create a new OrderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *
	 * @class Represents a OrderedBulkOperation
	 * @param {Object} collection collection instance.
	 * @param {Object} [options] additional options for the collection.
	 * @return {Object} a ordered bulk operation instance.
	 */
	function OrderedBulkOperation (collection, options) {
		options = options == null ? {} : options;
		// TODO Bring from driver information in isMaster
		var self = this;
		var executed = false;
		
		// Current item
		var currentOp = null;
	
		// Handle to the bson serializer, used to calculate running sizes
	  var db = collection.db;
		var bson = db.bson;
	
		// Namespace for the operation
	  var namespace = collection.collectionName;  
	
	  // Set max byte size
		var maxWriteBatchSize = db.serverConfig.checkoutWriter().maxWriteBatchSize || 1000;
		var maxBatchSizeBytes = db.serverConfig.checkoutWriter().maxBsonSize;
	
	  // Get the write concern
	  var writeConcern = shared._getWriteConcern(collection, options);
		
	  // Current batch
	  var currentBatch = null;
	  var currentIndex = 0;
	  var currentBatchSize = 0;
	  var currentBatchSizeBytes = 0;
	  var batches = [];
	
	  // Final results
	  var bulkResult = {
	  	  ok: 1
	    , writeErrors: []
	    , writeConcernErrors: []
	    , nInserted: 0
	    , nUpserted: 0
	    , nMatched: 0
	    , nModified: 0
	    , nRemoved: 0
	    , upserted: []
	  };
	
	  // Specify a full class so we can generate documentation correctly
		var FindOperators = function() {
			/**
			 * Add a single update document to the bulk operation
			 *
			 * @param {Object} doc update operations
			 * @return {OrderedBulkOperation}
			 * @api public
			 */
			this.update = function(updateDocument) {
				// Perform upsert
				var upsert = typeof currentOp.upsert == 'boolean' ? currentOp.upsert : false;
				
				// Establish the update command
				var document = {
						q: currentOp.selector
					, u: updateDocument
					, multi: true
					, upsert: upsert
				}
	
				// Clear out current Op
				currentOp = null;
				// Add the update document to the list
				return addToOperationsList(self, common.UPDATE, document);
			}	
	
			/**
			 * Add a single update one document to the bulk operation
			 *
			 * @param {Object} doc update operations
			 * @return {OrderedBulkOperation}
			 * @api public
			 */
			this.updateOne = function(updateDocument) {
				// Perform upsert
				var upsert = typeof currentOp.upsert == 'boolean' ? currentOp.upsert : false;
				
				// Establish the update command
				var document = {
						q: currentOp.selector
					, u: updateDocument
					, multi: false
					, upsert: upsert
				}
	
				// Clear out current Op
				currentOp = null;
				// Add the update document to the list
				return addToOperationsList(self, common.UPDATE, document);
			}
	
			/**
			 * Add a replace one operation to the bulk operation
			 *
			 * @param {Object} doc the new document to replace the existing one with
			 * @return {OrderedBulkOperation}
			 * @api public
			 */
			this.replaceOne = function(updateDocument) {
				this.updateOne(updateDocument);
			}
	
			/**
			 * Upsert modifier for update bulk operation
			 *
			 * @return {OrderedBulkOperation}
			 * @api public
			 */
			this.upsert = function() {
				currentOp.upsert = true;
				return this;
			}
	
			/**
			 * Add a remove one operation to the bulk operation
			 *
			 * @param {Object} doc selector for the removal of documents
			 * @return {OrderedBulkOperation}
			 * @api public
			 */
			this.removeOne = function() {		
				// Establish the update command
				var document = {
						q: currentOp.selector
					, limit: 1
				}
	
				// Clear out current Op
				currentOp = null;
				// Add the remove document to the list
				return addToOperationsList(self, common.REMOVE, document);
			}
	
			/**
			 * Add a remove operation to the bulk operation
			 *
			 * @param {Object} doc selector for the single document to remove
			 * @return {OrderedBulkOperation}
			 * @api public
			 */
			this.remove = function() {
				// Establish the update command
				var document = {
						q: currentOp.selector
					, limit: 0
				}
	
				// Clear out current Op
				currentOp = null;
				// Add the remove document to the list
				return addToOperationsList(self, common.REMOVE, document);				
			}
		}
	
		/**
		 * Add a single insert document to the bulk operation
		 *
		 * @param {Object} doc the document to insert
		 * @return {OrderedBulkOperation}
		 * @api public
		 */
		this.insert = function(document) {
			if(document._id == null) document._id = new ObjectID();
			return addToOperationsList(self, common.INSERT, document);
		}
	
		var getOrderedCommand = function(_self, _namespace, _docType, _operationDocuments) {
			// Set up the types of operation
			if(_docType == common.INSERT) {
				return {
						insert: _namespace
					, documents: _operationDocuments
					, ordered:true 
				}
			} else if(_docType == common.UPDATE) {
				return {
						update: _namespace
					, updates: _operationDocuments
					, ordered:true
				};
			} else if(_docType == common.REMOVE) {
				return {
						delete: _namespace
					, deletes: _operationDocuments
					, ordered:true
				};
			}		
		}
	
		// Add to internal list of documents
		var addToOperationsList = function(_self, docType, document) {
	    // Get the bsonSize
	    var bsonSize = bson.calculateObjectSize(document, false);
	    // Throw error if the doc is bigger than the max BSON size
	    if(bsonSize >= maxBatchSizeBytes) throw utils.toError("document is larger than the maximum size " + maxBatchSizeBytes);
	    // Create a new batch object if we don't have a current one
	    if(currentBatch == null) currentBatch = new Batch(docType, currentIndex);
	    
	    // Check if we need to create a new batch
	    if(((currentBatchSize + 1) >= maxWriteBatchSize)
	      || ((currentBatchSizeBytes +  currentBatchSizeBytes) >= maxBatchSizeBytes)
	      || (currentBatch.batchType != docType)) {
	      // Save the batch to the execution stack
	      batches.push(currentBatch);
	      
	      // Create a new batch
	      currentBatch = new Batch(docType, currentIndex);
	      
	      // Reset the current size trackers
	      currentBatchSize = 0;
	      currentBatchSizeBytes = 0;
	    } else {
		    // Update current batch size
		    currentBatchSize = currentBatchSize + 1;
		    currentBatchSizeBytes = currentBatchSizeBytes + bsonSize;
	    }
	
	    // We have an array of documents
	    if(Array.isArray(document)) {
				throw utils.toError("operation passed in cannot be an Array");
	    } else {
	    	currentBatch.originalIndexes.push(currentIndex);
	      currentBatch.operations.push(document)
	      currentIndex = currentIndex + 1;
	    }
	
	    // Return self
			return _self;
		}
	
		/**
		 * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne
		 *
		 * @param {Object} doc
		 * @return {OrderedBulkOperation}
		 * @api public
		 */
		this.find = function(selector) {
			if (!selector) {
				throw utils.toError("Bulk find operation must specify a selector");
			}
	
			// Save a current selector
			currentOp = {
				selector: selector
			}
	
			return new FindOperators();
		}
	
		//
		// Execute next write command in a chain
		var executeCommands = function(callback) {
			if(batches.length == 0) {
				return callback(null, new BatchWriteResult(bulkResult));
			}
	
			// Ordered execution of the command
			var batch = batches.shift();
			
			// Build the command
			var cmd = null;
	
	    // Generate the right update
	    if(batch.batchType == common.UPDATE) {
	      cmd = { update: namespace, updates: batch.operations, ordered: true }
	    } else if(batch.batchType == common.INSERT) {
	      cmd = { insert: namespace, documents: batch.operations, ordered: true }
	    } else if(batch.batchType == common.REMOVE) {
	      cmd = { delete: namespace, deletes: batch.operations, ordered: true }
	    }
	
	    // If we have a write concern
	    if(writeConcern != null) {
	      cmd.writeConcern = writeConcern;
	    }    
	
			// Execute it
			db.command(cmd, function(err, result) {	
				// Merge the results together
				var mergeResult = mergeBatchResults(true, batch, bulkResult, err, result);
				if(mergeResult != null) {
					return callback(null, new BatchWriteResult(bulkResult));
				}
	
				// If we had a serious error
				if(bulkResult.ok == 0) {
					return callback(bulkResult.error, null);
				}
	
	      // If we are ordered and have errors and they are 
	      // not all replication errors terminate the operation          
	      if(bulkResult.writeErrors.length > 0) {
	        return callback(null, new BatchWriteResult(bulkResult));
	      }
	
				// Execute the next command in line
				executeCommands(callback);
			});
		}
	
		// 
		// Execute the inserts
		var executeInserts = function(_collection, _batch, _result, _callback) {
			if(_batch.operations.length == 0) {
				return _callback(null, _result);
			}
	
			// Get the first update
			var document = _batch.operations.shift();
			var index = _batch.originalIndexes.shift();
			
			// Options for the update operation
			var options = writeConcern || {};
	
			// Execute the update
			_collection.insert(document, options, function(err, r) {
				// If we have don't have w:0 merge the result
				if(options.w == null || options.w != 0) {
					// Merge the results in 
					var result = common.mergeLegacyResults(true, document, _batch, bulkResult, err || r, index);
	
					if(result == false) {
						return _callback(null, new BatchWriteResult(bulkResult));
					}				
				}
	
				// Update the index
				_batch.currentIndex = _batch.currentIndex + 1;
	
				// Execute the next insert		
				executeInserts(_collection, _batch, _result, _callback);
			});
		}
	
		//
		// Execute updates
		var executeUpdates = function(_collection, _batch, _result, _callback) {
			if(_batch.operations.length == 0) {
				return _callback(null, _result);
			}
	
			// Get the first update
			var update = _batch.operations.shift();
			var index = _batch.originalIndexes.shift();
			
			// Options for the update operation
			var options = writeConcern != null ? common.cloneOptions(writeConcern) : {};
			
			// Add any additional options
			if(update.multi) options.multi = update.multi;
			if(update.upsert) options.upsert = update.upsert;
	
			// Execute the update
			_collection.update(update.q, update.u, options, function(err, r, full) {
				// If we have don't have w:0 merge the result
				if(options.w == null || options.w != 0) {
					// Merge the results in 
					var result = common.mergeLegacyResults(true, update, _batch, bulkResult, err || full, index);
					if(result == false) {
						return _callback(null, new BatchWriteResult(bulkResult));
					}
				}
	
				// Update the index
				_batch.currentIndex = _batch.currentIndex + 1;
	
				// Execute the next insert		
				executeUpdates(_collection, _batch, _result, _callback);
			});
		}
	
		//
		// Execute updates
		var executeRemoves = function(_collection, _batch, _result, _callback) {
			if(_batch.operations.length == 0) {
				return _callback(null, _result);
			}
	
			// Get the first update
			var remove = _batch.operations.shift();
			var index = _batch.originalIndexes.shift();
			
			// Options for the update operation
			var options = writeConcern != null ? common.cloneOptions(writeConcern) : {};
			
			// Add any additional options
			options.single = remove.limit == 1 ? true : false;
	
			// Execute the update
			_collection.remove(remove.q, options, function(err, r) {
				// If we have don't have w:0 merge the result
				if(options.w == null || options.w != 0) {
					// Merge the results in 
					var result = common.mergeLegacyResults(true, remove, _batch, bulkResult, err || r, index);
					if(result == false) {
						return _callback(null, new BatchWriteResult(bulkResult));
					}
				}
				
				// Update the index
				_batch.currentIndex = _batch.currentIndex + 1;
	
				// Execute the next insert		
				executeRemoves(_collection, _batch, _result, _callback);
			});
		}
	
		//
		// Execute all operation in backwards compatible fashion
		var backwardsCompatibilityExecuteCommands = function(callback) {
			if(batches.length == 0) {
				return callback(null, new BatchWriteResult(bulkResult));
			}
	
			// Ordered execution of the command
			var batch = batches.shift();
	
			// Process the legacy operations
			var processLegacyOperations = function(err, results) {
				// If we have any errors stop executing
	      if(bulkResult.writeErrors.length > 0) {
					return callback(null, new BatchWriteResult(bulkResult));
				}
	
				// If we have a top level error stop
				if(bulkResult.ok == 0) {
					return callback(bulkResult.error, null);
				}
	
				// Execute the next step
				backwardsCompatibilityExecuteCommands(callback);			
			}
	
			// Execute an insert batch
			if(batch.batchType == common.INSERT) {
				return executeInserts(collection, batch, {n: 0}, processLegacyOperations);
			}
	
			// Execute an update batch
			if(batch.batchType == common.UPDATE) {
				return executeUpdates(collection, batch, {n: 0}, processLegacyOperations);
			}
	
			// Execute an update batch
			if(batch.batchType == common.REMOVE) {
				return executeRemoves(collection, batch, {n: 0}, processLegacyOperations);
			}
		}
	
		/**
		 * Execute the ordered bulk operation
		 *
		 * Options
		 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
		 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
		 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
		 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
		 *
		 * @param {Object} [options] additional options during update.
		 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from from the ordered bulk operation.
		 * @return {null}
		 * @api public
		 */
		this.execute = function(_writeConcern, callback) {
			if(executed) throw new utils.toError("batch cannot be re-executed");
			if(typeof _writeConcern == 'function') {
				callback = _writeConcern;
			} else {
				writeConcern = _writeConcern;
			}
	
	    // If we have current batch
	    if(currentBatch) batches.push(currentBatch);
	
			// If we have no operations in the bulk raise an error
			if(batches.length == 0) {
				throw utils.toError("Invalid Operation, No operations in bulk");
			}
	
			// Check if we support bulk commands, override if needed to use legacy ops
			if(hasWriteCommands(db.serverConfig.checkoutWriter()))
				return executeCommands(callback);
	
			// Set nModified to null as we don't support this field
			bulkResult.nModified = null;
	
			// Run in backward compatibility mode
			backwardsCompatibilityExecuteCommands(callback);
		}
	}
	
	/**
	 * Returns an unordered batch object
	 *
	 */
	var initializeOrderedBulkOp = function(options) {
		return new OrderedBulkOperation(this, options);
	}
	
	exports.initializeOrderedBulkOp = initializeOrderedBulkOp;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(171)
		, common = __webpack_require__(163)
		, utils = __webpack_require__(207)
	  , hasWriteCommands = utils.hasWriteCommands
	  , WriteError = common.WriteError
	  , BatchWriteResult = common.BatchWriteResult
	  , LegacyOp = common.LegacyOp
	  , ObjectID = __webpack_require__(150).ObjectID
	  , Batch = common.Batch
	  , mergeBatchResults = common.mergeBatchResults;
	
	/**
	 * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *
	 * @class Represents a UnorderedBulkOperation
	 * @param {Object} collection collection instance.
	 * @param {Object} [options] additional options for the collection.
	 * @return {Object} a ordered bulk operation instance.
	 */
	var UnorderedBulkOperation = function(collection, options) {
		options = options == null ? {} : options;
	
		// Contains reference to self
		var self = this;
		// Get the namesspace for the write operations
	  var namespace = collection.collectionName;
	  // Used to mark operation as executed
	  var executed = false;
	
		// Current item
		var currentOp = null;
		var currentIndex = 0;
	  var batches = [];
	
	  // The current Batches for the different operations
	  var currentInsertBatch = null;
	  var currentUpdateBatch = null;
	  var currentRemoveBatch = null;
	
		// Handle to the bson serializer, used to calculate running sizes
	  var db = collection.db;
		var bson = db.bson;
	
	  // Set max byte size
		var maxBatchSizeBytes = db.serverConfig.checkoutWriter().maxBsonSize;
		var maxWriteBatchSize = db.serverConfig.checkoutWriter().maxWriteBatchSize || 1000;
	
	  // Get the write concern
	  var writeConcern = shared._getWriteConcern(collection, options);
	
	  // Final results
	  var bulkResult = {
	  	  ok: 1
	    , writeErrors: []
	    , writeConcernErrors: []
	    , nInserted: 0
	    , nUpserted: 0
	    , nMatched: 0
	    , nModified: 0
	    , nRemoved: 0
	    , upserted: []
	  };
	
	  // Specify a full class so we can generate documentation correctly
		var FindOperators = function() {
			/**
			 * Add a single update document to the bulk operation
			 *
			 * @param {Object} doc update operations
			 * @return {UnorderedBulkOperation}
			 * @api public
			 */
			this.update = function(updateDocument) {
				// Perform upsert
				var upsert = typeof currentOp.upsert == 'boolean' ? currentOp.upsert : false;
				
				// Establish the update command
				var document = {
						q: currentOp.selector
					, u: updateDocument
					, multi: true
					, upsert: upsert
				}
	
				// Clear out current Op
				currentOp = null;
				// Add the update document to the list
				return addToOperationsList(self, common.UPDATE, document);
			}	
	
			/**
			 * Add a single update one document to the bulk operation
			 *
			 * @param {Object} doc update operations
			 * @return {UnorderedBulkOperation}
			 * @api public
			 */
			this.updateOne = function(updateDocument) {
				// Perform upsert
				var upsert = typeof currentOp.upsert == 'boolean' ? currentOp.upsert : false;
				
				// Establish the update command
				var document = {
						q: currentOp.selector
					, u: updateDocument
					, multi: false
					, upsert: upsert
				}
	
				// Clear out current Op
				currentOp = null;
				// Add the update document to the list
				return addToOperationsList(self, common.UPDATE, document);
			}
	
			/**
			 * Add a replace one operation to the bulk operation
			 *
			 * @param {Object} doc the new document to replace the existing one with
			 * @return {UnorderedBulkOperation}
			 * @api public
			 */
			this.replaceOne = function(updateDocument) {
				this.updateOne(updateDocument);
			}
	
			/**
			 * Upsert modifier for update bulk operation
			 *
			 * @return {UnorderedBulkOperation}
			 * @api public
			 */
			this.upsert = function() {
				currentOp.upsert = true;
				return this;
			}
	
			/**
			 * Add a remove one operation to the bulk operation
			 *
			 * @param {Object} doc selector for the removal of documents
			 * @return {UnorderedBulkOperation}
			 * @api public
			 */
			this.removeOne = function() {		
				// Establish the update command
				var document = {
						q: currentOp.selector
					, limit: 1
				}
	
				// Clear out current Op
				currentOp = null;
				// Add the remove document to the list
				return addToOperationsList(self, common.REMOVE, document);
			}
	
			/**
			 * Add a remove operation to the bulk operation
			 *
			 * @param {Object} doc selector for the single document to remove
			 * @return {UnorderedBulkOperation}
			 * @api public
			 */
			this.remove = function() {
				// Establish the update command
				var document = {
						q: currentOp.selector
					, limit: 0
				}
	
				// Clear out current Op
				currentOp = null;
				// Add the remove document to the list
				return addToOperationsList(self, common.REMOVE, document);				
			}
		}
	
		// 
		// Add to the operations list
		//
		var addToOperationsList = function(_self, docType, document) {
	    // Get the bsonSize
	    var bsonSize = bson.calculateObjectSize(document, false);
	    // Throw error if the doc is bigger than the max BSON size
	    if(bsonSize >= maxBatchSizeBytes) throw utils.toError("document is larger than the maximum size " + maxBatchSizeBytes);
	    // Holds the current batch
	    var currentBatch = null;
	    // Get the right type of batch
	    if(docType == common.INSERT) {
	    	currentBatch = currentInsertBatch;
	    } else if(docType == common.UPDATE) {
	    	currentBatch = currentUpdateBatch;
	    } else if(docType == common.REMOVE) {
	    	currentBatch = currentRemoveBatch;
	    }
	
	    // Create a new batch object if we don't have a current one
	    if(currentBatch == null) currentBatch = new Batch(docType, currentIndex);
	    
	    // Check if we need to create a new batch
	    if(((currentBatch.size + 1) >= maxWriteBatchSize)
	      || ((currentBatch.sizeBytes +  bsonSize) >= maxBatchSizeBytes)
	      || (currentBatch.batchType != docType)) {
	      // Save the batch to the execution stack
	      batches.push(currentBatch);
	      
	      // Create a new batch
	      currentBatch = new Batch(docType, currentIndex);
	    }
	
	    // We have an array of documents
	    if(Array.isArray(document)) {
	    	throw utils.toError("operation passed in cannot be an Array");
	    } else {
	      currentBatch.operations.push(document);
	      currentBatch.originalIndexes.push(currentIndex);
	      currentIndex = currentIndex + 1;
	    }
	
	    // Save back the current Batch to the right type
	    if(docType == common.INSERT) {
	    	currentInsertBatch = currentBatch;
	    } else if(docType == common.UPDATE) {
	    	currentUpdateBatch = currentBatch;
	    } else if(docType == common.REMOVE) {
	    	currentRemoveBatch = currentBatch;
	    }
	
	    // Update current batch size
	    currentBatch.size = currentBatch.size + 1;
	    currentBatch.sizeBytes = currentBatch.sizeBytes + bsonSize;
	
	    // Return self
			return _self;
		}
	
		/**
		 * Add a single insert document to the bulk operation
		 *
		 * @param {Object} doc the document to insert
		 * @return {UnorderedBulkOperation}
		 * @api public
		 */
		this.insert = function(document) {
	    if(document._id == null) document._id = new ObjectID();
			return addToOperationsList(self, common.INSERT, document);
		}
	
		/**
		 * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne
		 *
		 * @param {Object} selector the selector used to locate documents for the operation
		 * @return {UnorderedBulkOperation}
		 * @api public
		 */
		this.find = function(selector) {
			if (!selector) {
				throw utils.toError("Bulk find operation must specify a selector");
			}
	
			// Save a current selector
			currentOp = {
				selector: selector
			}
	
			return new FindOperators();
		}	
	
		//
		// Execute the command
		var executeBatch = function(batch, callback) {
			// Contains the command we are going to execute
			var cmd = null;
	
	    // Generate the right update
	    if(batch.batchType == common.UPDATE) {
	      cmd = { update: namespace, updates: batch.operations, ordered: false }
	    } else if(batch.batchType == common.INSERT) {
	      cmd = { insert: namespace, documents: batch.operations, ordered: false }
	    } else if(batch.batchType == common.REMOVE) {
	      cmd = { delete: namespace, deletes: batch.operations, ordered: false }
	    }
	
	    // If we have a write concern
	    if(writeConcern != null) {
	      cmd.writeConcern = writeConcern;
	    }    
	
			// Execute the write command
			db.command(cmd, function(err, result) {
				callback(null, mergeBatchResults(false, batch, bulkResult, err, result));
			});
		}
	
		//
		// Execute all the commands
		var executeBatches = function(callback) {
			var numberOfCommandsToExecute = batches.length;
			// Execute over all the batches
			for(var i = 0; i < batches.length; i++) {
				executeBatch(batches[i], function(err, result) {
					numberOfCommandsToExecute = numberOfCommandsToExecute - 1;
	
					// Execute
					if(numberOfCommandsToExecute == 0) {
						// If we have an error stop
						if(bulkResult.ok == 0 && callback) {
							return callback(bulkResult.error, null);
						}
	
						callback(null, new BatchWriteResult(bulkResult));
					}
				});
			}
		}
	
		/**
		 * Execute the unordered bulk operation
		 *
		 * Options
		 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
		 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
		 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
		 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
		 *
		 * @param {Object} [options] additional options during update.
		 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from from the unordered bulk operation.
		 * @return {null}
		 * @api public
		 */
		this.execute = function(_writeConcern, callback) {
			if(executed) throw utils.toError("batch cannot be re-executed");
			if(typeof _writeConcern == 'function') {
				callback = _writeConcern;
			} else {
				writeConcern = _writeConcern;
			}
	
	    // If we have current batch
	    if(currentInsertBatch) batches.push(currentInsertBatch);
	    if(currentUpdateBatch) batches.push(currentUpdateBatch);
	    if(currentRemoveBatch) batches.push(currentRemoveBatch);
	
			// If we have no operations in the bulk raise an error
			if(batches.length == 0) {
				throw utils.toError("Invalid Operation, No operations in bulk");
			}
	
			// Check if we support bulk commands
			if(hasWriteCommands(db.serverConfig.checkoutWriter()))
				return executeBatches(function(err, result) {
					callback(err, result);
				});
	
			// Set nModified to null as we don't support this field
			bulkResult.nModified = null;
	
			// Run in backward compatibility mode
			backwardsCompatibilityExecuteCommands(function(err, result) {
				callback(err, result);
			});
		}	
	
		// 
		// Execute the inserts
		var executeInserts = function(_collection, _batch, _result, _callback) {
			var totalNumberOfInserts = _batch.operations.length;
	
			// Options for the update operation
			var batchOptions = writeConcern || {};
	
			// Execute the op
			var executeLegacyInsert = function(_i, _op, _options, __callback) {
				// Execute the update
				_collection.insert(_op.operation, _options, function(err, r) {
					// If we have don't have w:0 merge the result
					if(_options.w == null || _options.w != 0) {
						// Merge the results in 
						var result = common.mergeLegacyResults(false, _op.operation, _batch, bulkResult, err || r, _op.index);
						if(result == false) {
							return _callback(null, new BatchWriteResult(bulkResult));
						}
					}
	
					__callback(null, _result);
				});
			}
	
			// Execute all the insert operations
			for(var i = 0; i < _batch.operations.length; i++) {
				var legacyOp = new LegacyOp(_batch.batchType, _batch.operations[i], _batch.originalIndexes[i]);
				executeLegacyInsert(i, legacyOp, batchOptions, function(err, result) {
					totalNumberOfInserts = totalNumberOfInserts - 1;
					
					// No more inserts
					if(totalNumberOfInserts == 0) {
						_callback(null, _result);
					}
				});
			}
		}
	
		//
		// Execute updates
		var executeUpdates = function(_collection, _batch, _result, _callback) {
			var totalNumberOfUpdates = _batch.operations.length;
			// Options for the update operation
			var batchOptions = writeConcern || {};
	
			// Execute the op
			var executeLegacyUpdate = function(_i, _op, _options, __callback) {
				var options = common.cloneOptions(batchOptions);
	
				// Add any additional options
				if(_op.operation.multi != null) options.multi = _op.operation.multi ? true : false;
				if(_op.operation.upsert != null) options.upsert = _op.operation.upsert;
	
				// Execute the update
				_collection.update(_op.operation.q, _op.operation.u, options, function(err, r, full) {
					// If we have don't have w:0 merge the result
					if(options.w == null || options.w != 0) {
						// Merge the results in 
						var result = common.mergeLegacyResults(false, _op.operation, _batch, bulkResult, err || full, _op.index);
						if(result == false) {
							return _callback(null, new BatchWriteResult(bulkResult));
						}
					}
	
					return __callback(null, _result);
				});
			}
	
			// Execute all the insert operations
			for(var i = 0; i < _batch.operations.length; i++) {
				var legacyOp = new LegacyOp(_batch.batchType, _batch.operations[i], _batch.originalIndexes[i]);
				executeLegacyUpdate(i, legacyOp, options, function(err, result) {
					totalNumberOfUpdates = totalNumberOfUpdates - 1;
					
					// No more inserts
					if(totalNumberOfUpdates == 0) {
						_callback(null, _result);
					}
				});
			}
		}
	
		//
		// Execute updates
		var executeRemoves = function(_collection, _batch, _result, _callback) {
			var totalNumberOfRemoves = _batch.operations.length;
			// Options for the update operation
			var batchOptions = writeConcern || {};
	
			// Execute the op
			var executeLegacyRemove = function(_i, _op, _options, __callback) {
				var options = common.cloneOptions(batchOptions);
	
				// Add any additional options
				if(_op.operation.limit != null) options.single = _op.operation.limit == 1 ? true : false;
	
				// Execute the update
				_collection.remove(_op.operation.q, options, function(err, r) {
					// If we have don't have w:0 merge the result
					if(options.w == null || options.w != 0) {
						// Merge the results in 
						var result = common.mergeLegacyResults(false, _op.operation, _batch, bulkResult, err || r, _op.index);
						if(result == false) {
							return _callback(null, new BatchWriteResult(bulkResult));
						}
					}
	
					return __callback(null, _result);
				});
			}
	
			// Execute all the insert operations
			for(var i = 0; i < _batch.operations.length; i++) {
				var legacyOp = new LegacyOp(_batch.batchType, _batch.operations[i], _batch.originalIndexes[i]);
				executeLegacyRemove(i, legacyOp, options, function(err, result) {
					totalNumberOfRemoves = totalNumberOfRemoves - 1;
					
					// No more inserts
					if(totalNumberOfRemoves == 0) {
						_callback(null, _result);
					}
				});
			}
		}
	
		//
		// Execute all operation in backwards compatible fashion
		var backwardsCompatibilityExecuteCommands = function(callback) {
			if(batches.length == 0) {
				return callback(null, new BatchWriteResult(bulkResult));
			}
	
			// Ordered execution of the command
			var batch = batches.shift();
	
			// Process the legacy operations
			var processLegacyOperations = function(err, results) {
				// Merge the results together
				var mergeResult = mergeBatchResults(false, batch, bulkResult, err, results);
				if(mergeResult != null) {
					return callback(null, mergeResult)
				}
	
				// If we have an error stop
				if(bulkResult.ok == 0 && callback) {
					var internalCallback = callback;
					callback = null;
					return internalCallback(bulkResult.error, null);
				} else if(bulkResult.ok == 0 && callback == null) {
					return;
				}
	
				// Execute the next step
				backwardsCompatibilityExecuteCommands(callback);			
			}
	
			// Execute an insert batch
			if(batch.batchType == common.INSERT) {
				return executeInserts(collection, batch, {n: 0}, processLegacyOperations);
			}
	
			// Execute an update batch
			if(batch.batchType == common.UPDATE) {
				return executeUpdates(collection, batch, {n: 0}, processLegacyOperations);
			}
	
			// Execute an update batch
			if(batch.batchType == common.REMOVE) {
				return executeRemoves(collection, batch, {n: 0}, processLegacyOperations);
			}
		}	
	}
	
	/**
	 * Returns an unordered batch object
	 *
	 */
	var initializeUnorderedBulkOp = function(options) {
		return new UnorderedBulkOperation(this, options);
	}
	
	exports.initializeUnorderedBulkOp = initializeUnorderedBulkOp;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(171)
	  , utils = __webpack_require__(207)
	  , f = __webpack_require__(282).format
	  , DbCommand = __webpack_require__(175).DbCommand;
	
	var stats = function stats(options, callback) {
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  // Fetch all commands
	  options = args.length ? args.shift() || {} : {};
	
	  // Build command object
	  var commandObject = {
	    collStats:this.collectionName,
	  }
	
	  // Check if we have the scale value
	  if(options['scale'] != null) commandObject['scale'] = options['scale'];
	
	  // Ensure we have the right read preference inheritance
	  options.readPreference = shared._getReadConcern(this, options);
	
	  // Execute the command
	  this.db.command(commandObject, options, callback);
	}
	
	var count = function count(query, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  query = args.length ? args.shift() || {} : {};
	  options = args.length ? args.shift() || {} : {};
	  var skip = options.skip;
	  var limit = options.limit;
	  var hint = options.hint;
	  var maxTimeMS = options.maxTimeMS;
	
	  // Final query
	  var cmd = {
	      'count': this.collectionName
	    , 'query': query
	    , 'fields': null
	  };
	
	  // Add limit and skip if defined
	  if(typeof skip == 'number') cmd.skip = skip;
	  if(typeof limit == 'number') cmd.limit = limit;
	  if(hint) cmd.hint = hint;
	
	  // Ensure we have the right read preference inheritance
	  options.readPreference = shared._getReadConcern(this, options);
	
	  // Execute the command
	  this.db.command(cmd, options, function(err, result) {
	    if(err) return callback(err);
	    callback(null, result.n);
	  });
	};
	
	var distinct = function distinct(key, query, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  query = args.length ? args.shift() || {} : {};
	  options = args.length ? args.shift() || {} : {};
	  var maxTimeMS = options.maxTimeMS;
	
	  var cmd = {
	      'distinct': this.collectionName
	    , 'key': key
	    , 'query': query
	  };
	
	  // Ensure we have the right read preference inheritance
	  options.readPreference = shared._getReadConcern(this, options);
	
	  // Execute the command
	  this.db.command(cmd, options, function(err, result) {
	    if(err) return callback(err);
	    callback(null, result.values);
	  });
	};
	
	var rename = function rename (newName, options, callback) {
	  var self = this;
	  if(typeof options == 'function') {
	    callback = options;
	    options = {}
	  }
	
	  // Get collection class
	  var Collection = __webpack_require__(172).Collection;
	  // Ensure the new name is valid
	  shared.checkCollectionName(newName);
	  
	  // Build the command
	  var renameCollection = self.db.databaseName + "." + self.collectionName;
	  var toCollection = self.db.databaseName + "." + newName;
	  var dropTarget = typeof options.dropTarget == 'boolean' ? options.dropTarget : false;
	  var cmd = {'renameCollection':renameCollection, 'to':toCollection, 'dropTarget':dropTarget};
	
	  // Execute against admin
	  self.db.admin().command(cmd, options, function(err, result) {
	    if(err) return callback(err, null);
	    var doc = result.documents[0];
	    // We have an error
	    if(doc.errmsg) return callback(utils.toError(doc), null);
	    try {
	      return callback(null, new Collection(self.db, newName, self.db.pkFactory));
	    } catch(err) {
	      return callback(utils.toError(err), null);
	    }
	  });
	};
	
	var options = function options(callback) {
	  var self = this;
	
	  self.db.listCollections({name: self.collectionName}).toArray(function(err, collections) {
	    if(err) return callback(err);
	    if(collections.length == 0) return callback(utils.toError(f("collection %s.%s not found", self.db.databaseName, self.collectionName)));
	    callback(err, collections[0].options || null);      
	  });
	};
	
	var isCapped = function isCapped(callback) {
	  this.options(function(err, document) {
	    if(err != null) {
	      callback(err);
	    } else {
	      callback(null, document && document.capped);
	    }
	  });
	};
	
	exports.stats = stats;
	exports.count = count;
	exports.distinct = distinct;
	exports.rename = rename;
	exports.options = options;
	exports.isCapped = isCapped;

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var InsertCommand = __webpack_require__(178).InsertCommand
	  , DeleteCommand = __webpack_require__(176).DeleteCommand
	  , UpdateCommand = __webpack_require__(181).UpdateCommand
	  , DbCommand = __webpack_require__(175).DbCommand
	  , utils = __webpack_require__(207)
	  , hasWriteCommands = __webpack_require__(207).hasWriteCommands
	  , shared = __webpack_require__(171);
	
	/**
	 * Precompiled regexes
	 * @ignore
	 **/
	var eErrorMessages = /No matching object found/;
	
	// ***************************************************
	// Insert function
	// ***************************************************
	var insert = function insert (docs, options, callback) {
	  if ('function' === typeof options) callback = options, options = {};
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;
	
	  // Get a connection
	  var connection = this.db.serverConfig.checkoutWriter();
	  if(connection instanceof Error && connection.code == -5000) return callback(connection);
	  var useLegacyOps = options.useLegacyOps == null || options.useLegacyOps == false ? false : true;
	  // If we support write commands let's perform the insert using it  
	  if(!useLegacyOps && hasWriteCommands(connection) 
	    && !Buffer.isBuffer(docs) 
	    && !(Array.isArray(docs) && docs.length > 0 && Buffer.isBuffer(docs[0]))) {
	      insertWithWriteCommands(this, Array.isArray(docs) ? docs : [docs], options, callback);
	      return this
	  } 
	
	  // Backwards compatibility
	  insertAll(this, Array.isArray(docs) ? docs : [docs], options, callback);
	  return this;
	};
	
	//
	// Uses the new write commands available from 2.6 >
	//
	var insertWithWriteCommands = function(self, docs, options, callback) {
	  // Get the intended namespace for the operation
	  var namespace = self.collectionName;
	
	  // Ensure we have no \x00 bytes in the name causing wrong parsing
	  if(!!~namespace.indexOf("\x00")) {
	    return callback(new Error("namespace cannot contain a null character"), null);
	  }
	
	  // Check if we have passed in continue on error
	  var continueOnError = typeof options['keepGoing'] == 'boolean' 
	    ? options['keepGoing'] : false;
	  continueOnError = typeof options['continueOnError'] == 'boolean' 
	    ? options['continueOnError'] : continueOnError;
	
	  // Do we serialzie functions
	  var serializeFunctions = typeof options.serializeFunctions != 'boolean' 
	    ? self.serializeFunctions : options.serializeFunctions;
	
	  // Checkout a write connection
	  var connection = self.db.serverConfig.checkoutWriter();  
	  if(connection instanceof Error && connection.code == -5000) return callback(connection);
	
	  // Do we return the actual result document
	  var fullResult = typeof options.fullResult == 'boolean' ? options.fullResult : false;
	
	  // Collect errorOptions
	  var errorOptions = shared._getWriteConcern(self, options);
	
	  // If we have a write command with no callback and w:0 fail
	  if(errorOptions.w && errorOptions.w != 0 && callback == null) {
	    throw new Error("writeConcern requires callback")
	  }
	
	  // Add the documents and decorate them with id's if they have none
	  for(var index = 0, len = docs.length; index < len; ++index) {
	    var doc = docs[index];
	
	    // Add id to each document if it's not already defined
	    if (!(Buffer.isBuffer(doc))
	      && doc['_id'] == null
	      && self.db.forceServerObjectId != true
	      && options.forceServerObjectId != true) {
	        doc['_id'] = self.pkFactory.createPk();
	    }
	  }
	
	  // Single document write
	  if(docs.length == 1) {
	    // Create the write command
	    var write_command = {
	        insert: namespace
	      , writeConcern: errorOptions
	      , ordered: !continueOnError
	      , documents: docs
	    }
	
	    // Execute the write command
	    return self.db.command(write_command
	      , { connection:connection
	        , checkKeys: typeof options.checkKeys == 'boolean' ? options.checkKeys : true
	        , serializeFunctions: serializeFunctions
	        , writeCommand: true }
	      , function(err, result) {  
	        if(errorOptions.w == 0 && typeof callback == 'function') return callback(null, null);
	        if(errorOptions.w == 0) return;
	        if(callback == null) return;
	        if(err != null) {
	          return callback(err, null);
	        }
	
	        // Result has an error
	        if(!result.ok || Array.isArray(result.writeErrors) && result.writeErrors.length > 0) {
	          var error = utils.toError(result.writeErrors[0].errmsg);
	          error.code = result.writeErrors[0].code;
	          error.err = result.writeErrors[0].errmsg;
	          error.message = result.writeErrors[0].errmsg;
	
	          if (fullResult) return callback(error, result != null ? result : null);
	          // Return the error
	          return callback(error, null);
	        }
	
	        if(fullResult) return callback(null, result);
	        // Return the results for a whole batch
	        callback(null, docs)
	    });    
	  } else {
	    try {
	      // Multiple document write (use bulk)
	      var bulk = !continueOnError ? self.initializeOrderedBulkOp() : self.initializeUnorderedBulkOp();
	      // Add all the documents
	      for(var i = 0; i < docs.length;i++) {
	        bulk.insert(docs[i]);
	      }
	
	      // Execute the command
	      bulk.execute(errorOptions, function(err, result) {
	        if(errorOptions.w == 0 && typeof callback == 'function') return callback(null, null);
	        if(errorOptions.w == 0) return;
	        if(callback == null) return;
	        if(err) return callback(err, null);
	        if(result.hasWriteErrors()) {
	          var error = result.getWriteErrors()[0];
	          error.code = result.getWriteErrors()[0].code;
	          error.err = result.getWriteErrors()[0].errmsg;
	          error.message = result.getWriteErrors()[0].errmsg;
	          
	          if (fullResult) return callback(error, result != null ? result : null);
	          // Return the error
	          return callback(error, null);
	        }
	
	        if(fullResult) return callback(null, result != null ? result : null);
	        // Return the results for a whole batch
	        callback(null, docs)
	      });
	    } catch(err) {
	      callback(utils.toError(err), null);
	    }
	  }
	}
	
	//
	// Uses pre 2.6 OP_INSERT wire protocol
	//
	var insertAll = function insertAll (self, docs, options, callback) {
	  if('function' === typeof options) callback = options, options = {};
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;
	
	  // Insert options (flags for insert)
	  var insertFlags = {};
	  // If we have a mongodb version >= 1.9.1 support keepGoing attribute
	  if(options['keepGoing'] != null) {
	    insertFlags['keepGoing'] = options['keepGoing'];
	  }
	
	  // If we have a mongodb version >= 1.9.1 support keepGoing attribute
	  if(options['continueOnError'] != null) {
	    insertFlags['continueOnError'] = options['continueOnError'];
	  }
	
	  // DbName
	  var dbName = options['dbName'];
	  // If no dbname defined use the db one
	  if(dbName == null) {
	    dbName = self.db.databaseName;
	  }
	
	  // Either use override on the function, or go back to default on either the collection
	  // level or db
	  if(options['serializeFunctions'] != null) {
	    insertFlags['serializeFunctions'] = options['serializeFunctions'];
	  } else {
	    insertFlags['serializeFunctions'] = self.serializeFunctions;
	  }
	
	  // Get checkKeys value
	  var checkKeys = typeof options.checkKeys != 'boolean' ? true : options.checkKeys;
	
	  // Do we return the actual result document
	  var fullResult = typeof options.fullResult == 'boolean' ? options.fullResult : false;
	
	  // Pass in options
	  var insertCommand = new InsertCommand(
	      self.db
	    , dbName + "." + self.collectionName, checkKeys, insertFlags);
	
	  // Add the documents and decorate them with id's if they have none
	  for(var index = 0, len = docs.length; index < len; ++index) {
	    var doc = docs[index];
	
	    // Add id to each document if it's not already defined
	    if (!(Buffer.isBuffer(doc))
	      && doc['_id'] == null
	      && self.db.forceServerObjectId != true
	      && options.forceServerObjectId != true) {
	        doc['_id'] = self.pkFactory.createPk();
	    }
	
	    insertCommand.add(doc);
	  }
	
	  // Collect errorOptions
	  var errorOptions = shared._getWriteConcern(self, options);
	  // Default command options
	  var commandOptions = {};
	  // If safe is defined check for error message
	  if(shared._hasWriteConcern(errorOptions) && typeof callback == 'function') {
	    // Set safe option
	    commandOptions['safe'] = errorOptions;
	    // If we have an error option
	    if(typeof errorOptions == 'object') {
	      var keys = Object.keys(errorOptions);
	      for(var i = 0; i < keys.length; i++) {
	        commandOptions[keys[i]] = errorOptions[keys[i]];
	      }
	    }
	
	    // If we have a passed in connection use it
	    if(options.connection) {
	      commandOptions.connection = options.connection;
	    }
	
	    // Execute command with safe options (rolls up both command and safe command into one and executes them on the same connection)
	    self.db._executeInsertCommand(insertCommand, commandOptions, handleWriteResults(function (err, results) {
	      if(err) return callback(err, null);
	      if(results == null) return callback(new Error("command failed to return result"));
	      if(fullResult) return callback(null, results);
	      callback(null, docs);
	    }));
	  } else if(shared._hasWriteConcern(errorOptions) && callback == null) {
	    throw new Error("Cannot use a writeConcern without a provided callback");
	  } else {
	    // Execute the call without a write concern
	    var result = self.db._executeInsertCommand(insertCommand, commandOptions);
	    // If no callback just return
	    if(!callback) return;
	    // If error return error
	    if(result instanceof Error) {
	      return callback(result);
	    }
	
	    // Otherwise just return
	    return callback(null, docs);
	  }
	};
	
	// ***************************************************
	// Remove function
	// ***************************************************
	var removeWithWriteCommands = function(self, selector, options, callback) {
	  if('function' === typeof selector) {
	    callback = selector;
	    selector = options = {};
	  } else if ('function' === typeof options) {
	    callback = options;
	    options = {};
	  }
	
	  // Get the intended namespace for the operation
	  var namespace = self.collectionName;
	
	  // Ensure we have no \x00 bytes in the name causing wrong parsing
	  if(!!~namespace.indexOf("\x00")) {
	    return callback(new Error("namespace cannot contain a null character"), null);
	  }
	
	  // Set default empty selector if none
	  selector = selector == null ? {} : selector;
	
	  // Check if we have passed in continue on error
	  var continueOnError = typeof options['keepGoing'] == 'boolean' 
	    ? options['keepGoing'] : false;
	  continueOnError = typeof options['continueOnError'] == 'boolean' 
	    ? options['continueOnError'] : continueOnError;
	
	  // Do we serialzie functions
	  var serializeFunctions = typeof options.serializeFunctions != 'boolean' 
	    ? self.serializeFunctions : options.serializeFunctions;
	
	  // Checkout a write connection
	  var connection = self.db.serverConfig.checkoutWriter();  
	  if(connection instanceof Error && connection.code == -5000) return callback(connection);
	
	  // Figure out the value of top
	  var limit = options.single == true ? 1 : 0;
	  var upsert = typeof options.upsert == 'boolean' ? options.upsert : false;
	
	  // Do we return the actual result document
	  var fullResult = typeof options.fullResult == 'boolean' ? options.fullResult : false;
	
	  // Collect errorOptions
	  var errorOptions = shared._getWriteConcern(self, options);
	
	  // If we have a write command with no callback and w:0 fail
	  if(errorOptions.w && errorOptions.w != 0 && callback == null) {
	    throw new Error("writeConcern requires callback")
	  }
	
	  // Create the write command
	  var write_command = {
	    delete: namespace,
	    writeConcern: errorOptions,
	    ordered: !continueOnError,
	    deletes: [{
	      q : selector,
	      limit: limit
	    }]
	  }
	
	  // Execute the write command
	  self.db.command(write_command
	    , { connection:connection
	      , checkKeys: false
	      , serializeFunctions: serializeFunctions
	      , writeCommand: true }
	    , function(err, result) {  
	      if(errorOptions.w == 0 && typeof callback == 'function') return callback(null, null);
	      if(errorOptions.w == 0) return;
	      if(callback == null) return;
	      if(err != null) {
	        return callback(err, null);
	      }
	
	      // Result has an error
	      if(!result.ok || Array.isArray(result.writeErrors) && result.writeErrors.length > 0) {
	        var error = utils.toError(result.writeErrors[0].errmsg);
	        error.code = result.writeErrors[0].code;
	        error.err = result.writeErrors[0].errmsg;
	        error.message = result.writeErrors[0].errmsg;
	        // Return the error
	        return callback(error, null);
	      }
	      
	      if(fullResult) return callback(null, result);
	      // Backward compatibility format
	      var r = backWardsCompatibiltyResults(result, 'remove');      
	      // Return the results for a whole batch
	      callback(null, r.n, r)
	  });
	}
	
	var remove = function remove(selector, options, callback) {
	  if('function' === typeof options) callback = options, options = null;
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;
	
	  // Get a connection
	  var connection = this.db.serverConfig.checkoutWriter();
	  if(connection instanceof Error && connection.code == -5000) return callback(connection);
	  var useLegacyOps = options.useLegacyOps == null || options.useLegacyOps == false ? false : true;
	
	  // If we support write commands let's perform the insert using it  
	  if(!useLegacyOps && hasWriteCommands(connection) && !Buffer.isBuffer(selector)) {
	    return removeWithWriteCommands(this, selector, options, callback);
	  }
	
	  if ('function' === typeof selector) {
	    callback = selector;
	    selector = options = {};
	  } else if ('function' === typeof options) {
	    callback = options;
	    options = {};
	  }
	
	  // Ensure options
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;
	  // Ensure we have at least an empty selector
	  selector = selector == null ? {} : selector;
	  // Set up flags for the command, if we have a single document remove
	  var flags = 0 | (options.single ? 1 : 0);
	
	  // Do we return the actual result document
	  var fullResult = typeof options.fullResult == 'boolean' ? options.fullResult : false;
	
	  // DbName
	  var dbName = options['dbName'];
	  // If no dbname defined use the db one
	  if(dbName == null) {
	    dbName = this.db.databaseName;
	  }
	
	  // Create a delete command
	  var deleteCommand = new DeleteCommand(
	      this.db
	    , dbName + "." + this.collectionName
	    , selector
	    , flags);
	
	  var self = this;
	  var errorOptions = shared._getWriteConcern(self, options);
	
	  // Execute the command, do not add a callback as it's async
	  if(shared._hasWriteConcern(errorOptions) && typeof callback == 'function') {
	    // Insert options
	    var commandOptions = {};
	    // Set safe option
	    commandOptions['safe'] = true;
	    // If we have an error option
	    if(typeof errorOptions == 'object') {
	      var keys = Object.keys(errorOptions);
	      for(var i = 0; i < keys.length; i++) {
	        commandOptions[keys[i]] = errorOptions[keys[i]];
	      }
	    }
	
	    // If we have a passed in connection use it
	    if(options.connection) {
	      commandOptions.connection = options.connection;
	    }
	
	    // Execute command with safe options (rolls up both command and safe command into one and executes them on the same connection)
	    this.db._executeRemoveCommand(deleteCommand, commandOptions, handleWriteResults(function (err, results) {
	      if(err) return callback(err, null);
	      if(results == null) return callback(new Error("command failed to return result"));
	      if(fullResult) return callback(null, results);
	      callback(null, results[0].n);
	    }));
	  } else if(shared._hasWriteConcern(errorOptions) && callback == null) {
	    throw new Error("Cannot use a writeConcern without a provided callback");
	  } else {
	    var result = this.db._executeRemoveCommand(deleteCommand);
	    // If no callback just return
	    if (!callback) return;
	    // If error return error
	    if (result instanceof Error) {
	      return callback(result);
	    }
	    // Otherwise just return
	    return callback();
	  }
	};
	
	// ***************************************************
	// Save function
	// ***************************************************
	var save = function save(doc, options, callback) {
	  if('function' === typeof options) callback = options, options = null;
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;
	  // Throw an error if attempting to perform a bulk operation
	  if(Array.isArray(doc)) throw new Error("doc parameter must be a single document");
	  // Extract the id, if we have one we need to do a update command
	  var id = doc['_id'];
	  var commandOptions = shared._getWriteConcern(this, options);
	  if(options.connection) commandOptions.connection = options.connection;
	  if(typeof options.fullResult == 'boolean') commandOptions.fullResult = options.fullResult;
	
	  if(id != null) {
	    commandOptions.upsert = true;
	    this.update({ _id: id }, doc, commandOptions, callback);
	  } else {
	    this.insert(doc, commandOptions, callback && function (err, docs) {
	      if(err) return callback(err, null);
	
	      if(Array.isArray(docs)) {
	        callback(err, docs[0]);
	      } else {
	        callback(err, docs);
	      }
	    });
	  }
	};
	
	// ***************************************************
	// Update document function
	// ***************************************************
	var updateWithWriteCommands = function(self, selector, document, options, callback) {
	  if('function' === typeof options) callback = options, options = null;
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;
	
	  // Get the intended namespace for the operation
	  var namespace = self.collectionName;
	
	  // Ensure we have no \x00 bytes in the name causing wrong parsing
	  if(!!~namespace.indexOf("\x00")) {
	    return callback(new Error("namespace cannot contain a null character"), null);
	  }
	
	  // If we are not providing a selector or document throw
	  if(selector == null || typeof selector != 'object') 
	    return callback(new Error("selector must be a valid JavaScript object"));
	  if(document == null || typeof document != 'object') 
	    return callback(new Error("document must be a valid JavaScript object"));    
	
	  // Check if we have passed in continue on error
	  var continueOnError = typeof options['keepGoing'] == 'boolean' 
	    ? options['keepGoing'] : false;
	  continueOnError = typeof options['continueOnError'] == 'boolean' 
	    ? options['continueOnError'] : continueOnError;
	
	  // Do we serialzie functions
	  var serializeFunctions = typeof options.serializeFunctions != 'boolean' 
	    ? self.serializeFunctions : options.serializeFunctions;
	
	  // Checkout a write connection
	  var connection = self.db.serverConfig.checkoutWriter();  
	  if(connection instanceof Error && connection.code == -5000) return callback(connection);
	
	  // Figure out the value of top
	  var multi = typeof options.multi == 'boolean' ? options.multi : false;
	  var upsert = typeof options.upsert == 'boolean' ? options.upsert : false;
	
	  // Do we return the actual result document
	  var fullResult = typeof options.fullResult == 'boolean' ? options.fullResult : false;
	
	  // Collect errorOptions
	  var errorOptions = shared._getWriteConcern(self, options);
	
	  // If we have a write command with no callback and w:0 fail
	  if(errorOptions.w && errorOptions.w != 0 && callback == null) {
	    throw new Error("writeConcern requires callback")
	  }
	
	  // Create the write command
	  var write_command = {
	    update: namespace,
	    writeConcern: errorOptions,
	    ordered: !continueOnError,
	    updates: [{
	      q : selector,
	      u: document,
	      multi: multi,
	      upsert: upsert
	    }]
	  }
	
	  // Check if we have a checkKeys override
	  var checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : false;
	
	  // Execute the write command
	  self.db.command(write_command
	    , { connection:connection
	      , checkKeys: checkKeys
	      , serializeFunctions: serializeFunctions
	      , writeCommand: true }
	    , function(err, result) { 
	      if(errorOptions.w == 0 && typeof callback == 'function') return callback(null, null);
	      if(errorOptions.w == 0) return;
	      if(callback == null) return;
	
	      if(errorOptions.w == 0 && typeof callback == 'function') return callback(null, null);
	      if(errorOptions.w == 0) return;
	      if(callback == null) return;
	      if(err != null) {
	        return callback(err, null);
	      }
	
	      // Result has an error
	      if(!result.ok || Array.isArray(result.writeErrors) && result.writeErrors.length > 0) {
	        var error = utils.toError(result.writeErrors[0].errmsg);
	        error.code = result.writeErrors[0].code;
	        error.err = result.writeErrors[0].errmsg;
	        error.message = result.writeErrors[0].errmsg;
	        return callback(error, null);
	      }
	      
	      if(fullResult) return callback(null, result);
	      // Backward compatibility format
	      var r = backWardsCompatibiltyResults(result, 'update');
	      // Return the results for a whole batch
	      callback(null, r.n, r)
	  });
	}
	
	var backWardsCompatibiltyResults = function(result, op) {
	  // Upserted
	  var upsertedValue = null;
	  var finalResult = null;
	  var updatedExisting = true;
	
	  // We have a single document upserted result
	  if(Array.isArray(result.upserted) || result.upserted != null) {
	    updatedExisting = false;
	    upsertedValue = result.upserted;
	  }
	
	  // Final result
	  if(op == 'remove' || op == 'insert') {
	    finalResult = {ok: true, n: result.n}
	  } else {
	    finalResult = {ok: true, n: result.n, updatedExisting: updatedExisting}
	  }
	
	  if(upsertedValue != null) finalResult.upserted = upsertedValue;
	  return finalResult;
	}
	
	var handleWriteResults = function handleWriteResults(callback) {
	  return function(err, error) {
	    var documents = error && error.documents;
	    if(!callback) return;
	    // We have an error
	    if(err) return callback(err, null);
	    // If no document something is terribly wrong
	    if(error == null) return callback(utils.toError("MongoDB did not return a response"));
	    // Handle the case where no result was returned
	    if(error != null && documents == null) {
	      if(typeof error.err == 'string') {
	        return callback(utils.toError(error.err));  
	      } else if(typeof error.errmsg == 'string') {
	        return callback(utils.toError(error.errmsg));          
	      } else {
	        return callback(utils.toError("Unknown MongoDB error"));
	      }
	    }
	
	    // Handler normal cases
	    if(documents[0].err || documents[0].errmsg) {
	      callback(utils.toError(documents[0]));
	    } else if(documents[0].jnote || documents[0].wtimeout) {
	      callback(utils.toError(documents[0]));
	    } else {
	      callback(err, documents);
	    }
	  }
	}
	
	var update = function update(selector, document, options, callback) {
	  if('function' === typeof options) callback = options, options = null;
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;
	
	  // Get a connection
	  var connection = options.connection || this.db.serverConfig.checkoutWriter();
	  if(connection instanceof Error && connection.code == -5000) return callback(connection);
	  var useLegacyOps = options.useLegacyOps == null || options.useLegacyOps == false ? false : true;
	  // If we support write commands let's perform the insert using it  
	  if(!useLegacyOps && hasWriteCommands(connection) && !Buffer.isBuffer(selector) && !Buffer.isBuffer(document)) {
	    return updateWithWriteCommands(this, selector, document, options, callback);
	  }
	
	  // DbName
	  var dbName = options['dbName'];
	  // If no dbname defined use the db one
	  if(dbName == null) {
	    dbName = this.db.databaseName;
	  }
	
	  // If we are not providing a selector or document throw
	  if(selector == null || typeof selector != 'object') return callback(new Error("selector must be a valid JavaScript object"));
	  if(document == null || typeof document != 'object') return callback(new Error("document must be a valid JavaScript object"));
	
	  // Do we return the actual result document
	  var fullResult = typeof options.fullResult == 'boolean' ? options.fullResult : false;
	
	  // Either use override on the function, or go back to default on either the collection
	  // level or db
	  if(options['serializeFunctions'] != null) {
	    options['serializeFunctions'] = options['serializeFunctions'];
	  } else {
	    options['serializeFunctions'] = this.serializeFunctions;
	  }
	
	  // Build the options command
	  var updateCommand = new UpdateCommand(
	      this.db
	    , dbName + "." + this.collectionName
	    , selector
	    , document
	    , options);
	
	  var self = this;
	  // Unpack the error options if any
	  var errorOptions = shared._getWriteConcern(this, options);
	  // If safe is defined check for error message
	  if(shared._hasWriteConcern(errorOptions) && typeof callback == 'function') {
	    // Insert options
	    var commandOptions = {};
	    // Set safe option
	    commandOptions['safe'] = errorOptions;
	    // If we have an error option
	    if(typeof errorOptions == 'object') {
	      var keys = Object.keys(errorOptions);
	      for(var i = 0; i < keys.length; i++) {
	        commandOptions[keys[i]] = errorOptions[keys[i]];
	      }
	    }
	
	    // If we have a passed in connection use it
	    if(options.connection) {
	      commandOptions.connection = options.connection;
	    }
	
	    // Execute command with safe options (rolls up both command and safe command into one and executes them on the same connection)
	    this.db._executeUpdateCommand(updateCommand, commandOptions, handleWriteResults(function(err, results) {
	      if(err) return callback(err, null);
	      if(results == null) return callback(new Error("command failed to return result"));
	      if(fullResult) return callback(null, results);
	      callback(null, results[0].n, results[0]);
	    }));
	  } else if(shared._hasWriteConcern(errorOptions) && callback == null) {
	    throw new Error("Cannot use a writeConcern without a provided callback");
	  } else {
	    // Execute update
	    var result = this.db._executeUpdateCommand(updateCommand);
	    // If no callback just return
	    if (!callback) return;
	    // If error return error
	    if (result instanceof Error) {
	      return callback(result);
	    }
	    
	    // Otherwise just return
	    return callback();
	  }
	};
	
	// ***************************************************
	// findAndModify function
	// ***************************************************
	var findAndModify = function findAndModify (query, sort, doc, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  sort = args.length ? args.shift() || [] : [];
	  doc = args.length ? args.shift() : null;
	  options = args.length ? args.shift() || {} : {};
	  var self = this;
	
	  var queryObject = {
	     'findandmodify': this.collectionName
	   , 'query': query
	  };
	
	  sort = utils.formattedOrderClause(sort);
	  if (sort) {
	    queryObject.sort = sort;
	  }
	
	  queryObject.new = options.new ? 1 : 0;
	  queryObject.remove = options.remove ? 1 : 0;
	  queryObject.upsert = options.upsert ? 1 : 0;
	
	  if (options.fields) {
	    queryObject.fields = options.fields;
	  }
	
	  if (doc && !options.remove) {
	    queryObject.update = doc;
	  }
	
	  // Checkout a write connection
	  options.connection = self.db.serverConfig.checkoutWriter();  
	  if(options.connection instanceof Error && options.connection.code == -5000) return callback(options.connection);
	
	  // Either use override on the function, or go back to default on either the collection
	  // level or db
	  if(options['serializeFunctions'] != null) {
	    options['serializeFunctions'] = options['serializeFunctions'];
	  } else {
	    options['serializeFunctions'] = this.serializeFunctions;
	  }
	
	  // No check on the documents
	  options.checkKeys = false;
	
	  // Execute the command
	  this.db.command(queryObject
	    , options, function(err, result) {
	      if(err) return callback(err, null);
	      return callback(null, result.value, result);
	  });
	}
	
	// ***************************************************
	// findAndRemove function
	// ***************************************************
	var findAndRemove = function(query, sort, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  sort = args.length ? args.shift() || [] : [];
	  options = args.length ? args.shift() || {} : {};
	  // Add the remove option
	  options['remove'] = true;
	  // Execute the callback
	  this.findAndModify(query, sort, null, options, callback);
	}
	
	// Map methods
	exports.insert = insert;
	exports.remove = remove;
	exports.save = save;
	exports.update = update;
	exports.findAndModify = findAndModify;
	exports.findAndRemove = findAndRemove;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(171)
	  , utils = __webpack_require__(207);
	
	var geoNear = function geoNear(x, y, options, callback) {
	  var point = typeof(x) == 'object' && x
	    , args = Array.prototype.slice.call(arguments, point?1:2);
	
	  callback = args.pop();
	  // Fetch all commands
	  options = args.length ? args.shift() || {} : {};
	
	  // Build command object
	  var commandObject = {
	    geoNear:this.collectionName,
	    near: point || [x, y]
	  }
	
	  // Ensure we have the right read preference inheritance
	  options.readPreference = shared._getReadConcern(this, options);
	
	  // Exclude readPreference and existing options to prevent user from
	  // shooting themselves in the foot
	  var exclude = {
	    readPreference: true,
	    geoNear: true,
	    near: true
	  };
	
	  commandObject = utils.decorateCommand(commandObject, options, exclude);
	
	  // Execute the command
	  this.db.command(commandObject, options, function (err, res) {
	    if (err) {
	      callback(err);
	    } else if (res.err || res.errmsg) {
	      callback(utils.toError(res));
	    } else {
	      // should we only be returning res.results here? Not sure if the user
	      // should see the other return information
	      callback(null, res);
	    }
	  });
	}
	
	var geoHaystackSearch = function geoHaystackSearch(x, y, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  // Fetch all commands
	  options = args.length ? args.shift() || {} : {};
	
	  // Build command object
	  var commandObject = {
	    geoSearch:this.collectionName,
	    near: [x, y]
	  }
	
	  // Remove read preference from hash if it exists
	  commandObject = utils.decorateCommand(commandObject, options, {readPreference: true});
	
	  // Ensure we have the right read preference inheritance
	  options.readPreference = shared._getReadConcern(this, options);
	
	  // Execute the command
	  this.db.command(commandObject, options, function (err, res) {
	    if (err) {
	      callback(err);
	    } else if (res.err || res.errmsg) {
	      callback(utils.toError(res));
	    } else {
	      // should we only be returning res.results here? Not sure if the user
	      // should see the other return information
	      callback(null, res);
	    }
	  });
	}
	
	exports.geoNear = geoNear;
	exports.geoHaystackSearch = geoHaystackSearch;


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	var utils = __webpack_require__(207)
	  , CommandCursor = __webpack_require__(173).CommandCursor;
	
	var _getWriteConcern = __webpack_require__(171)._getWriteConcern;
	
	var createIndex = function createIndex (fieldOrSpec, options, callback) {
	  // Clean up call
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};
	  options = typeof callback === 'function' ? options : callback;
	  options = options == null ? {} : options;
	
	  // Collect errorOptions
	  var errorOptions = _getWriteConcern(this, options);
	  // Execute create index
	  this.db.createIndex(this.collectionName, fieldOrSpec, options, callback);
	};
	
	var indexExists = function indexExists(indexes, callback) {
	 this.indexInformation(function(err, indexInformation) {
	   // If we have an error return
	   if(err != null) return callback(err, null);
	   // Let's check for the index names
	   if(Array.isArray(indexes)) {
	     for(var i = 0; i < indexes.length; i++) {
	       if(indexInformation[indexes[i]] == null) {
	         return callback(null, false);
	       }
	     }
	
	     // All keys found return true
	     return callback(null, true);
	   } else {
	     return callback(null, indexInformation[indexes] != null);
	   }
	 });
	}
	
	var dropAllIndexes = function dropIndexes (callback) {
	  this.db.dropIndex(this.collectionName, '*', function (err, result) {
	    if(err) return callback(err, false);
	    callback(null, true);
	  });
	};
	
	var indexInformation = function indexInformation (options, callback) {
	  // Unpack calls
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};
	  // Call the index information
	  this.db.indexInformation(this.collectionName, options, callback);
	};
	
	var ensureIndex = function ensureIndex (fieldOrSpec, options, callback) {
	  // Clean up call
	  if (typeof callback === 'undefined' && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	
	  if (options == null) {
	    options = {};
	  }
	
	  // Execute create index
	  this.db.ensureIndex(this.collectionName, fieldOrSpec, options, callback);
	};
	
	var listIndexes = function listIndexes(options) {
	  options = options || {};
	  // Clone the options
	  options = utils.shallowObjectCopy(options);
	
	  // Checkout the writer
	  var connection = this.db.serverConfig.checkoutReader();
	
	  // We have a list collections command
	  if(connection && connection.serverCapabilities && connection.serverCapabilities.hasListIndexesCommand) {
	    // Cursor options
	    var cursor = options.batchSize ? {batchSize: options.batchSize} : {}
	    // Build the command
	    var command = { listIndexes: this.collectionName, cursor: cursor };
	    // Get the command cursor
	    return new CommandCursor(this.db, this.db.databaseName + ".$cmd", command);
	  }
	
	  var collection = this.db.collection('system.indexes');
	  return collection.find({ns: this.db.databaseName + "." + this.collectionName});
	};
	
	exports.createIndex = createIndex;
	exports.indexExists = indexExists;
	exports.dropAllIndexes = dropAllIndexes;
	exports.indexInformation = indexInformation;
	exports.ensureIndex = ensureIndex;
	exports.listIndexes = listIndexes;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var ObjectID = __webpack_require__(150).ObjectID
	  , Long = __webpack_require__(150).Long
	  , DbCommand = __webpack_require__(175).DbCommand
	  , CommandCursor = __webpack_require__(173).CommandCursor
	  , Scope = __webpack_require__(206).Scope
	  , shared = __webpack_require__(171)
	  , utils = __webpack_require__(207);
	
	var testForFields = {
	    limit: 1, sort: 1, fields:1, skip: 1, hint: 1, explain: 1, snapshot: 1, timeout: 1, tailable: 1, tailableRetryInterval: 1
	  , numberOfRetries: 1, awaitdata: 1, exhaust: 1, batchSize: 1, returnKey: 1, maxScan: 1, min: 1, max: 1, showDiskLoc: 1
	  , comment: 1, raw: 1, readPreference: 1, partial: 1, read: 1, dbName: 1, oplogReplay: 1, connection: 1, maxTimeMS: 1, transforms:1
	};
	
	//
	// Find method
	//
	var find = function find () {
	  var options
	    , args = Array.prototype.slice.call(arguments, 0)
	    , has_callback = typeof args[args.length - 1] === 'function'
	    , has_weird_callback = typeof args[0] === 'function'
	    , callback = has_callback ? args.pop() : (has_weird_callback ? args.shift() : null)
	    , len = args.length
	    , selector = len >= 1 ? args[0] : {}
	    , fields = len >= 2 ? args[1] : undefined;
	
	  if(len === 1 && has_weird_callback) {
	    // backwards compat for callback?, options case
	    selector = {};
	    options = args[0];
	  }
	
	  if(len === 2 && !Array.isArray(fields)) {
	    var fieldKeys = Object.keys(fields);
	    var is_option = false;
	
	    for(var i = 0; i < fieldKeys.length; i++) {
	      if(testForFields[fieldKeys[i]] != null) {
	        is_option = true;
	        break;
	      }
	    }
	
	    if(is_option) {
	      options = fields;
	      fields = undefined;
	    } else {
	      options = {};
	    }
	  } else if(len === 2 && Array.isArray(fields) && !Array.isArray(fields[0])) {
	    var newFields = {};
	    // Rewrite the array
	    for(var i = 0; i < fields.length; i++) {
	      newFields[fields[i]] = 1;
	    }
	    // Set the fields
	    fields = newFields;
	  }
	
	  if(3 === len) {
	    options = args[2];
	  }
	
	  // Ensure selector is not null
	  selector = selector == null ? {} : selector;
	  // Validate correctness off the selector
	  var object = selector;
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;
	    if(object_size != object.length)  {
	      var error = new Error("query selector raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }
	
	  // Validate correctness of the field selector
	  var object = fields;
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;
	    if(object_size != object.length)  {
	      var error = new Error("query fields raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }
	
	  // Check special case where we are using an objectId
	  if(selector instanceof ObjectID || (selector != null && selector._bsontype == 'ObjectID')) {
	    selector = {_id:selector};
	  }
	
	  // If it's a serialized fields field we need to just let it through
	  // user be warned it better be good
	  if(options && options.fields && !(Buffer.isBuffer(options.fields))) {
	    fields = {};
	
	    if(Array.isArray(options.fields)) {
	      if(!options.fields.length) {
	        fields['_id'] = 1;
	      } else {
	        for (var i = 0, l = options.fields.length; i < l; i++) {
	          fields[options.fields[i]] = 1;
	        }
	      }
	    } else {
	      fields = options.fields;
	    }
	  }
	
	  if (!options) options = {};
	
	  var newOptions = {};
	  // Make a shallow copy of options
	  for (var key in options) {
	    newOptions[key] = options[key];
	  }
	
	  newOptions.skip = len > 3 ? args[2] : options.skip ? options.skip : 0;
	  newOptions.limit = len > 3 ? args[3] : options.limit ? options.limit : 0;
	  newOptions.raw = options.raw != null && typeof options.raw === 'boolean' ? options.raw : this.raw;
	  newOptions.hint = options.hint != null ? shared.normalizeHintField(options.hint) : this.internalHint;
	  newOptions.timeout = len == 5 ? args[4] : typeof options.timeout === 'undefined' ? undefined : options.timeout;
	  // If we have overridden slaveOk otherwise use the default db setting
	  newOptions.slaveOk = options.slaveOk != null ? options.slaveOk : this.db.slaveOk;
	
	  // Set option
	  var o = newOptions;
	  // Support read/readPreference
	  if(o["read"] != null) o["readPreference"] = o["read"];
	  // If no readPreference specified set the collection level readPreference
	  o.readPreference = o.readPreference ? o.readPreference : this.readPreference;
	  // If still no readPreference specified set the db level
	  o.readPreference = o.readPreference ? o.readPreference : this.db.options.readPreference;
	  // Set slaveok if needed
	  if(o.readPreference == "secondary" || o.read == "secondaryOnly") o.slaveOk = true;
	
	  // Ensure the query is an object
	  if(selector != null && typeof selector != 'object') {
	    throw utils.toError("query selector must be an object");
	  }
	
	  // Set the selector
	  o.selector = selector;
	
	  // Create precursor
	  var scope = new Scope(this, {}, fields, o);
	  // Callback for backward compatibility
	  if(callback) return callback(null, scope.find(selector));
	  // Return the pre cursor object
	  return scope.find(selector);
	};
	
	var findOne = function findOne () {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 0);
	  var callback = args.pop();
	  var cursor = this.find.apply(this, args).limit(-1).batchSize(1);
	
	  // Return the item
	  cursor.nextObject(function(err, item) {
	    if(err != null) return callback(utils.toError(err), null);
	    callback(null, item);
	  });
	};
	
	var parallelCollectionScan = function parallelCollectionScan (options, callback) {
	  var self = this;
	
	  if(typeof options == 'function') {
	    callback = options;
	    options = {numCursors: 1};
	  }
	
	  // Set number of cursors to 1
	  options.numCursors = options.numCursors || 1;
	  options.batchSize = options.batchSize || 1000;
	
	  // Set read preference if we set one
	  options.readPreference = shared._getReadConcern(this, options);
	
	  // Create command object
	  var commandObject = {
	      parallelCollectionScan: this.collectionName
	    , numCursors: options.numCursors
	  }
	
	  // Execute the command
	  this.db.command(commandObject, options, function(err, result) {
	    if(err) return callback(err, null);
	    if(result == null) return callback(new Error("no result returned for parallelCollectionScan"), null);
	
	    var cursors = [];
	    // Create command cursors for each item
	    for(var i = 0; i < result.cursors.length; i++) {
	      var rawId = result.cursors[i].cursor.id
	      // Convert cursorId to Long if needed
	      var cursorId = typeof rawId == 'number' ? Long.fromNumber(rawId) : rawId;
	
	      // Command cursor options
	      var commandOptions = {
	          batchSize: options.batchSize
	        , cursorId: cursorId
	        , items: result.cursors[i].cursor.firstBatch
	      }
	
	      // Add a command cursor
	      cursors.push(new CommandCursor(self.db, self, {}, commandOptions));
	    }
	
	    callback(null, cursors);
	  });
	}
	
	exports.find = find;
	exports.findOne = findOne;
	exports.parallelCollectionScan = parallelCollectionScan;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	// ***************************************************
	// Write concerns
	// ***************************************************
	var _hasWriteConcern = function(errorOptions) {
	  return errorOptions == true
	    || errorOptions.w > 0
	    || errorOptions.w == 'majority'
	    || errorOptions.j == true
	    || errorOptions.journal == true
	    || errorOptions.fsync == true
	}
	
	var _setWriteConcernHash = function(options) {
	  var finalOptions = {};
	  if(options.w != null) finalOptions.w = options.w;  
	  if(options.journal == true) finalOptions.j = options.journal;
	  if(options.j == true) finalOptions.j = options.j;
	  if(options.fsync == true) finalOptions.fsync = options.fsync;
	  if(options.wtimeout != null) finalOptions.wtimeout = options.wtimeout;  
	  return finalOptions;
	}
	
	var _getWriteConcern = function(self, options) {
	  // Final options
	  var finalOptions = {w:1};
	  // Local options verification
	  if(options.w != null || typeof options.j == 'boolean' || typeof options.journal == 'boolean' || typeof options.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(options);
	  } else if(typeof options.safe == "boolean") {
	    finalOptions = {w: (options.safe ? 1 : 0)};
	  } else if(options.safe != null && typeof options.safe == 'object') {
	    finalOptions = _setWriteConcernHash(options.safe);
	  } else if(self.opts.w != null || typeof self.opts.j == 'boolean' || typeof self.opts.journal == 'boolean' || typeof self.opts.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(self.opts);
	  } else if(typeof self.opts.safe == "boolean") {
	    finalOptions = {w: (self.opts.safe ? 1 : 0)};
	  } else if(self.db.safe.w != null || typeof self.db.safe.j == 'boolean' || typeof self.db.safe.journal == 'boolean' || typeof self.db.safe.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(self.db.safe);
	  } else if(self.db.options.w != null || typeof self.db.options.j == 'boolean' || typeof self.db.options.journal == 'boolean' || typeof self.db.options.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(self.db.options);
	  } else if(typeof self.db.safe == "boolean") {
	    finalOptions = {w: (self.db.safe ? 1 : 0)};
	  }
	
	  // Ensure we don't have an invalid combination of write concerns
	  if(finalOptions.w < 1 
	    && (finalOptions.journal == true || finalOptions.j == true || finalOptions.fsync == true)) throw new Error("No acknowlegement using w < 1 cannot be combined with journal:true or fsync:true");
	
	  // Return the options
	  return finalOptions;
	}
	
	var _getReadConcern = function(self, options) {
	  if(options.readPreference) return options.readPreference;
	  if(self.readPreference) return self.readPreference;
	  if(self.db.readPreference) return self.readPreference;
	  return 'primary';
	}
	
	/**
	 * @ignore
	 */
	var checkCollectionName = function checkCollectionName (collectionName) {
	  if('string' !== typeof collectionName) {
	    throw Error("collection name must be a String");
	  }
	
	  if(!collectionName || collectionName.indexOf('..') != -1) {
	    throw Error("collection names cannot be empty");
	  }
	
	  if(collectionName.indexOf('$') != -1 &&
	      collectionName.match(/((^\$cmd)|(oplog\.\$main))/) == null) {
	    throw Error("collection names must not contain '$'");
	  }
	
	  if(collectionName.match(/^\.|\.$/) != null) {
	    throw Error("collection names must not start or end with '.'");
	  }
	
	  // Validate that we are not passing 0x00 in the colletion name
	  if(!!~collectionName.indexOf("\x00")) {
	    throw new Error("collection names cannot contain a null character");
	  }
	};
	
	
	/**
	 * Normalizes a `hint` argument.
	 *
	 * @param {String|Object|Array} hint
	 * @return {Object}
	 * @api private
	 */
	var normalizeHintField = function normalizeHintField(hint) {
	  var finalHint = null;
	
	  if(typeof hint == 'string') {
	    finalHint = hint;
	  } else if(Array.isArray(hint)) {
	    finalHint = {};
	
	    hint.forEach(function(param) {
	      finalHint[param] = 1;
	    });  
	  } else if(hint != null && typeof hint == 'object') {
	    finalHint = {};
	    for (var name in hint) {
	      finalHint[name] = hint[name];
	    }    
	  }
	
	  return finalHint;
	};
	
	exports._getWriteConcern = _getWriteConcern;
	exports._hasWriteConcern = _hasWriteConcern;
	exports._getReadConcern = _getReadConcern;
	exports.checkCollectionName = checkCollectionName;
	exports.normalizeHintField = normalizeHintField;

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 * @ignore
	 */
	var InsertCommand = __webpack_require__(178).InsertCommand
	  , QueryCommand = __webpack_require__(180).QueryCommand
	  , DeleteCommand = __webpack_require__(176).DeleteCommand
	  , UpdateCommand = __webpack_require__(181).UpdateCommand
	  , DbCommand = __webpack_require__(175).DbCommand
	  , ObjectID = __webpack_require__(150).ObjectID
	  , Code = __webpack_require__(150).Code
	  , Cursor = __webpack_require__(197).Cursor
	  , utils = __webpack_require__(207)
	  , shared = __webpack_require__(171)
	  , core = __webpack_require__(167)
	  , query = __webpack_require__(170)
	  , index = __webpack_require__(169)
	  , geo = __webpack_require__(168)
	  , commands = __webpack_require__(166)
	  , aggregation = __webpack_require__(162)
	  , unordered = __webpack_require__(165)
	  , ordered = __webpack_require__(164);
	
	/**
	 * Create a new Collection instance (INTERNAL TYPE, do not instantiate directly)
	 *
	 * Options
	 *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **slaveOk** {Boolean, default:false}, Allow reads from secondaries.
	 *  - **serializeFunctions** {Boolean, default:false}, serialize functions on the document.
	 *  - **raw** {Boolean, default:false}, perform all operations using raw bson objects.
	 *  - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.
	 *
	 * @class Represents a Collection
	 * @param {Object} db db instance.
	 * @param {String} collectionName collection name.
	 * @param {Object} [pkFactory] alternative primary key factory.
	 * @param {Object} [options] additional options for the collection.
	 * @return {Object} a collection instance.
	 */
	function Collection (db, collectionName, pkFactory, options) {
	  if(!(this instanceof Collection)) return new Collection(db, collectionName, pkFactory, options);
	
	  shared.checkCollectionName(collectionName);
	
	  this.db = db;
	  this.collectionName = collectionName;
	  this.internalHint = null;
	  this.opts = options != null && ('object' === typeof options) ? options : {};
	  this.slaveOk = options == null || options.slaveOk == null ? db.slaveOk : options.slaveOk;
	  this.serializeFunctions = options == null || options.serializeFunctions == null ? db.serializeFunctions : options.serializeFunctions;
	  this.raw = options == null || options.raw == null ? db.raw : options.raw;
	
	  // Assign the right collection level readPreference
	  if(options && options.readPreference) {
	    this.readPreference = options.readPreference;
	  } else if(this.db.options.readPreference) {
	    this.readPreference = this.db.options.readPreference;
	  } else if(this.db.serverConfig.options.readPreference) {
	    this.readPreference = this.db.serverConfig.options.readPreference;
	  }
	
	  // Set custom primary key factory if provided
	  this.pkFactory = pkFactory == null
	    ? ObjectID
	    : pkFactory;
	
	  // Server Capabilities
	  this.serverCapabilities = this.db.serverConfig._serverCapabilities;
	}
	
	/**
	 * Inserts a single document or a an array of documents into MongoDB.
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **continueOnError/keepGoing** {Boolean, default:false}, keep inserting documents even if one document has an error, *mongodb 1.9.1 >*.
	 *  - **serializeFunctions** {Boolean, default:false}, serialize functions on the document.
	 *  - **forceServerObjectId** {Boolean, default:false}, let server assign ObjectId instead of the driver
	 *  - **checkKeys** {Boolean, default:true}, allows for disabling of document key checking (WARNING OPENS YOU UP TO INJECTION ATTACKS)
	 *  - **fullResult** {Boolean, default:false}, returns the full result document (document returned will differ by server version)
	 *
	 * @param {Array|Object} docs
	 * @param {Object} [options] optional options for insert command
	 * @param {Function} [callback] optional callback for the function, must be provided when using a writeconcern
	 * @return {Collection}
	 * @api public
	 */
	Collection.prototype.insert = function() { return core.insert; }();
	
	/**
	 * Removes documents specified by `selector` from the db.
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **single** {Boolean, default:false}, removes the first document found.
	 *  - **fullResult** {Boolean, default:false}, returns the full result document (document returned will differ by server version)
	 *
	 * @param {Object} [selector] optional select, no selector is equivalent to removing all documents.
	 * @param {Object} [options] additional options during remove.
	 * @param {Function} [callback] must be provided if you performing a remove with a writeconcern
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.remove = function() { return core.remove; }();
	
	/**
	 * Renames the collection.
	 *
	 * Options
	 *  - **dropTarget** {Boolean, default:false}, drop the target name collection if it previously exists.
	 *
	 * @param {String} newName the new name of the collection.
	 * @param {Object} [options] returns option results.
	 * @param {Function} callback the callback accepting the result
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.rename = function() { return commands.rename; }();
	
	/**
	 * Save a document. Simple full document replacement function. Not recommended for efficiency, use atomic
	 * operators and update instead for more efficient operations.
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *
	 * @param {Object} [doc] the document to save
	 * @param {Object} [options] additional options during remove.
	 * @param {Function} [callback] must be provided if you performing an update with a writeconcern
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.save = function() { return core.save; }();
	
	/**
	 * Updates documents.
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **upsert** {Boolean, default:false}, perform an upsert operation.
	 *  - **multi** {Boolean, default:false}, update all documents matching the selector.
	 *  - **serializeFunctions** {Boolean, default:false}, serialize functions on the document.
	 *  - **checkKeys** {Boolean, default:true}, allows for disabling of document key checking (WARNING OPENS YOU UP TO INJECTION ATTACKS)
	 *  - **fullResult** {Boolean, default:false}, returns the full result document (document returned will differ by server version)
	 *
	 * @param {Object} selector the query to select the document/documents to be updated
	 * @param {Object} document the fields/vals to be updated, or in the case of an upsert operation, inserted.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} [callback] must be provided if you performing an update with a writeconcern
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.update = function() { return core.update; }();
	
	/**
	 * The distinct command returns returns a list of distinct values for the given key across a collection.
	 *
	 * Options
	 *  - **readPreference** {String}, the preferred read preference, require('mongodb').ReadPreference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *
	 * @param {String} key key to run distinct against.
	 * @param {Object} [query] option query to narrow the returned objects.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from distinct or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.distinct = function() { return commands.distinct; }();
	
	/**
	 * Count number of matching documents in the db to a query.
	 *
	 * Options
	 *  - **skip** {Number}, The number of documents to skip for the count.
	 *  - **limit** {Number}, The limit of documents to count.
	 *  - **readPreference** {String}, the preferred read preference, require('mongodb').ReadPreference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *
	 * @param {Object} [query] query to filter by before performing count.
	 * @param {Object} [options] additional options during count.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the count method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.count = function() { return commands.count; }();
	
	/**
	 * Drop the collection
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the drop method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.drop = function drop(callback) {
	  this.db.dropCollection(this.collectionName, callback);
	};
	
	/**
	 * Find and update a document.
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **remove** {Boolean, default:false}, set to true to remove the object before returning.
	 *  - **upsert** {Boolean, default:false}, perform an upsert operation.
	 *  - **new** {Boolean, default:false}, set to true if you want to return the modified object rather than the original. Ignored for remove.
	 *
	 * @param {Object} query query object to locate the object to modify
	 * @param {Array}  sort - if multiple docs match, choose the first one in the specified sort order as the object to manipulate
	 * @param {Object} doc - the fields/vals to be updated
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the findAndModify method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.findAndModify = function() { return core.findAndModify; }();
	
	/**
	 * Find and remove a document
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *
	 * @param {Object} query query object to locate the object to modify
	 * @param {Array}  sort - if multiple docs match, choose the first one in the specified sort order as the object to manipulate
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the findAndRemove method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.findAndRemove = function() { return core.findAndRemove; }();
	
	/**
	 * Creates a cursor for a query that can be used to iterate over results from MongoDB
	 *
	 * Various argument possibilities
	 *  - callback?
	 *  - selector, callback?,
	 *  - selector, fields, callback?
	 *  - selector, options, callback?
	 *  - selector, fields, options, callback?
	 *  - selector, fields, skip, limit, callback?
	 *  - selector, fields, skip, limit, timeout, callback?
	 *
	 * Options
	 *  - **limit** {Number, default:0}, sets the limit of documents returned in the query.
	 *  - **sort** {Array | Object}, set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.
	 *  - **fields** {Object}, the fields to return in the query. Object of fields to include or exclude (not both), {'a':1}
	 *  - **skip** {Number, default:0}, set to skip N documents ahead in your query (useful for pagination).
	 *  - **hint** {Object}, tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}
	 *  - **explain** {Boolean, default:false}, explain the query instead of returning the data.
	 *  - **snapshot** {Boolean, default:false}, snapshot query.
	 *  - **timeout** {Boolean, default:true}, specify if the cursor can timeout.
	 *  - **tailable** {Boolean, default:false}, specify if the cursor is tailable.
	 *  - **tailableRetryInterval** {Number, default:100}, specify the miliseconds between getMores on tailable cursor.
	 *  - **numberOfRetries** {Number, default:5}, specify the number of times to retry the tailable cursor.
	 *  - **awaitdata** {Boolean, default:false} allow the cursor to wait for data, only applicable for tailable cursor.
	 *  - **oplogReplay** {Boolean, default:false} sets an internal flag, only applicable for tailable cursor.
	 *  - **exhaust** {Boolean, default:false} have the server send all the documents at once as getMore packets, not recommended.
	 *  - **batchSize** {Number, default:0}, set the batchSize for the getMoreCommand when iterating over the query results.
	 *  - **returnKey** {Boolean, default:false}, only return the index key.
	 *  - **maxScan** {Number}, Limit the number of items to scan.
	 *  - **min** {Number}, Set index bounds.
	 *  - **max** {Number}, Set index bounds.
	 *  - **showDiskLoc** {Boolean, default:false}, Show disk location of results.
	 *  - **comment** {String}, You can put a $comment field on a query to make looking in the profiler logs simpler.
	 *  - **raw** {Boolean, default:false}, Return all BSON documents as Raw Buffer documents.
	 *  - **readPreference** {String}, the preferred read preference, require('mongodb').ReadPreference ((ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **numberOfRetries** {Number, default:5}, if using awaidata specifies the number of times to retry on timeout.
	 *  - **partial** {Boolean, default:false}, specify if the cursor should return partial results when querying against a sharded system
	 *  - **maxTimeMS** {Number}, number of miliseconds to wait before aborting the query.
	 *
	 * @param {Object|ObjectID} query query object to locate the object to modify
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the find method or null if an error occured.
	 * @return {Cursor} returns a cursor to the query
	 * @api public
	 */
	Collection.prototype.find = function() { return query.find; }();
	
	/**
	 * Finds a single document based on the query
	 *
	 * Various argument possibilities
	 *  - callback?
	 *  - selector, callback?,
	 *  - selector, fields, callback?
	 *  - selector, options, callback?
	 *  - selector, fields, options, callback?
	 *  - selector, fields, skip, limit, callback?
	 *  - selector, fields, skip, limit, timeout, callback?
	 *
	 * Options
	 *  - **limit** {Number, default:0}, sets the limit of documents returned in the query.
	 *  - **sort** {Array | Object}, set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.
	 *  - **fields** {Object}, the fields to return in the query. Object of fields to include or exclude (not both), {'a':1}
	 *  - **skip** {Number, default:0}, set to skip N documents ahead in your query (useful for pagination).
	 *  - **hint** {Object}, tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}
	 *  - **explain** {Boolean, default:false}, explain the query instead of returning the data.
	 *  - **snapshot** {Boolean, default:false}, snapshot query.
	 *  - **timeout** {Boolean, default:false}, specify if the cursor can timeout.
	 *  - **tailable** {Boolean, default:false}, specify if the cursor is tailable.
	 *  - **batchSize** {Number, default:0}, set the batchSize for the getMoreCommand when iterating over the query results.
	 *  - **returnKey** {Boolean, default:false}, only return the index key.
	 *  - **maxScan** {Number}, Limit the number of items to scan.
	 *  - **min** {Number}, Set index bounds.
	 *  - **max** {Number}, Set index bounds.
	 *  - **showDiskLoc** {Boolean, default:false}, Show disk location of results.
	 *  - **comment** {String}, You can put a $comment field on a query to make looking in the profiler logs simpler.
	 *  - **raw** {Boolean, default:false}, Return all BSON documents as Raw Buffer documents.
	 *  - **readPreference** {String}, the preferred read preference, require('mongodb').ReadPreference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **partial** {Boolean, default:false}, specify if the cursor should return partial results when querying against a sharded system
	 *  - **maxTimeMS** {Number}, number of miliseconds to wait before aborting the query.
	 *
	 * @param {Object|ObjectID} query query object to locate the object to modify
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the findOne method or null if an error occured.
	 * @return {Cursor} returns a cursor to the query
	 * @api public
	 */
	Collection.prototype.findOne = function() { return query.findOne; }();
	
	/**
	 * Creates an index on the collection.
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **unique** {Boolean, default:false}, creates an unique index.
	 *  - **sparse** {Boolean, default:false}, creates a sparse index.
	 *  - **background** {Boolean, default:false}, creates the index in the background, yielding whenever possible.
	 *  - **min** {Number}, for geospatial indexes set the lower bound for the co-ordinates.
	 *  - **max** {Number}, for geospatial indexes set the high bound for the co-ordinates.
	 *  - **v** {Number}, specify the format version of the indexes.
	 *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
	 *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
	 *
	 * @param {Object} fieldOrSpec fieldOrSpec that defines the index.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the createIndex method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.createIndex = function() { return index.createIndex; }();
	
	/**
	 * Ensures that an index exists, if it does not it creates it
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **unique** {Boolean, default:false}, creates an unique index.
	 *  - **sparse** {Boolean, default:false}, creates a sparse index.
	 *  - **background** {Boolean, default:false}, creates the index in the background, yielding whenever possible.
	 *  - **min** {Number}, for geospatial indexes set the lower bound for the co-ordinates.
	 *  - **max** {Number}, for geospatial indexes set the high bound for the co-ordinates.
	 *  - **v** {Number}, specify the format version of the indexes.
	 *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
	 *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
	 *
	 * @param {Object} fieldOrSpec fieldOrSpec that defines the index.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the ensureIndex method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.ensureIndex = function() { return index.ensureIndex; }();
	
	/**
	 * Get the list of all indexes information for the collection.
	 *
	 * Options
	 *  - **batchSize**, {Number, 0} The batchSize for the returned command cursor or if pre 2.8 the systems batch collection
	 *
	 * @param {Object} [options] additional options during update.
	 * @return {Cursor}
	 */
	Collection.prototype.listIndexes = function() { return index.listIndexes; }();
	
	/**
	 * Retrieves this collections index info.
	 *
	 * Options
	 *  - **full** {Boolean, default:false}, returns the full raw index information.
	 *
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the indexInformation method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.indexInformation = function() { return index.indexInformation; }();
	
	/**
	 * Drops an index from this collection.
	 *
	 * @param {String} name
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the dropIndex method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.dropIndex = function dropIndex (name, options, callback) {
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }  
	  // Execute dropIndex command
	  this.db.dropIndex(this.collectionName, name, options, callback);
	};
	
	/**
	 * Drops all indexes from this collection.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the dropAllIndexes method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.dropAllIndexes = function() { return index.dropAllIndexes; }();
	
	/**
	 * Drops all indexes from this collection.
	 *
	 * @deprecated
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the dropIndexes method or null if an error occured.
	 * @return {null}
	 * @api private
	 */
	Collection.prototype.dropIndexes = function() { return Collection.prototype.dropAllIndexes; }();
	
	/**
	 * Reindex all indexes on the collection
	 * Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the reIndex method or null if an error occured.
	 * @return {null}
	 * @api public
	**/
	Collection.prototype.reIndex = function(options, callback) {
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }  
	  // Execute reIndex
	  this.db.reIndex(this.collectionName, options, callback);
	}
	
	/**
	 * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.
	 *
	 * Options
	 *  - **out** {Object}, sets the output target for the map reduce job. *{inline:1} | {replace:'collectionName'} | {merge:'collectionName'} | {reduce:'collectionName'}*
	 *  - **query** {Object}, query filter object.
	 *  - **sort** {Object}, sorts the input objects using this key. Useful for optimization, like sorting by the emit key for fewer reduces.
	 *  - **limit** {Number}, number of objects to return from collection.
	 *  - **keeptemp** {Boolean, default:false}, keep temporary data.
	 *  - **finalize** {Function | String}, finalize function.
	 *  - **scope** {Object}, can pass in variables that can be access from map/reduce/finalize.
	 *  - **jsMode** {Boolean, default:false}, it is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X.
	 *  - **verbose** {Boolean, default:false}, provide statistics on job execution time.
	 *  - **readPreference** {String, only for inline results}, the preferred read preference, require('mongodb').ReadPreference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *
	 * @param {Function|String} map the mapping function.
	 * @param {Function|String} reduce the reduce function.
	 * @param {Objects} [options] options for the map reduce job.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the mapReduce method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.mapReduce = function() { return aggregation.mapReduce; }();
	
	/**
	 * Run a group command across a collection
	 *
	 * Options
	 *  - **readPreference** {String}, the preferred read preference, require('mongodb').ReadPreference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *
	 * @param {Object|Array|Function|Code} keys an object, array or function expressing the keys to group by.
	 * @param {Object} condition an optional condition that must be true for a row to be considered.
	 * @param {Object} initial initial value of the aggregation counter object.
	 * @param {Function|Code} reduce the reduce function aggregates (reduces) the objects iterated
	 * @param {Function|Code} finalize an optional function to be run on each item in the result set just before the item is returned.
	 * @param {Boolean} command specify if you wish to run using the internal group command or using eval, default is true.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the group method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.group = function() { return aggregation.group; }();
	
	/**
	 * Returns the options of the collection.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the options method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.options = function() { return commands.options; }();
	
	/**
	 * Returns if the collection is a capped collection
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the isCapped method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.isCapped = function() { return commands.isCapped; }();
	
	/**
	 * Checks if one or more indexes exist on the collection
	 *
	 * @param {String|Array} indexNames check if one or more indexes exist on the collection.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the indexExists method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.indexExists = function() { return index.indexExists; }();
	
	/**
	 * Execute the geoNear command to search for items in the collection
	 *
	 * Options
	 *  - **num** {Number}, max number of results to return.
	 *  - **minDistance** {Number}, include results starting at minDistance from a point (2.6 or higher)
	 *  - **maxDistance** {Number}, include results up to maxDistance from the point.
	 *  - **distanceMultiplier** {Number}, include a value to multiply the distances with allowing for range conversions.
	 *  - **query** {Object}, filter the results by a query.
	 *  - **spherical** {Boolean, default:false}, perform query using a spherical model.
	 *  - **uniqueDocs** {Boolean, default:false}, the closest location in a document to the center of the search region will always be returned MongoDB > 2.X.
	 *  - **includeLocs** {Boolean, default:false}, include the location data fields in the top level of the results MongoDB > 2.X.
	 *  - **readPreference** {String}, the preferred read preference, require('mongodb').ReadPreference ((ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *
	 * @param {Number} x point to search on the x axis, ensure the indexes are ordered in the same order.
	 * @param {Number} y point to search on the y axis, ensure the indexes are ordered in the same order.
	 * @param {Objects} [options] options for the map reduce job.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the geoNear method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.geoNear = function() { return geo.geoNear; }();
	
	/**
	 * Execute a geo search using a geo haystack index on a collection.
	 *
	 * Options
	 *  - **maxDistance** {Number}, include results up to maxDistance from the point.
	 *  - **search** {Object}, filter the results by a query.
	 *  - **limit** {Number}, max number of results to return.
	 *  - **readPreference** {String}, the preferred read preference, require('mongodb').ReadPreference ((ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *
	 * @param {Number} x point to search on the x axis, ensure the indexes are ordered in the same order.
	 * @param {Number} y point to search on the y axis, ensure the indexes are ordered in the same order.
	 * @param {Objects} [options] options for the map reduce job.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the geoHaystackSearch method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.geoHaystackSearch = function() { return geo.geoHaystackSearch; }();
	
	/**
	 * Retrieve all the indexes on the collection.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the indexes method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.indexes = function indexes(callback) {
	  this.db.indexInformation(this.collectionName, {full:true}, callback);
	}
	
	/**
	 * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2
	 *
	 * Options
	 *  - **readPreference** {String}, the preferred read preference, require('mongodb').ReadPreference ((ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **cursor** {Object}, return the query as cursor, on 2.6 > it returns as a real cursor on pre 2.6 it returns as an emulated cursor.
	 *  - **cursor.batchSize** {Number}, the batchSize for the cursor
	 *  - **out** {String}, the collection name to where to write the results from the aggregation (MongoDB 2.6 or higher). Warning any existing collection will be overwritten.
	 *  - **explain** {Boolean, default:false}, explain returns the aggregation execution plan (requires mongodb 2.6 >).
	 *  - **allowDiskUse** {Boolean, default:false}, allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 >).
	 *  - **maxTimeMS** {Number}, maxTimeMS the maxTimeMS operator specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.
	 *
	 * @param {Array} array containing all the aggregation framework commands for the execution.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the aggregate method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.aggregate = function() { return aggregation.aggregate; }();
	
	/**
	 * Get all the collection statistics.
	 *
	 * Options
	 *  - **scale** {Number}, divide the returned sizes by scale value.
	 *  - **readPreference** {String}, the preferred read preference, require('mongodb').ReadPreference ((ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *
	 * @param {Objects} [options] options for the stats command.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the stats method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Collection.prototype.stats = function() { return commands.stats; }();
	
	/**
	 * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *
	 * @param {Objects} [options] options for the initializeUnorderedBatch 
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. The second argument will be a UnorderedBulkOperation object.
	 * @return {UnorderedBulkOperation}
	 * @api public
	 */
	Collection.prototype.initializeUnorderedBulkOp = function() { return unordered.initializeUnorderedBulkOp; }();
	
	/**
	 * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *
	 * @param {Objects} [options] options for the initializeOrderedBulkOp 
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. The second argument will be a OrderedBulkOperation object.
	 * @return {OrderedBulkOperation}
	 * @api public
	 */
	Collection.prototype.initializeOrderedBulkOp = function() { return ordered.initializeOrderedBulkOp; }();
	
	/**
	 * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are
	 * no ordering guarantees for returned results.
	 *
	 * Options
	 *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **batchSize** {Number, default:0}, set the batchSize for the getMoreCommand when iterating over the query results.
	 *  - **numCursors**, {Number, 1} the maximum number of parallel command cursors to return (the number of returned cursors will be in the range 1:numCursors)
	 *
	 * @param {Objects} [options] options for the initializeOrderedBulkOp 
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. The second argument will be an array of CommandCursor instances.
	 * @return {OrderedBulkOperation}
	 * @api public
	 */
	Collection.prototype.parallelCollectionScan = function() { return query.parallelCollectionScan; }();
	
	/**
	 * @ignore
	 */
	Object.defineProperty(Collection.prototype, "hint", {
	    enumerable: true
	  , get: function () {
	      return this.internalHint;
	    }
	  , set: function (v) {
	      this.internalHint = shared.normalizeHintField(v);
	    }
	});
	
	/**
	 * Expose.
	 */
	exports.Collection = Collection;


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	var Long = __webpack_require__(150).Long
	  , Readable = __webpack_require__(295).Readable || __webpack_require__(299).Readable
	  , GetMoreCommand = __webpack_require__(177).GetMoreCommand
	  , inherits = __webpack_require__(282).inherits;
	
	var CommandCursor = function(db, collection, command, options) {  
	  var self = this;
	  // Ensure empty options if no options passed
	  options = options || {};  
	  
	  // Set up
	  Readable.call(this, {objectMode: true});
	
	  // Default cursor id is 0
	  var cursorId = options.cursorId || Long.fromInt(0);
	  var zeroCursor = Long.fromInt(0);
	  var state = 'init';
	  var batchSize = options.batchSize || 0;
	
	  // Hardcode batch size
	  if(command && command.cursor) {
	    batchSize = command.cursor.batchSize || 0;
	  }
	
	  // BatchSize
	  var raw = options.raw || false;
	  var readPreference = options.readPreference || 'primary';
	
	  // Cursor namespace
	  this.ns = db.databaseName + "." + collection.collectionName
	
	  // Checkout a connection
	  var connection = db.serverConfig.checkoutReader(readPreference);
	  // MaxTimeMS
	  var maxTimeMS = options.maxTimeMS;
	  var transform = options.transform;
	
	  // Contains all the items
	  var items = options.items || null;
	
	  // Execute getmore
	  var getMore = function(callback) {
	    // Resolve more of the cursor using the getMore command
	    var getMoreCommand = new GetMoreCommand(db
	      , self.ns
	      , batchSize
	      , cursorId
	    );
	
	    // Set up options
	    var command_options = { connection:connection };
	
	    // Execute the getMore Command
	    db._executeQueryCommand(getMoreCommand, command_options, function(err, result) {
	      if(err) {
	        items = [];
	        state = 'closed';
	        return callback(err);
	      }
	
	      // Return all the documents
	      callback(null, result);
	    });    
	  }
	
	  var exhaustGetMore = function(callback) {
	    getMore(function(err, result) {
	      if(err) {
	        items = [];
	        state = 'closed';
	        return callback(err, null);
	      }
	
	      // Add the items
	      items = items.concat(result.documents);      
	
	      // Set the cursor id
	      cursorId = result.cursorId;
	      if(typeof cursorId == 'number') cursorId = Long.fromNumber(cursorId);
	      
	      // If the cursor is done
	      if(result.cursorId.equals(zeroCursor)) {
	        return callback(null, items);
	      } 
	
	      // Check the cursor id
	      exhaustGetMore(callback);
	    });
	  }
	
	  var exhaustGetMoreEach = function(callback) {
	    getMore(function(err, result) {
	      if(err) {
	        items = [];
	        state = 'closed';
	        return callback(err, null);
	      }
	
	      // Add the items
	      items = result.documents;
	
	      // Emit all the items in the first batch
	      while(items.length > 0) {
	        callback(null, items.shift());
	      }
	      
	      // Set the cursor id
	      cursorId = result.cursorId;
	      if(typeof cursorId == 'number') cursorId = Long.fromNumber(cursorId);
	
	      // If the cursor is done
	      if(result.cursorId.equals(zeroCursor)) {
	        state = "closed";
	        return callback(null, null);
	      } 
	      
	      // Check the cursor id
	      exhaustGetMoreEach(callback);
	    });
	  }
	
	  //
	  // Get all the elements
	  //
	  this.get = function(options, callback) {
	    var self = this;
	    if(typeof options == 'function') {
	      callback = options;
	      options = {};
	    }
	
	    // Set the connection to the passed in one if it's provided
	    connection = options.connection ? options.connection : connection;
	
	    // Command options
	    var _options = {connection:connection};
	    if(typeof maxTimeMS == 'number') _options.maxTimeMS = maxTimeMS;
	
	    // If we have a cursor Id already not equal to 0 we are just going to
	    // exhaust the cursor
	    if(cursorId.notEquals(zeroCursor)) {
	      // If no items set an empty array
	      items = items || [];
	      // Exhaust the cursor
	      return exhaustGetMore(callback);
	    }
	
	    // Execute the internal command first
	    db.command(command, _options, function(err, result) {
	      if(err) {
	        state = 'closed';
	        return callback(err, null);
	      }
	
	      if(result.cursor && typeof result.cursor.id == 'number') {
	        // Retrieve the cursor id
	        cursorId = result.cursor.id;
	        self.ns = result.cursor.ns;
	        if(typeof cursorId == 'number') cursorId = Long.fromNumber(cursorId);
	
	        // Validate cursorId
	        if(cursorId.equals(zeroCursor)) {
	          var docs = typeof transform == 'function' ? transform(result.cursor.firstBatch) : result.cursor.firstBatch;
	          return callback(null, docs);
	        };
	
	        // Add to the items
	        items = result.cursor.firstBatch;
	      } else {
	        cursorId = zeroCursor;
	        var docs = typeof transform == 'function' ? transform(items) : items;
	        items = [];
	        return callback(null, items);
	      }
	
	      // Execute the getMore
	      exhaustGetMore(callback);
	    });
	  }
	
	  this.toArray = this.get;
	
	  //
	  // Iterate over all the items
	  //
	  this.each = function(options, callback) {
	    var self = this;
	    if(typeof options == 'function') {
	      callback = options;
	      options = {};
	    }
	
	    // If it's a closed cursor return error
	    if(this.isClosed()) return callback(new Error("cursor is closed"));
	    // Set the connection to the passed in one if it's provided
	    connection = options.connection ? options.connection : connection;
	  
	    // Command options
	    var _options = {connection:connection};
	    if(typeof maxTimeMS == 'number') _options.maxTimeMS = maxTimeMS;
	
	    // If we have a cursor Id already not equal to 0 we are just going to
	    // exhaust the cursor
	    if(cursorId.notEquals(zeroCursor)) {
	      // If no items set an empty array
	      items = items || [];
	
	      // Emit all the items in the first batch
	      while(items.length > 0) {
	        callback(null, items.shift());
	      }
	
	      // Exhaust the cursor
	      return exhaustGetMoreEach(callback);
	    }
	
	    // Execute the internal command first
	    db.command(command, _options, function(err, result) {
	      if(err) {
	        state = 'closed';
	        return callback(err, null);
	      }
	
	      // Get all the items
	      items = result.cursor.firstBatch;
	
	      // Emit all the items in the first batch
	      while(items.length > 0) {
	        callback(null, items.shift());
	      }
	
	      // Retrieve the cursor id
	      cursorId = result.cursor.id;
	      self.ns = result.cursor.ns;
	      if(typeof cursorId == 'number') cursorId = Long.fromNumber(cursorId);
	
	      // If no cursor we just finish up the current batch of items
	      if(cursorId.equals(zeroCursor)) {
	        state = 'closed';        
	        return callback(null, null);
	      }
	
	      // Emit each until no more getMore's
	      exhaustGetMoreEach(callback);
	    });
	  }
	
	  //
	  // Get the next object
	  //
	  this.next = function(options, callback) {
	    var self = this;
	    if(typeof options == 'function') {
	      callback = options;
	      options = {};
	    }
	
	    // If it's a closed cursor return error
	    if(this.isClosed()) return callback(new Error("cursor is closed"));
	
	    // Set the connection to the passed in one if it's provided
	    connection = options.connection ? options.connection : connection;
	  
	    // Command options
	    var _options = {connection:connection};
	    if(typeof maxTimeMS == 'number') _options.maxTimeMS = maxTimeMS;
	
	    // If we have a cursor Id already not equal to 0 we are just going to
	    // going to bypass the command execution
	    if(cursorId.notEquals(zeroCursor)) {
	      items = items || [];
	    }    
	
	    // Execute the internal command first
	    if(!items) {
	      db.command(command, _options, function(err, result) {
	        if(err) {
	          state = 'closed';
	          return callback(err, null);
	        }
	
	        // Retrieve the cursor id
	        cursorId = result.cursor.id;
	        self.ns = result.cursor.ns;
	        if(typeof cursorId == 'number') cursorId = Long.fromNumber(cursorId);
	        // Get the first batch results
	        items = result.cursor.firstBatch;
	        // We have items return the first one
	        if(items.length > 0) {
	          callback(null, items.shift());
	        } else {
	          state = 'closed';
	          callback(null, null);
	        }
	      });
	    } else if(items.length > 0) {
	      callback(null, items.shift());
	    } else if(items.length == 0 && cursorId.equals(zeroCursor)) {
	      state = 'closed';
	      callback(null, null);
	    } else {
	      // Execute a getMore
	      getMore(function(err, result) {
	        if(err) {
	          state = 'closed';
	          return callback(err, null);
	        }
	
	        // Set the cursor id
	        cursorId = result.cursorId;
	        if(typeof cursorId == 'number') cursorId = Long.fromNumber(cursorId);
	
	        // Add the items
	        items = items.concat(result.documents);
	        // If no more items
	        if(items.length == 0) {
	          state = 'closed';
	          return callback(null, null);
	        }
	
	        // Return the item
	        return callback(null, items.shift());
	      })
	    }
	  }
	
	  // Validate if the cursor is closed
	  this.isClosed = function() {
	    return state == 'closed';
	  }
	
	  // Allow us to set the MaxTimeMS
	  this.maxTimeMS = function(_maxTimeMS) {
	    maxTimeMS = _maxTimeMS;
	  }
	
	  // Close the cursor sending a kill cursor command if needed
	  this.close = function(callback) {
	    // Close the cursor if not needed
	    if(cursorId instanceof Long && cursorId.greaterThan(Long.fromInt(0))) {
	      try {
	        var command = new KillCursorCommand(this.db, [cursorId]);
	        // Added an empty callback to ensure we don't throw any null exceptions
	        db._executeQueryCommand(command, {connection:connection});
	      } catch(err) {}
	    }
	
	    // Null out the connection
	    connection = null;
	    // Reset cursor id
	    cursorId = Long.fromInt(0);
	    // Set to closed status
	    state = 'closed';
	    // Clear out all the items
	    items = null;
	
	    if(callback) {
	      callback(null, null);
	    }    
	  }
	
	  //
	  // Stream method
	  //
	  this._read = function(n) {
	    var self = this;
	    // Read the next command cursor doc
	    self.next(function(err, result) {
	      if(err) {
	        self.emit('error', err);
	        return self.push(null);
	      }
	
	      self.push(result);
	    });
	  }
	}
	
	// Inherit from Readable
	if(Readable != null) {
	  inherits(CommandCursor, Readable);  
	}
	
	exports.CommandCursor = CommandCursor;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	  Base object used for common functionality
	**/
	var BaseCommand = exports.BaseCommand = function BaseCommand() {
	};
	
	var id = 1;
	BaseCommand.prototype.getRequestId = function getRequestId() {
	  if (!this.requestId) this.requestId = id++;
	  return this.requestId;
	};
	
	BaseCommand.prototype.setMongosReadPreference = function setMongosReadPreference(readPreference, tags) {}
	
	BaseCommand.prototype.updateRequestId = function() {
	  this.requestId = id++;
	  return this.requestId;
	};
	
	// OpCodes
	BaseCommand.OP_REPLY = 1;
	BaseCommand.OP_MSG = 1000;
	BaseCommand.OP_UPDATE = 2001;
	BaseCommand.OP_INSERT =	2002;
	BaseCommand.OP_GET_BY_OID = 2003;
	BaseCommand.OP_QUERY = 2004;
	BaseCommand.OP_GET_MORE = 2005;
	BaseCommand.OP_DELETE =	2006;
	BaseCommand.OP_KILL_CURSORS =	2007;

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var QueryCommand = __webpack_require__(180).QueryCommand,
	  InsertCommand = __webpack_require__(178).InsertCommand,
	  inherits = __webpack_require__(282).inherits,
	  utils = __webpack_require__(207),
	  crypto = __webpack_require__(296);
	
	/**
	  Db Command
	**/
	var DbCommand = exports.DbCommand = function(dbInstance, collectionName, queryOptions, numberToSkip, numberToReturn, query, returnFieldSelector, options) {
	  QueryCommand.call(this);
	  this.collectionName = collectionName;
	  this.queryOptions = queryOptions;
	  this.numberToSkip = numberToSkip;
	  this.numberToReturn = numberToReturn;
	  this.query = query;
	  this.returnFieldSelector = returnFieldSelector;
	  this.db = dbInstance;
	
	  // Set the slave ok bit
	  if(this.db && this.db.slaveOk) {
	    this.queryOptions |= QueryCommand.OPTS_SLAVE;
	  }
	
	  // Make sure we don't get a null exception
	  options = options == null ? {} : options;
	
	  // Allow for overriding the BSON checkKeys function
	  this.checkKeys = typeof options['checkKeys'] == 'boolean' ? options["checkKeys"] : true;
	
	  // Let us defined on a command basis if we want functions to be serialized or not
	  if(options['serializeFunctions'] != null && options['serializeFunctions']) {
	    this.serializeFunctions = true;
	  }
	};
	
	inherits(DbCommand, QueryCommand);
	
	// Constants
	DbCommand.SYSTEM_NAMESPACE_COLLECTION = "system.namespaces";
	DbCommand.SYSTEM_INDEX_COLLECTION = "system.indexes";
	DbCommand.SYSTEM_PROFILE_COLLECTION = "system.profile";
	DbCommand.SYSTEM_USER_COLLECTION = "system.users";
	DbCommand.SYSTEM_COMMAND_COLLECTION = "$cmd";
	DbCommand.SYSTEM_JS_COLLECTION = "system.js";
	
	// New commands
	DbCommand.NcreateIsMasterCommand = function(db, databaseName) {
	  return new DbCommand(db, databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'ismaster':1}, null);
	};
	
	// Provide constructors for different db commands
	DbCommand.createIsMasterCommand = function(db) {
	  return new DbCommand(db, db.databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'ismaster':1}, null);
	};
	
	DbCommand.createGetLastErrorCommand = function(options, db) {
	  if (typeof db === 'undefined') {
	    db =  options;
	    options = {};
	  }
	  // Final command
	  var command = {'getlasterror':1};
	  // If we have an options Object let's merge in the fields (fsync/wtimeout/w)
	  if('object' === typeof options) {
	    for(var name in options) {
	      command[name] = options[name]
	    }
	  }
	
	  // Special case for w == 1, remove the w
	  if(1 == command.w) {
	    delete command.w;
	  }
	
	  // Execute command
	  return new DbCommand(db, db.databaseName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command, null);
	};
	
	DbCommand.createGetLastStatusCommand = DbCommand.createGetLastErrorCommand;
	
	DbCommand.createDbCommand = function(db, command_hash, options, auth_db) {
	  var db_name = (auth_db ? auth_db : db.databaseName) + "." + DbCommand.SYSTEM_COMMAND_COLLECTION;
	  options = options == null ? {checkKeys: false} : options;
	  return new DbCommand(db, db_name, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command_hash, null, options);
	};
	
	DbCommand.createAdminDbCommand = function(db, command_hash) {
	  return new DbCommand(db, "admin." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command_hash, null);
	};
	
	DbCommand.createAdminDbCommandSlaveOk = function(db, command_hash) {
	  return new DbCommand(db, "admin." + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT | QueryCommand.OPTS_SLAVE, 0, -1, command_hash, null);
	};
	
	DbCommand.createDbSlaveOkCommand = function(db, command_hash, options) {
	  options = options == null ? {checkKeys: false} : options;
	  var dbName = options.dbName ? options.dbName : db.databaseName;
	  var flags = options.slaveOk ? QueryCommand.OPTS_NO_CURSOR_TIMEOUT | QueryCommand.OPTS_SLAVE : QueryCommand.OPTS_NO_CURSOR_TIMEOUT;
	  return new DbCommand(db, dbName + "." + DbCommand.SYSTEM_COMMAND_COLLECTION, flags, 0, -1, command_hash, null, options);
	};


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var BaseCommand = __webpack_require__(174).BaseCommand,
	  inherits = __webpack_require__(282).inherits;
	
	/**
	  Insert Document Command
	**/
	var DeleteCommand = exports.DeleteCommand = function(db, collectionName, selector, flags) {
	  BaseCommand.call(this);
	
	  // Validate correctness off the selector
	  var object = selector;
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;        
	    if(object_size != object.length)  {
	      var error = new Error("delete raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }
	  
	  this.flags = flags;
	  this.collectionName = collectionName;
	  this.selector = selector;
	  this.db = db;
	};
	
	inherits(DeleteCommand, BaseCommand);
	
	DeleteCommand.OP_DELETE =	2006;
	
	/*
	struct {
	    MsgHeader header;                 // standard message header
	    int32     ZERO;                   // 0 - reserved for future use
	    cstring   fullCollectionName;     // "dbname.collectionname"
	    int32     ZERO;                   // 0 - reserved for future use
	    mongo.BSON      selector;               // query object.  See below for details.
	}
	*/
	DeleteCommand.prototype.toBinary = function(bsonSettings) {
	  // Validate that we are not passing 0x00 in the colletion name
	  if(!!~this.collectionName.indexOf("\x00")) {
	    throw new Error("namespace cannot contain a null character");
	  }
	
	  // Calculate total length of the document
	  var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + this.db.bson.calculateObjectSize(this.selector, false, true) + (4 * 4);
	  
	  // Enforce maximum bson size
	  if(!bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxBsonSize) 
	    throw new Error("Document exceeds maximum allowed bson size of " + bsonSettings.maxBsonSize + " bytes");
	
	  if(bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxMessageSizeBytes) 
	    throw new Error("Command exceeds maximum message size of " + bsonSettings.maxMessageSizeBytes + " bytes");
	
	  // Let's build the single pass buffer command
	  var _index = 0;
	  var _command = new Buffer(totalLengthOfCommand);
	  // Write the header information to the buffer
	  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;     
	  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;
	  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;
	  _command[_index] = totalLengthOfCommand & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write the request ID
	  _command[_index + 3] = (this.requestId >> 24) & 0xff;     
	  _command[_index + 2] = (this.requestId >> 16) & 0xff;
	  _command[_index + 1] = (this.requestId >> 8) & 0xff;
	  _command[_index] = this.requestId & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  // Write the op_code for the command
	  _command[_index + 3] = (DeleteCommand.OP_DELETE >> 24) & 0xff;     
	  _command[_index + 2] = (DeleteCommand.OP_DELETE >> 16) & 0xff;
	  _command[_index + 1] = (DeleteCommand.OP_DELETE >> 8) & 0xff;
	  _command[_index] = DeleteCommand.OP_DELETE & 0xff;
	  // Adjust index
	  _index = _index + 4;
	
	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	
	  // Write the collection name to the command
	  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;
	  _command[_index - 1] = 0;    
	
	  // Write the flags
	  _command[_index + 3] = (this.flags >> 24) & 0xff;     
	  _command[_index + 2] = (this.flags >> 16) & 0xff;
	  _command[_index + 1] = (this.flags >> 8) & 0xff;
	  _command[_index] = this.flags & 0xff;
	  // Adjust index
	  _index = _index + 4;
	
	  // Document binary length
	  var documentLength = 0
	
	  // Serialize the selector
	  // If we are passing a raw buffer, do minimal validation
	  if(Buffer.isBuffer(this.selector)) {
	    documentLength = this.selector.length;
	    // Copy the data into the current buffer
	    this.selector.copy(_command, _index);
	  } else {
	    documentLength = this.db.bson.serializeWithBufferAndIndex(this.selector, false, _command, _index) - _index + 1;
	  }
	  
	  // Write the length to the document
	  _command[_index + 3] = (documentLength >> 24) & 0xff;     
	  _command[_index + 2] = (documentLength >> 16) & 0xff;
	  _command[_index + 1] = (documentLength >> 8) & 0xff;
	  _command[_index] = documentLength & 0xff;
	  // Update index in buffer
	  _index = _index + documentLength;
	  // Add terminating 0 for the object
	  _command[_index - 1] = 0;      
	  return _command;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var BaseCommand = __webpack_require__(174).BaseCommand,
	  inherits = __webpack_require__(282).inherits,
	  binaryutils = __webpack_require__(207);
	
	/**
	  Get More Document Command
	**/
	var GetMoreCommand = exports.GetMoreCommand = function(db, collectionName, numberToReturn, cursorId) {
	  BaseCommand.call(this);
	
	  this.collectionName = collectionName;
	  this.numberToReturn = numberToReturn;
	  this.cursorId = cursorId;
	  this.db = db;
	};
	
	inherits(GetMoreCommand, BaseCommand);
	
	GetMoreCommand.OP_GET_MORE = 2005;
	
	GetMoreCommand.prototype.toBinary = function() {
	  // Validate that we are not passing 0x00 in the colletion name
	  if(!!~this.collectionName.indexOf("\x00")) {
	    throw new Error("namespace cannot contain a null character");
	  }
	
	  // Calculate total length of the document
	  var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + 8 + (4 * 4);
	  // Let's build the single pass buffer command
	  var _index = 0;
	  var _command = new Buffer(totalLengthOfCommand);
	  // Write the header information to the buffer
	  _command[_index++] = totalLengthOfCommand & 0xff;
	  _command[_index++] = (totalLengthOfCommand >> 8) & 0xff;
	  _command[_index++] = (totalLengthOfCommand >> 16) & 0xff;
	  _command[_index++] = (totalLengthOfCommand >> 24) & 0xff;     
	
	  // Write the request ID
	  _command[_index++] = this.requestId & 0xff;
	  _command[_index++] = (this.requestId >> 8) & 0xff;
	  _command[_index++] = (this.requestId >> 16) & 0xff;
	  _command[_index++] = (this.requestId >> 24) & 0xff;     
	
	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	
	  // Write the op_code for the command
	  _command[_index++] = GetMoreCommand.OP_GET_MORE & 0xff;
	  _command[_index++] = (GetMoreCommand.OP_GET_MORE >> 8) & 0xff;
	  _command[_index++] = (GetMoreCommand.OP_GET_MORE >> 16) & 0xff;
	  _command[_index++] = (GetMoreCommand.OP_GET_MORE >> 24) & 0xff;     
	
	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	
	  // Write the collection name to the command
	  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;
	  _command[_index - 1] = 0;    
	
	  // Number of documents to return
	  _command[_index++] = this.numberToReturn & 0xff;
	  _command[_index++] = (this.numberToReturn >> 8) & 0xff;
	  _command[_index++] = (this.numberToReturn >> 16) & 0xff;
	  _command[_index++] = (this.numberToReturn >> 24) & 0xff;     
	  
	  // Encode the cursor id
	  var low_bits = this.cursorId.getLowBits();
	  // Encode low bits
	  _command[_index++] = low_bits & 0xff;
	  _command[_index++] = (low_bits >> 8) & 0xff;
	  _command[_index++] = (low_bits >> 16) & 0xff;
	  _command[_index++] = (low_bits >> 24) & 0xff;     
	  
	  var high_bits = this.cursorId.getHighBits();
	  // Encode high bits
	  _command[_index++] = high_bits & 0xff;
	  _command[_index++] = (high_bits >> 8) & 0xff;
	  _command[_index++] = (high_bits >> 16) & 0xff;
	  _command[_index++] = (high_bits >> 24) & 0xff;     
	  // Return command
	  return _command;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var BaseCommand = __webpack_require__(174).BaseCommand,
	  inherits = __webpack_require__(282).inherits;
	
	/**
	  Insert Document Command
	**/
	var InsertCommand = exports.InsertCommand = function(db, collectionName, checkKeys, options) {
	  BaseCommand.call(this);
	
	  this.collectionName = collectionName;
	  this.documents = [];
	  this.checkKeys = checkKeys == null ? true : checkKeys;
	  this.db = db;
	  this.flags = 0;
	  this.serializeFunctions = false;
	
	  // Ensure valid options hash
	  options = options == null ? {} : options;
	
	  // Check if we have keepGoing set -> set flag if it's the case
	  if(options['keepGoing'] != null && options['keepGoing']) {
	    // This will finish inserting all non-index violating documents even if it returns an error
	    this.flags = 1;
	  }
	
	  // Check if we have keepGoing set -> set flag if it's the case
	  if(options['continueOnError'] != null && options['continueOnError']) {
	    // This will finish inserting all non-index violating documents even if it returns an error
	    this.flags = 1;
	  }
	
	  // Let us defined on a command basis if we want functions to be serialized or not
	  if(options['serializeFunctions'] != null && options['serializeFunctions']) {
	    this.serializeFunctions = true;
	  }
	};
	
	inherits(InsertCommand, BaseCommand);
	
	// OpCodes
	InsertCommand.OP_INSERT =	2002;
	
	InsertCommand.prototype.add = function(document) {
	  if(Buffer.isBuffer(document)) {
	    var object_size = document[0] | document[1] << 8 | document[2] << 16 | document[3] << 24;
	    if(object_size != document.length)  {
	      var error = new Error("insert raw message size does not match message header size [" + document.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }
	
	  this.documents.push(document);
	  return this;
	};
	
	/*
	struct {
	    MsgHeader header;             // standard message header
	    int32     ZERO;               // 0 - reserved for future use
	    cstring   fullCollectionName; // "dbname.collectionname"
	    BSON[]    documents;          // one or more documents to insert into the collection
	}
	*/
	InsertCommand.prototype.toBinary = function(bsonSettings) {
	  // Validate that we are not passing 0x00 in the colletion name
	  if(!!~this.collectionName.indexOf("\x00")) {
	    throw new Error("namespace cannot contain a null character");
	  }
	
	  // Calculate total length of the document
	  var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + (4 * 4);
	  // var docLength = 0
	  for(var i = 0; i < this.documents.length; i++) {
	    if(Buffer.isBuffer(this.documents[i])) {
	      totalLengthOfCommand += this.documents[i].length;
	    } else {
	      // Calculate size of document
	      totalLengthOfCommand += this.db.bson.calculateObjectSize(this.documents[i], this.serializeFunctions, true);
	    }
	  }
	
	  // Enforce maximum bson size
	  if(!bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxBsonSize) 
	    throw new Error("Document exceeds maximum allowed bson size of " + bsonSettings.maxBsonSize + " bytes");
	
	  if(bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxMessageSizeBytes) 
	    throw new Error("Command exceeds maximum message size of " + bsonSettings.maxMessageSizeBytes + " bytes");
	
	  // Let's build the single pass buffer command
	  var _index = 0;
	  var _command = new Buffer(totalLengthOfCommand);
	  // Write the header information to the buffer
	  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;
	  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;
	  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;
	  _command[_index] = totalLengthOfCommand & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write the request ID
	  _command[_index + 3] = (this.requestId >> 24) & 0xff;
	  _command[_index + 2] = (this.requestId >> 16) & 0xff;
	  _command[_index + 1] = (this.requestId >> 8) & 0xff;
	  _command[_index] = this.requestId & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  // Write the op_code for the command
	  _command[_index + 3] = (InsertCommand.OP_INSERT >> 24) & 0xff;
	  _command[_index + 2] = (InsertCommand.OP_INSERT >> 16) & 0xff;
	  _command[_index + 1] = (InsertCommand.OP_INSERT >> 8) & 0xff;
	  _command[_index] = InsertCommand.OP_INSERT & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write flags if any
	  _command[_index + 3] = (this.flags >> 24) & 0xff;
	  _command[_index + 2] = (this.flags >> 16) & 0xff;
	  _command[_index + 1] = (this.flags >> 8) & 0xff;
	  _command[_index] = this.flags & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write the collection name to the command
	  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;
	  _command[_index - 1] = 0;
	
	  // Write all the bson documents to the buffer at the index offset
	  for(var i = 0; i < this.documents.length; i++) {
	    // Document binary length
	    var documentLength = 0
	    var object = this.documents[i];
	
	    // Serialize the selector
	    // If we are passing a raw buffer, do minimal validation
	    if(Buffer.isBuffer(object)) {
	      documentLength = object.length;
	      // Copy the data into the current buffer
	      object.copy(_command, _index);
	    } else {
	      // Serialize the document straight to the buffer
	      documentLength = this.db.bson.serializeWithBufferAndIndex(object, this.checkKeys, _command, _index, this.serializeFunctions) - _index + 1;
	    }
	
	    // Write the length to the document
	    _command[_index + 3] = (documentLength >> 24) & 0xff;
	    _command[_index + 2] = (documentLength >> 16) & 0xff;
	    _command[_index + 1] = (documentLength >> 8) & 0xff;
	    _command[_index] = documentLength & 0xff;
	    // Update index in buffer
	    _index = _index + documentLength;
	    // Add terminating 0 for the object
	    _command[_index - 1] = 0;
	  }
	
	  return _command;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var BaseCommand = __webpack_require__(174).BaseCommand,
	  inherits = __webpack_require__(282).inherits,
	  binaryutils = __webpack_require__(207);
	
	/**
	  Insert Document Command
	**/
	var KillCursorCommand = exports.KillCursorCommand = function(db, cursorIds) {
	  BaseCommand.call(this);
	
	  this.cursorIds = cursorIds;
	  this.db = db;
	};
	
	inherits(KillCursorCommand, BaseCommand);
	
	KillCursorCommand.OP_KILL_CURSORS = 2007;
	
	/*
	struct {
	    MsgHeader header;                 // standard message header
	    int32     ZERO;                   // 0 - reserved for future use
	    int32     numberOfCursorIDs;      // number of cursorIDs in message
	    int64[]   cursorIDs;                // array of cursorIDs to close
	}
	*/
	KillCursorCommand.prototype.toBinary = function() {
	  // Calculate total length of the document
	  var totalLengthOfCommand = 4 + 4 + (4 * 4) + (this.cursorIds.length * 8);
	  // Let's build the single pass buffer command
	  var _index = 0;
	  var _command = new Buffer(totalLengthOfCommand);
	  // Write the header information to the buffer
	  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;     
	  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;
	  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;
	  _command[_index] = totalLengthOfCommand & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write the request ID
	  _command[_index + 3] = (this.requestId >> 24) & 0xff;     
	  _command[_index + 2] = (this.requestId >> 16) & 0xff;
	  _command[_index + 1] = (this.requestId >> 8) & 0xff;
	  _command[_index] = this.requestId & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  // Write the op_code for the command
	  _command[_index + 3] = (KillCursorCommand.OP_KILL_CURSORS >> 24) & 0xff;     
	  _command[_index + 2] = (KillCursorCommand.OP_KILL_CURSORS >> 16) & 0xff;
	  _command[_index + 1] = (KillCursorCommand.OP_KILL_CURSORS >> 8) & 0xff;
	  _command[_index] = KillCursorCommand.OP_KILL_CURSORS & 0xff;
	  // Adjust index
	  _index = _index + 4;
	
	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	
	  // Number of cursors to kill
	  var numberOfCursors = this.cursorIds.length;
	  _command[_index + 3] = (numberOfCursors >> 24) & 0xff;     
	  _command[_index + 2] = (numberOfCursors >> 16) & 0xff;
	  _command[_index + 1] = (numberOfCursors >> 8) & 0xff;
	  _command[_index] = numberOfCursors & 0xff;
	  // Adjust index
	  _index = _index + 4;
	
	  // Encode all the cursors
	  for(var i = 0; i < this.cursorIds.length; i++) {
	    // Encode the cursor id
	    var low_bits = this.cursorIds[i].getLowBits();
	    // Encode low bits
	    _command[_index + 3] = (low_bits >> 24) & 0xff;     
	    _command[_index + 2] = (low_bits >> 16) & 0xff;
	    _command[_index + 1] = (low_bits >> 8) & 0xff;
	    _command[_index] = low_bits & 0xff;
	    // Adjust index
	    _index = _index + 4;
	      
	    var high_bits = this.cursorIds[i].getHighBits();
	    // Encode high bits
	    _command[_index + 3] = (high_bits >> 24) & 0xff;     
	    _command[_index + 2] = (high_bits >> 16) & 0xff;
	    _command[_index + 1] = (high_bits >> 8) & 0xff;
	    _command[_index] = high_bits & 0xff;
	    // Adjust index
	    _index = _index + 4;
	  }
	  
	  return _command;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var BaseCommand = __webpack_require__(174).BaseCommand,
	  inherits = __webpack_require__(282).inherits;
	
	/**
	  Insert Document Command
	**/
	var QueryCommand = exports.QueryCommand = function(db, collectionName, queryOptions, numberToSkip, numberToReturn, query, returnFieldSelector, options) {
	  BaseCommand.call(this);
	
	  // Validate correctness off the selector
	  var object = query,
	    object_size;
	  if(Buffer.isBuffer(object)) {
	    object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;
	    if(object_size != object.length) {
	      var error = new Error("query selector raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }
	
	  object = returnFieldSelector;
	  if(Buffer.isBuffer(object)) {
	    object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;
	    if(object_size != object.length) {
	      var error = new Error("query fields raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }
	
	  // Make sure we don't get a null exception
	  options = options == null ? {} : options;
	  // Set up options
	  this.collectionName = collectionName;
	  this.queryOptions = queryOptions;
	  this.numberToSkip = numberToSkip;
	  this.numberToReturn = numberToReturn;
	
	  // Ensure we have no null query
	  query = query == null ? {} : query;
	  // Wrap query in the $query parameter so we can add read preferences for mongos
	  this.query = query;
	  this.returnFieldSelector = returnFieldSelector;
	  this.db = db;
	
	  // Force the slave ok flag to be set if we are not using primary read preference
	  if(this.db && this.db.slaveOk) {
	    this.queryOptions |= QueryCommand.OPTS_SLAVE;
	  }
	
	  // If checkKeys set
	  this.checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : false;
	
	  // Let us defined on a command basis if we want functions to be serialized or not
	  if(options['serializeFunctions'] != null && options['serializeFunctions']) {
	    this.serializeFunctions = true;
	  }
	};
	
	inherits(QueryCommand, BaseCommand);
	
	QueryCommand.OP_QUERY = 2004;
	
	/*
	 * Adds the read prefrence to the current command
	 */
	QueryCommand.prototype.setMongosReadPreference = function(readPreference, tags) {
	  // No read preference specified
	  if(readPreference == false) return;
	  // If we have readPreference set to true set to secondary prefered
	  if(readPreference == true) {
	    readPreference = 'secondaryPreferred';
	  } else if(readPreference == 'false') {
	    readPreference = 'primary';
	  }
	
	  // If we have primary read preference ignore it
	  if(readPreference == 'primary' 
	    || readPreference.mode == 'primary') return;
	
	  // Force the slave ok flag to be set if we are not using primary read preference
	  if(readPreference != false && readPreference != 'primary') {
	    this.queryOptions |= QueryCommand.OPTS_SLAVE;
	  }
	
	  // Backward compatibility, ensure $query only set on read preference so 1.8.X works
	  if((readPreference != null || tags != null) && this.query['$query'] == null) {
	    this.query = {'$query': this.query};
	  }
	
	  // If we have no readPreference set and no tags, check if the slaveOk bit is set
	  if(readPreference == null && tags == null) {
	    // If we have a slaveOk bit set the read preference for MongoS
	    if(this.queryOptions & QueryCommand.OPTS_SLAVE) {
	      this.query['$readPreference'] = {mode: 'secondary'}
	    } else {
	      this.query['$readPreference'] = {mode: 'primary'}
	    }
	  }
	
	  // Build read preference object
	  if(typeof readPreference == 'object' && readPreference['_type'] == 'ReadPreference') {
	    this.query['$readPreference'] = readPreference.toObject();
	  } else if(readPreference != null) {
	    // Add the read preference
	    this.query['$readPreference'] = {mode: readPreference};
	
	    // If we have tags let's add them
	    if(tags != null) {
	      this.query['$readPreference']['tags'] = tags;
	    }
	  }
	}
	
	/*
	struct {
	    MsgHeader header;                 // standard message header
	    int32     opts;                   // query options.  See below for details.
	    cstring   fullCollectionName;     // "dbname.collectionname"
	    int32     numberToSkip;           // number of documents to skip when returning results
	    int32     numberToReturn;         // number of documents to return in the first OP_REPLY
	    BSON      query ;                 // query object.  See below for details.
	  [ BSON      returnFieldSelector; ]  // OPTIONAL : selector indicating the fields to return.  See below for details.
	}
	*/
	QueryCommand.prototype.toBinary = function(bsonSettings) {
	  // Validate that we are not passing 0x00 in the colletion name
	  if(!!~this.collectionName.indexOf("\x00")) {
	    throw new Error("namespace cannot contain a null character");
	  }
	
	  // Total length of the command
	  var totalLengthOfCommand = 0;
	  // Calculate total length of the document
	  if(Buffer.isBuffer(this.query)) {
	    totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + 4 + this.query.length + (4 * 4);
	  } else {
	    totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + 4 + this.db.bson.calculateObjectSize(this.query, this.serializeFunctions, true) + (4 * 4);
	  }
	
	  // Calculate extra fields size
	  if(this.returnFieldSelector != null && !(Buffer.isBuffer(this.returnFieldSelector)))  {
	    if(Object.keys(this.returnFieldSelector).length > 0) {
	      totalLengthOfCommand += this.db.bson.calculateObjectSize(this.returnFieldSelector, this.serializeFunctions, true);
	    }
	  } else if(Buffer.isBuffer(this.returnFieldSelector)) {
	    totalLengthOfCommand += this.returnFieldSelector.length;
	  }
	
	  // Enforce maximum bson size
	  if(!bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxBsonSize) 
	    throw new Error("Document exceeds maximum allowed bson size of " + bsonSettings.maxBsonSize + " bytes");
	
	  if(bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxMessageSizeBytes) 
	    throw new Error("Command exceeds maximum message size of " + bsonSettings.maxMessageSizeBytes + " bytes");
	
	  // Let's build the single pass buffer command
	  var _index = 0;
	  var _command = new Buffer(totalLengthOfCommand);
	  // Write the header information to the buffer
	  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;
	  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;
	  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;
	  _command[_index] = totalLengthOfCommand & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write the request ID
	  _command[_index + 3] = (this.requestId >> 24) & 0xff;
	  _command[_index + 2] = (this.requestId >> 16) & 0xff;
	  _command[_index + 1] = (this.requestId >> 8) & 0xff;
	  _command[_index] = this.requestId & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  // Write the op_code for the command
	  _command[_index + 3] = (QueryCommand.OP_QUERY >> 24) & 0xff;
	  _command[_index + 2] = (QueryCommand.OP_QUERY >> 16) & 0xff;
	  _command[_index + 1] = (QueryCommand.OP_QUERY >> 8) & 0xff;
	  _command[_index] = QueryCommand.OP_QUERY & 0xff;
	  // Adjust index
	  _index = _index + 4;
	
	  // Write the query options
	  _command[_index + 3] = (this.queryOptions >> 24) & 0xff;
	  _command[_index + 2] = (this.queryOptions >> 16) & 0xff;
	  _command[_index + 1] = (this.queryOptions >> 8) & 0xff;
	  _command[_index] = this.queryOptions & 0xff;
	  // Adjust index
	  _index = _index + 4;
	
	  // Write the collection name to the command
	  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;
	  _command[_index - 1] = 0;
	
	  // Write the number of documents to skip
	  _command[_index + 3] = (this.numberToSkip >> 24) & 0xff;
	  _command[_index + 2] = (this.numberToSkip >> 16) & 0xff;
	  _command[_index + 1] = (this.numberToSkip >> 8) & 0xff;
	  _command[_index] = this.numberToSkip & 0xff;
	  // Adjust index
	  _index = _index + 4;
	
	  // Write the number of documents to return
	  _command[_index + 3] = (this.numberToReturn >> 24) & 0xff;
	  _command[_index + 2] = (this.numberToReturn >> 16) & 0xff;
	  _command[_index + 1] = (this.numberToReturn >> 8) & 0xff;
	  _command[_index] = this.numberToReturn & 0xff;
	  // Adjust index
	  _index = _index + 4;
	
	  // Document binary length
	  var documentLength = 0
	  var object = this.query;
	
	  // Serialize the selector
	  if(Buffer.isBuffer(object)) {
	    documentLength = object.length;
	    // Copy the data into the current buffer
	    object.copy(_command, _index);
	  } else {
	    // If $query we need to check for a valid document
	    if(this.query['$query']) {
	      this.db.bson.serializeWithBufferAndIndex(object['$query'], this.checkKeys, _command, _index, this.serializeFunctions) - _index + 1;
	      // Cannot check keys due to $query
	      this.checkKeys = false;
	    }
	    
	    // Serialize the document straight to the buffer
	    documentLength = this.db.bson.serializeWithBufferAndIndex(object, this.checkKeys, _command, _index, this.serializeFunctions) - _index + 1;
	  }
	
	  // Write the length to the document
	  _command[_index + 3] = (documentLength >> 24) & 0xff;
	  _command[_index + 2] = (documentLength >> 16) & 0xff;
	  _command[_index + 1] = (documentLength >> 8) & 0xff;
	  _command[_index] = documentLength & 0xff;
	  // Update index in buffer
	  _index = _index + documentLength;
	  // // Add terminating 0 for the object
	  _command[_index - 1] = 0;
	
	  // Push field selector if available
	  if(this.returnFieldSelector != null && !(Buffer.isBuffer(this.returnFieldSelector)))  {
	    if(Object.keys(this.returnFieldSelector).length > 0) {
	      var documentLength = this.db.bson.serializeWithBufferAndIndex(this.returnFieldSelector, this.checkKeys, _command, _index, this.serializeFunctions) - _index + 1;
	      // Write the length to the document
	      _command[_index + 3] = (documentLength >> 24) & 0xff;
	      _command[_index + 2] = (documentLength >> 16) & 0xff;
	      _command[_index + 1] = (documentLength >> 8) & 0xff;
	      _command[_index] = documentLength & 0xff;
	      // Update index in buffer
	      _index = _index + documentLength;
	      // Add terminating 0 for the object
	      _command[_index - 1] = 0;
	    }
	  } if(this.returnFieldSelector != null && Buffer.isBuffer(this.returnFieldSelector))  {
	    // Document binary length
	    var documentLength = 0
	    var object = this.returnFieldSelector;
	
	    // Serialize the selector
	    documentLength = object.length;
	    // Copy the data into the current buffer
	    object.copy(_command, _index);
	
	    // Write the length to the document
	    _command[_index + 3] = (documentLength >> 24) & 0xff;
	    _command[_index + 2] = (documentLength >> 16) & 0xff;
	    _command[_index + 1] = (documentLength >> 8) & 0xff;
	    _command[_index] = documentLength & 0xff;
	    // Update index in buffer
	    _index = _index + documentLength;
	    // Add terminating 0 for the object
	    _command[_index - 1] = 0;
	  }
	
	  // Return finished command
	  return _command;
	};
	
	// Constants
	QueryCommand.OPTS_NONE = 0;
	QueryCommand.OPTS_TAILABLE_CURSOR = 2;
	QueryCommand.OPTS_SLAVE = 4;
	QueryCommand.OPTS_OPLOG_REPLAY = 8;
	QueryCommand.OPTS_NO_CURSOR_TIMEOUT = 16;
	QueryCommand.OPTS_AWAIT_DATA = 32;
	QueryCommand.OPTS_EXHAUST = 64;
	QueryCommand.OPTS_PARTIAL = 128;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var BaseCommand = __webpack_require__(174).BaseCommand,
	  inherits = __webpack_require__(282).inherits;
	
	/**
	  Update Document Command
	**/
	var UpdateCommand = exports.UpdateCommand = function(db, collectionName, spec, document, options) {
	  BaseCommand.call(this);
	
	  var object = spec;
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;    
	    if(object_size != object.length)  {
	      var error = new Error("update spec raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }
	
	  var object = document;
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;    
	    if(object_size != object.length)  {
	      var error = new Error("update document raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }
	
	  this.collectionName = collectionName;
	  this.spec = spec;
	  this.document = document;
	  this.db = db;
	  this.serializeFunctions = false;
	  this.checkKeys = typeof options.checkKeys != 'boolean' ? false : options.checkKeys;
	
	  // Generate correct flags
	  var db_upsert = 0;
	  var db_multi_update = 0;
	  db_upsert = options != null && options['upsert'] != null ? (options['upsert'] == true ? 1 : 0) : db_upsert;
	  db_multi_update = options != null && options['multi'] != null ? (options['multi'] == true ? 1 : 0) : db_multi_update;
	
	  // Flags
	  this.flags = parseInt(db_multi_update.toString() + db_upsert.toString(), 2);
	  // Let us defined on a command basis if we want functions to be serialized or not
	  if(options['serializeFunctions'] != null && options['serializeFunctions']) {
	    this.serializeFunctions = true;
	  }
	};
	
	inherits(UpdateCommand, BaseCommand);
	
	UpdateCommand.OP_UPDATE = 2001;
	
	/*
	struct {
	    MsgHeader header;             // standard message header
	    int32     ZERO;               // 0 - reserved for future use
	    cstring   fullCollectionName; // "dbname.collectionname"
	    int32     flags;              // bit vector. see below
	    BSON      spec;               // the query to select the document
	    BSON      document;           // the document data to update with or insert
	}
	*/
	UpdateCommand.prototype.toBinary = function(bsonSettings) {
	  // Validate that we are not passing 0x00 in the colletion name
	  if(!!~this.collectionName.indexOf("\x00")) {
	    throw new Error("namespace cannot contain a null character");
	  }
	
	  // Calculate total length of the document
	  var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + this.db.bson.calculateObjectSize(this.spec, false, true) +
	      this.db.bson.calculateObjectSize(this.document, this.serializeFunctions, true) + (4 * 4);
	
	  // Enforce maximum bson size
	  if(!bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxBsonSize) 
	    throw new Error("Document exceeds maximum allowed bson size of " + bsonSettings.maxBsonSize + " bytes");
	
	  if(bsonSettings.disableDriverBSONSizeCheck 
	    && totalLengthOfCommand > bsonSettings.maxMessageSizeBytes) 
	    throw new Error("Command exceeds maximum message size of " + bsonSettings.maxMessageSizeBytes + " bytes");
	
	  // Let's build the single pass buffer command
	  var _index = 0;
	  var _command = new Buffer(totalLengthOfCommand);
	  // Write the header information to the buffer
	  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;     
	  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;
	  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;
	  _command[_index] = totalLengthOfCommand & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write the request ID
	  _command[_index + 3] = (this.requestId >> 24) & 0xff;     
	  _command[_index + 2] = (this.requestId >> 16) & 0xff;
	  _command[_index + 1] = (this.requestId >> 8) & 0xff;
	  _command[_index] = this.requestId & 0xff;
	  // Adjust index
	  _index = _index + 4;
	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  // Write the op_code for the command
	  _command[_index + 3] = (UpdateCommand.OP_UPDATE >> 24) & 0xff;     
	  _command[_index + 2] = (UpdateCommand.OP_UPDATE >> 16) & 0xff;
	  _command[_index + 1] = (UpdateCommand.OP_UPDATE >> 8) & 0xff;
	  _command[_index] = UpdateCommand.OP_UPDATE & 0xff;
	  // Adjust index
	  _index = _index + 4;
	
	  // Write zero
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	  _command[_index++] = 0;
	
	  // Write the collection name to the command
	  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;
	  _command[_index - 1] = 0;    
	
	  // Write the update flags
	  _command[_index + 3] = (this.flags >> 24) & 0xff;     
	  _command[_index + 2] = (this.flags >> 16) & 0xff;
	  _command[_index + 1] = (this.flags >> 8) & 0xff;
	  _command[_index] = this.flags & 0xff;
	  // Adjust index
	  _index = _index + 4;
	
	  // Document binary length
	  var documentLength = 0
	  var object = this.spec;
	
	  // Serialize the selector
	  // If we are passing a raw buffer, do minimal validation
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;
	    if(object_size != object.length) throw new Error("raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	    documentLength = object.length;
	    // Copy the data into the current buffer
	    object.copy(_command, _index);
	  } else {
	    documentLength = this.db.bson.serializeWithBufferAndIndex(object, this.checkKeys, _command, _index, false) - _index + 1;
	  }
	
	  // Write the length to the document
	  _command[_index + 3] = (documentLength >> 24) & 0xff;     
	  _command[_index + 2] = (documentLength >> 16) & 0xff;
	  _command[_index + 1] = (documentLength >> 8) & 0xff;
	  _command[_index] = documentLength & 0xff;
	  // Update index in buffer
	  _index = _index + documentLength;
	  // Add terminating 0 for the object
	  _command[_index - 1] = 0;    
	
	  // Document binary length
	  var documentLength = 0
	  var object = this.document;
	
	  // Serialize the document
	  // If we are passing a raw buffer, do minimal validation
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;
	    if(object_size != object.length) throw new Error("raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	    documentLength = object.length;
	    // Copy the data into the current buffer
	    object.copy(_command, _index);
	  } else {    
	    documentLength = this.db.bson.serializeWithBufferAndIndex(object, false, _command, _index, this.serializeFunctions) - _index + 1;
	  }
	
	  // Write the length to the document
	  _command[_index + 3] = (documentLength >> 24) & 0xff;     
	  _command[_index + 2] = (documentLength >> 16) & 0xff;
	  _command[_index + 1] = (documentLength >> 8) & 0xff;
	  _command[_index] = documentLength & 0xff;
	  // Update index in buffer
	  _index = _index + documentLength;
	  // Add terminating 0 for the object
	  _command[_index - 1] = 0;    
	
	  return _command;
	};
	
	// Constants
	UpdateCommand.DB_UPSERT = 0;
	UpdateCommand.DB_MULTI_UPDATE = 1;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var EventEmitter = __webpack_require__(298).EventEmitter
	  , inherits = __webpack_require__(282).inherits
	  , utils = __webpack_require__(207)
	  , mongodb_cr_authenticate = __webpack_require__(156).authenticate
	  , mongodb_gssapi_authenticate = __webpack_require__(157).authenticate
	  , mongodb_sspi_authenticate = __webpack_require__(160).authenticate
	  , mongodb_plain_authenticate = __webpack_require__(158).authenticate
	  , mongodb_x509_authenticate = __webpack_require__(161).authenticate
	  , mongodb_scram_authenticate = __webpack_require__(159).authenticate;
	
	var id = 0;
	
	/**
	 * Internal class for callback storage
	 * @ignore
	 */
	var CallbackStore = function() {
	  // Make class an event emitter
	  EventEmitter.call(this);
	  // Add a info about call variable
	  this._notReplied = {};
	  this.id = id++;
	}
	
	/**
	 * @ignore
	 */
	inherits(CallbackStore, EventEmitter);
	
	CallbackStore.prototype.notRepliedToIds = function() {
	  return Object.keys(this._notReplied);
	}
	
	CallbackStore.prototype.callbackInfo = function(id) {
	  return this._notReplied[id]; 
	}
	
	/**
	 * Internal class for holding non-executed commands
	 * @ignore
	 */
	var NonExecutedOperationStore = function(config) {  
	  var commands = {
	      read: []
	    , write_reads: []
	    , write: []
	  };
	
	  // Execute all callbacks
	  var fireCallbacksWithError = function(error, commands) {
	    while(commands.length > 0) {
	      var command = commands.shift();
	      if(typeof command.callback == 'function') {
	        command.callback(error);        
	      }
	    }
	  }
	
	  this.count = function() {
	    return commands.read.length
	      + commands.write_reads.length
	      + commands.write.length;
	  }
	
	  this.write = function(op) {
	    commands.write.push(op);
	  }  
	
	  this.read_from_writer = function(op) {  
	    commands.write_reads.push(op);
	  }
	
	  this.read = function(op) {  
	    commands.read.push(op);
	  }  
	
	  this.validateBufferLimit = function(numberToFailOn) {
	    if(numberToFailOn == -1 || numberToFailOn == null) 
	      return true;
	
	    // Error passed back
	    var error = utils.toError("No connection operations buffering limit of " + numberToFailOn + " reached");
	
	    // If we have passed the number of items to buffer we need to fail
	    if(numberToFailOn < this.count()) {
	      // Fail all of the callbacks
	      fireCallbacksWithError(error, commands.read);
	      fireCallbacksWithError(error, commands.write_reads);
	      fireCallbacksWithError(error, commands.write);
	
	      // Report back that the buffer has been filled
	      return false;
	    }
	
	    // There is still some room to go
	    return true;
	  }
	
	  this.execute_queries = function(executeInsertCommand) {
	    var connection = config.checkoutReader();
	    if(connection == null || connection instanceof Error) return;
	
	    // Write out all the queries
	    while(commands.read.length > 0) {
	      // Get the next command
	      var command = commands.read.shift();
	      command.options.connection = connection;
	      // Execute the next command
	      command.executeQueryCommand(command.db, command.db_command, command.options, command.callback);
	    }
	  }
	
	  this.execute_writes = function() {
	    var connection = config.checkoutWriter();
	    if(connection == null || connection instanceof Error) return;
	
	    // Write out all the queries to the primary
	    while(commands.write_reads.length > 0) {
	      // Get the next command
	      var command = commands.write_reads.shift();
	      command.options.connection = connection;
	      // Execute the next command
	      command.executeQueryCommand(command.db, command.db_command, command.options, command.callback);
	    }
	
	    // Execute all write operations
	    while(commands.write.length > 0) {
	      // Get the next command
	      var command = commands.write.shift();
	      // Set the connection
	      command.options.connection = connection;
	      // Execute the next command
	      command.executeInsertCommand(command.db, command.db_command, command.options, command.callback);
	    }  
	  }
	}
	
	/**
	 * Internal class for authentication storage
	 * @ignore
	 */
	var AuthStore = function() {
	  var _auths = [];
	
	  this.add = function(authMechanism, dbName, username, password, authdbName, gssapiServiceName) {
	    // Check for duplicates
	    if(!this.contains(dbName)) {
	      // Base config
	      var config = {
	          'username':username
	        , 'password':password
	        , 'db': dbName
	        , 'authMechanism': authMechanism
	        , 'gssapiServiceName': gssapiServiceName
	      };
	
	      // Add auth source if passed in
	      if(typeof authdbName == 'string') {
	        config['authdb'] = authdbName;
	      }
	
	      // Push the config
	      _auths.push(config);
	    }
	  }  
	
	  this.contains = function(dbName) {
	    for(var i = 0; i < _auths.length; i++) {
	      if(_auths[i].db == dbName) return true;
	    }
	
	    return false;
	  }
	
	  this.remove = function(dbName) {
	    var newAuths = [];
	
	    // Filter out all the login details
	    for(var i = 0; i < _auths.length; i++) {
	      if(_auths[i].db != dbName) newAuths.push(_auths[i]);
	    }
	
	    //  Set the filtered list
	    _auths = newAuths;
	  }
	
	  this.get = function(index) {
	    return _auths[index];
	  }
	
	  this.length = function() {
	    return _auths.length;
	  }
	
	  this.toArray = function() {
	    return _auths.slice(0);
	  }
	}
	
	/**
	 * Internal class for storing db references
	 * @ignore
	 */
	var DbStore = function() {
	  var _dbs = [];
	
	  this.add = function(db) {
	    var found = false;
	    
	    // Only add if it does not exist already
	    for(var i = 0; i < _dbs.length; i++) {
	      if(db.databaseName == _dbs[i].databaseName) found = true;
	    }
	
	    // Only add if it does not already exist
	    if(!found) {
	      _dbs.push(db);    
	    } 
	  }
	
	  this.reset = function() {
	    _dbs = [];
	  }
	
	  this.db = function() {
	    return _dbs;
	  }
	
	  this.fetch = function(databaseName) {
	    // Only add if it does not exist already
	    for(var i = 0; i < _dbs.length; i++) {
	      if(databaseName == _dbs[i].databaseName)
	        return _dbs[i];
	    }  
	
	    return null;
	  }
	
	  this.emit = function(event, message, object, reset, filterDb, rethrow_if_no_listeners) {
	    var emitted = false;
	
	    // Not emitted and we have enabled rethrow, let process.uncaughtException
	    // deal with the issue
	    if(!emitted && rethrow_if_no_listeners) {
	      return process.nextTick(function() {
	        throw message;      
	      })
	    }
	
	    // Emit the events
	    for(var i = 0; i < _dbs.length; i++) {    
	      if(_dbs[i].listeners(event).length > 0) {
	        if(filterDb == null || filterDb.databaseName !== _dbs[i].databaseName 
	          || filterDb.tag !== _dbs[i].tag) {
	          _dbs[i].emit(event, message, object == null ? _dbs[i] : object);
	          emitted = true;
	        }
	      }
	    }
	
	    // Emit error message
	    if(message 
	      && event == 'error' 
	      && !emitted
	      && rethrow_if_no_listeners 
	      && object && object.db) {
	        process.nextTick(function() {
	          object.db.emit(event, message, null);      
	        })
	    }
	  }
	}
	
	var Base = function Base() {  
	  EventEmitter.call(this);
	
	  // Callback store is part of connection specification
	  if(Base._callBackStore == null) {
	    Base._callBackStore = new CallbackStore();
	  }
	
	  // Create a new auth store
	  var auth = new AuthStore();
	
	  Object.defineProperty(this, "auth", {enumerable: true
	    , get: function() { return auth; }
	  });
	
	  // Create a new callback store  
	  this._callBackStore = new CallbackStore();
	  // All commands not being executed
	  this._commandsStore = new NonExecutedOperationStore(this);
	  // Contains all the dbs attached to this server config
	  this._dbStore = new DbStore();
	}
	
	/**
	 * @ignore
	 */
	inherits(Base, EventEmitter);
	
	/**
	 * @ignore
	 */
	Base.prototype._apply_auths = function(db, callback) {
	  _apply_auths_serially(this, db, this.auth.toArray(), callback);
	}
	
	var _apply_auths_serially = function(self, db, auths, callback) {
	  if(auths.length == 0) return callback(null, null);
	  // Get the first auth
	  var auth = auths.shift();
	  var connections = self.allRawConnections();
	  var connectionsLeft = connections.length;
	  var options = {};
	
	  if(auth.authMechanism == 'GSSAPI') {
	    // We have the kerberos library, execute auth process
	    if(process.platform == 'win32') {
	      mongodb_sspi_authenticate(db, auth.username, auth.password, auth.authdb, options, callback);
	    } else {
	      mongodb_gssapi_authenticate(db, auth.username, auth.password, auth.authdb, options, callback);
	    }
	  } else if(auth.authMechanism == 'MONGODB-CR') {
	    mongodb_cr_authenticate(db, auth.username, auth.password, auth.authdb, options, callback);
	  } else if(auth.authMechanism == 'SCRAM-SHA-1') {
	    mongodb_scram_authenticate(db, auth.username, auth.password, auth.authdb, options, callback);
	  } else if(auth.authMechanism == 'PLAIN') {
	    mongodb_plain_authenticate(db, auth.username, auth.password, options, callback);
	  } else if(auth.authMechanism == 'MONGODB-X509') {
	    mongodb_x509_authenticate(db, auth.username, auth.password, options, callback);
	  }
	}
	
	/**
	 * Fire all the errors
	 * @ignore
	 */
	Base.prototype.__executeAllCallbacksWithError = function(err) {
	  // Check all callbacks
	  var keys = Object.keys(this._callBackStore._notReplied);
	  // For each key check if it's a callback that needs to be returned
	  for(var j = 0; j < keys.length; j++) {
	    var info = this._callBackStore._notReplied[keys[j]];
	    // Execute callback with error
	    this._callBackStore.emit(keys[j], err, null);
	    // Remove the key
	    delete this._callBackStore._notReplied[keys[j]];
	    // Force cleanup _events, node.js seems to set it as a null value
	    if(this._callBackStore._events) {
	      delete this._callBackStore._events[keys[j]];
	    }
	  }
	}
	
	/**
	 * Fire all the errors
	 * @ignore
	 */
	Base.prototype.__executeAllServerSpecificErrorCallbacks = function(host, port, err) {  
	  // Check all callbacks
	  var keys = Object.keys(this._callBackStore._notReplied);
	  // For each key check if it's a callback that needs to be returned
	  for(var j = 0; j < keys.length; j++) {
	    var info = this._callBackStore._notReplied[keys[j]];
	
	    if(info && info.connection) {
	      // Unpack the connection settings
	      var _host = info.connection.socketOptions.host;
	      var _port = info.connection.socketOptions.port;
	      // If the server matches execute the callback with the error
	      if(_port == port && _host == host) {
	        this._callBackStore.emit(keys[j], err, null);
	        // Remove the key
	        delete this._callBackStore._notReplied[keys[j]];
	        // Force cleanup _events, node.js seems to set it as a null value
	        if(this._callBackStore._events) {
	          delete this._callBackStore._events[keys[j]];
	        } 
	      }      
	    }
	  }
	}
	
	/**
	 * Register a handler
	 * @ignore
	 * @api private
	 */
	Base.prototype._registerHandler = function(db_command, raw, connection, exhaust, callback) {
	  // Check if we have exhausted
	  if(typeof exhaust == 'function') {
	    callback = exhaust;
	    exhaust = false;
	  }
	
	  // Add the callback to the list of handlers
	  this._callBackStore.once(db_command.getRequestId(), callback);
	  // Add the information about the reply
	  this._callBackStore._notReplied[db_command.getRequestId().toString()] = {start: new Date().getTime(), 'raw': raw, connection:connection, exhaust:exhaust};
	}
	
	/**
	 * Re-Register a handler, on the cursor id f.ex
	 * @ignore
	 * @api private
	 */
	Base.prototype._reRegisterHandler = function(newId, object, callback) {
	  // Add the callback to the list of handlers
	  this._callBackStore.once(newId, object.callback.listener);
	  // Add the information about the reply
	  this._callBackStore._notReplied[newId] = object.info;
	}
	
	/**
	 *
	 * @ignore
	 * @api private
	 */
	Base.prototype._flushAllCallHandlers = function(err) {
	  var keys = Object.keys(this._callBackStore._notReplied);
	
	  for(var i = 0; i < keys.length; i++) {
	    this._callHandler(keys[i], null, err);
	  }
	}
	
	/**
	 *
	 * @ignore
	 * @api private
	 */
	Base.prototype._callHandler = function(id, document, err) {
	  var self = this;
	
	  // If there is a callback peform it
	  if(this._callBackStore.listeners(id).length >= 1) {
	    // Get info object
	    var info = this._callBackStore._notReplied[id];
	    // Delete the current object
	    delete this._callBackStore._notReplied[id]; 
	    // Call the handle directly don't emit
	    var callback = this._callBackStore.listeners(id)[0].listener;
	    // Remove the listeners
	    this._callBackStore.removeAllListeners(id);
	    // Force key deletion because it nulling it not deleting in 0.10.X
	    if(this._callBackStore._events) {
	      delete this._callBackStore._events[id];
	    }
	
	    try {
	      // Execute the callback if one was provided
	      if(typeof callback == 'function') callback(err, document, info.connection);
	    } catch(err) {
	      self._emitAcrossAllDbInstances(self, null, "error", utils.toError(err), self, true, true);
	    }
	  }
	}
	
	/**
	 *
	 * @ignore
	 * @api private
	 */
	Base.prototype._hasHandler = function(id) {
	  return this._callBackStore.listeners(id).length >= 1;
	}
	
	/**
	 *
	 * @ignore
	 * @api private
	 */
	Base.prototype._removeHandler = function(id) {
	  // Remove the information
	  if(this._callBackStore._notReplied[id] != null) delete this._callBackStore._notReplied[id];
	  // Remove the callback if it's registered
	  this._callBackStore.removeAllListeners(id);
	  // Force cleanup _events, node.js seems to set it as a null value
	  if(this._callBackStore._events) {
	    delete this._callBackStore._events[id];
	  }
	}
	
	/**
	 *
	 * @ignore
	 * @api private
	 */
	Base.prototype._findHandler = function(id) {
	  var info = this._callBackStore._notReplied[id];
	  // Return the callback
	  return {info:info, callback:(this._callBackStore.listeners(id).length >= 1) ? this._callBackStore.listeners(id)[0] : null}
	}
	
	/**
	 *
	 * @ignore
	 * @api private
	 */
	Base.prototype._emitAcrossAllDbInstances = function(server, filterDb, event, message, object, resetConnection, rethrow_if_no_listeners) {
	  if(resetConnection) {
	    var dbs = this._dbStore.db();
	
	    for(var i = 0; i < dbs.length; i++) {
	      if(typeof dbs[i].openCalled != 'undefined')
	        dbs[i].openCalled = false;
	    }
	  }
	  
	  // Fire event
	  this._dbStore.emit(event, message, object, resetConnection, filterDb, rethrow_if_no_listeners);
	}
	
	exports.Base = Base;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var utils = __webpack_require__(185),
	  inherits = __webpack_require__(282).inherits,
	  net = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  EventEmitter = __webpack_require__(298).EventEmitter,
	  inherits = __webpack_require__(282).inherits,
	  binaryutils = __webpack_require__(207),
	  tls = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tls\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	var Connection = exports.Connection = function(id, socketOptions) {
	  var self = this;
	  // Set up event emitter
	  EventEmitter.call(this);
	  // Store all socket options
	  this.socketOptions = socketOptions ? socketOptions : {host:'localhost', port:27017, domainSocket:false};
	  // Set keep alive default if not overriden
	  if(this.socketOptions.keepAlive == null && !(process.platform == "sunos" || process.platform == "win32")) this.socketOptions.keepAlive = 100;
	  // Id for the connection
	  this.id = id;
	  // State of the connection
	  this.connected = false;
	  // Set if this is a domain socket
	  this.domainSocket = this.socketOptions.domainSocket;
	
	  // Supported min and max wire protocol
	  this.minWireVersion = 0;
	  this.maxWireVersion = 3;
	
	  //
	  // Connection parsing state
	  //
	  this.maxBsonSize = socketOptions.maxBsonSize ? socketOptions.maxBsonSize : Connection.DEFAULT_MAX_BSON_SIZE;
	  this.maxMessageSizeBytes = socketOptions.maxMessageSizeBytes ? socketOptions.maxMessageSizeBytes : Connection.DEFAULT_MAX_MESSAGE_SIZE;
	  this.maxNumberOfDocsInBatch = socketOptions.maxWriteBatchSize ? socketOptions.maxWriteBatchSize : Connection.DEFAULT_MAX_WRITE_BATCH_SIZE;
	  // Contains the current message bytes
	  this.buffer = null;
	  // Contains the current message size
	  this.sizeOfMessage = 0;
	  // Contains the readIndex for the messaage
	  this.bytesRead = 0;
	  // Contains spill over bytes from additional messages
	  this.stubBuffer = 0;
	
	  // Just keeps list of events we allow
	  this.eventHandlers = {error:[], parseError:[], poolReady:[], message:[], close:[], timeout:[], end:[]};
	
	  // Just keeps list of events we allow
	  resetHandlers(this, false);
	  
	  // Bson object
	  this.maxBsonSettings = {
	      disableDriverBSONSizeCheck: this.socketOptions['disableDriverBSONSizeCheck'] || false
	    , maxBsonSize: this.maxBsonSize
	    , maxMessageSizeBytes: this.maxMessageSizeBytes
	  }
	
	  // Allow setting the socketTimeoutMS on all connections
	  // to work around issues such as secondaries blocking due to compaction
	  Object.defineProperty(this, "socketTimeoutMS", {
	      enumerable: true
	    , get: function () { return self.socketOptions.socketTimeoutMS; }
	    , set: function (value) { 
	      // Set the socket timeoutMS value
	      self.socketOptions.socketTimeoutMS = value;
	      // Set the physical connection timeout
	      self.connection.setTimeout(self.socketOptions.socketTimeoutMS);
	    }
	  });  
	}
	
	// Set max bson size
	Connection.DEFAULT_MAX_BSON_SIZE = 1024 * 1024 * 4;
	// Set default to max bson to avoid overflow or bad guesses
	Connection.DEFAULT_MAX_MESSAGE_SIZE = Connection.DEFAULT_MAX_BSON_SIZE;
	// Max default write bulk ops
	Connection.DEFAULT_MAX_WRITE_BATCH_SIZE = 2000;
	
	// Inherit event emitter so we can emit stuff wohoo
	inherits(Connection, EventEmitter);
	
	Connection.prototype.start = function() {
	  var self = this;
	
	  // If we have a normal connection
	  if(this.socketOptions.ssl) {
	    // Create new connection instance
	    if(this.domainSocket) {
	      this.connection = net.createConnection(this.socketOptions.host);
	    } else {
	      this.connection = net.createConnection(this.socketOptions.port, this.socketOptions.host);
	    }
	    if(this.logger != null && this.logger.doDebug){
	      this.logger.debug("opened connection", this.socketOptions);
	    }
	
	    // Set options on the socket
	    this.connection.setTimeout(this.socketOptions.connectTimeoutMS != null ? this.socketOptions.connectTimeoutMS : this.socketOptions.timeout);
	    // Work around for 0.4.X
	    if(process.version.indexOf("v0.4") == -1) this.connection.setNoDelay(this.socketOptions.noDelay);
	    // Set keep alive if defined
	    if(process.version.indexOf("v0.4") == -1) {
	      if(this.socketOptions.keepAlive > 0) {
	        this.connection.setKeepAlive(true, this.socketOptions.keepAlive);
	      } else {
	        this.connection.setKeepAlive(false);
	      }
	    }
	
	    // Check if the driver should validate the certificate
	    var validate_certificates = this.socketOptions.sslValidate == true ? true : false;
	
	    // Create options for the tls connection
	    var tls_options = {
	        socket: this.connection
	      , rejectUnauthorized: false
	    }
	
	    // If we wish to validate the certificate we have provided a ca store
	    if(validate_certificates) {
	      tls_options.ca = this.socketOptions.sslCA;
	    }
	
	    // If we have a certificate to present
	    if(this.socketOptions.sslCert) {      
	      tls_options.cert = this.socketOptions.sslCert;
	      tls_options.key = this.socketOptions.sslKey;
	    }
	
	    // If the driver has been provided a private key password
	    if(this.socketOptions.sslPass) {
	      tls_options.passphrase = this.socketOptions.sslPass;
	    }
	
	    // Contains the cleartext stream
	    var cleartext = null;
	    // Attempt to establish a TLS connection to the server
	    try {
	      cleartext = tls.connect(this.socketOptions.port, this.socketOptions.host, tls_options, function() {      
	        // If we have a ssl certificate validation error return an error
	        if(cleartext.authorizationError && validate_certificates) {          
	          // Emit an error
	          return self.emit("error", cleartext.authorizationError, self, {ssl:true});        
	        }
	        
	        // Connect to the server
	        connectHandler(self)();
	      })      
	    } catch(err) {
	      return self.emit("error", "SSL connection failed", self, {ssl:true});
	    }
	
	    // Save the output stream
	    this.writeSteam = cleartext;
	
	    // Set up data handler for the clear stream
	    cleartext.on("data", createDataHandler(this));
	    // Do any handling of end event of the stream
	    cleartext.on("end", endHandler(this));
	    cleartext.on("error", errorHandler(this));    
	
	    // Handle any errors
	    this.connection.on("error", errorHandler(this));    
	    // Handle timeout
	    this.connection.on("timeout", timeoutHandler(this));
	    // Handle drain event
	    this.connection.on("drain", drainHandler(this));
	    // Handle the close event
	    this.connection.on("close", closeHandler(this));
	  } else {
	    // Create new connection instance
	    if(this.domainSocket) {
	      this.connection = net.createConnection(this.socketOptions.host);
	    } else {
	      this.connection = net.createConnection(this.socketOptions.port, this.socketOptions.host);
	    }
	    if(this.logger != null && this.logger.doDebug){
	      this.logger.debug("opened connection", this.socketOptions);
	    }
	
	    // Set options on the socket
	    this.connection.setTimeout(this.socketOptions.connectTimeoutMS != null ? this.socketOptions.connectTimeoutMS : this.socketOptions.timeout);
	    // Work around for 0.4.X
	    if(process.version.indexOf("v0.4") == -1) this.connection.setNoDelay(this.socketOptions.noDelay);
	    // Set keep alive if defined
	    if(process.version.indexOf("v0.4") == -1) {
	      if(this.socketOptions.keepAlive > 0) {
	        this.connection.setKeepAlive(true, this.socketOptions.keepAlive);
	      } else {
	        this.connection.setKeepAlive(false);
	      }
	    }
	
	    // Set up write stream
	    this.writeSteam = this.connection;
	    // Add handlers
	    this.connection.on("error", errorHandler(this));
	    // Add all handlers to the socket to manage it
	    this.connection.on("connect", connectHandler(this));
	    // this.connection.on("end", endHandler(this));
	    this.connection.on("data", createDataHandler(this));
	    this.connection.on("timeout", timeoutHandler(this));
	    this.connection.on("drain", drainHandler(this));
	    this.connection.on("close", closeHandler(this));
	  }
	}
	
	/**
	 * @ignore
	 */
	Connection.prototype.setSocketOptions = function(options) {
	  options = options || {};
	
	  if(typeof options.connectTimeoutMS == 'number') {
	    this.socketOptions.connectTimeoutMS = options.connectTimeoutMS;
	  }
	
	  if(typeof options.socketTimeoutMS == 'number') {
	    this.socketOptions.socketTimeoutMS = options.socketTimeoutMS;
	    // Set the current socket timeout
	    this.connection.setTimeout(options.socketTimeoutMS);
	  }
	}
	
	// Check if the sockets are live
	Connection.prototype.isConnected = function() {
	  return this.connected && !this.connection.destroyed && this.connection.writable;
	}
	
	// Validate if the driver supports this server
	Connection.prototype.isCompatible = function() {
	  if(this.serverCapabilities == null) return true;
	
	  // Is compatible with backward server
	  if(this.serverCapabilities.minWireVersion == 0 
	    && this.serverCapabilities.maxWireVersion ==0) return true;
	
	  // Check if we overlap
	  if(this.serverCapabilities.minWireVersion >= this.minWireVersion
	    && this.serverCapabilities.maxWireVersion <= this.maxWireVersion) return true;
	
	  // Not compatible
	  return false;
	}
	
	// Write the data out to the socket
	Connection.prototype.write = function(command, callback) {
	  try {
	    // If we have a list off commands to be executed on the same socket
	    if(Array.isArray(command)) {
	      for(var i = 0; i < command.length; i++) {
	        try {
	          // Pass in the bson validation settings (validate early)
	          var binaryCommand = command[i].toBinary(this.maxBsonSettings);
	
	          if(this.logger != null && this.logger.doDebug) 
	            this.logger.debug("writing command to mongodb", {binary: binaryCommand, json: command[i]});
	
	          this.writeSteam.write(binaryCommand);
	        } catch(err) {
	          return callback(err, null);
	        }
	      }
	    } else {
	      try {
	        // Pass in the bson validation settings (validate early)
	        var binaryCommand = command.toBinary(this.maxBsonSettings);
	        // Do we have a logger active log the event
	        if(this.logger != null && this.logger.doDebug) 
	          this.logger.debug("writing command to mongodb", {binary: binaryCommand, json: command});
	        // Write the binary command out to socket
	        this.writeSteam.write(binaryCommand);
	      } catch(err) {
	        return callback(err, null);
	      }
	    }
	  } catch (err) {
	    if(typeof callback === 'function') callback(err);
	  }
	}
	
	// Force the closure of the connection
	Connection.prototype.close = function() {
	  // clear out all the listeners
	  resetHandlers(this, true);
	  // Add a dummy error listener to catch any weird last moment errors (and ignore them)
	  this.connection.on("error", function() {})
	  // destroy connection
	  this.connection.destroy();
	  if(this.logger != null && this.logger.doDebug){
	    this.logger.debug("closed connection", this.connection);
	  }
	}
	
	// Reset all handlers
	var resetHandlers = function(self, clearListeners) {
	  self.eventHandlers = {error:[], connect:[], close:[], end:[], timeout:[], parseError:[], message:[]};
	
	  // If we want to clear all the listeners
	  if(clearListeners && self.connection != null) {
	    var keys = Object.keys(self.eventHandlers);
	    // Remove all listeners
	    for(var i = 0; i < keys.length; i++) {
	      self.connection.removeAllListeners(keys[i]);
	    }
	  }
	}
	
	//
	// Handlers
	//
	
	// Connect handler
	var connectHandler = function(self) {
	  return function(data) {
	    // Set connected
	    self.connected = true;
	    // Now that we are connected set the socket timeout
	    self.connection.setTimeout(self.socketOptions.socketTimeoutMS != null ? self.socketOptions.socketTimeoutMS : self.socketOptions.timeout);
	    // Emit the connect event with no error
	    self.emit("connect", null, self);
	  }
	}
	
	var createDataHandler = exports.Connection.createDataHandler = function(self) {
	  // We need to handle the parsing of the data
	  // and emit the messages when there is a complete one
	  return function(data) {
	    // Parse until we are done with the data
	    while(data.length > 0) {
	      // If we still have bytes to read on the current message
	      if(self.bytesRead > 0 && self.sizeOfMessage > 0) {
	        // Calculate the amount of remaining bytes
	        var remainingBytesToRead = self.sizeOfMessage - self.bytesRead;
	        // Check if the current chunk contains the rest of the message
	        if(remainingBytesToRead > data.length) {
	          // Copy the new data into the exiting buffer (should have been allocated when we know the message size)
	          data.copy(self.buffer, self.bytesRead);
	          // Adjust the number of bytes read so it point to the correct index in the buffer
	          self.bytesRead = self.bytesRead + data.length;
	
	          // Reset state of buffer
	          data = new Buffer(0);
	        } else {
	          // Copy the missing part of the data into our current buffer
	          data.copy(self.buffer, self.bytesRead, 0, remainingBytesToRead);
	          // Slice the overflow into a new buffer that we will then re-parse
	          data = data.slice(remainingBytesToRead);
	
	          // Emit current complete message
	          try {
	            var emitBuffer = self.buffer;
	            // Reset state of buffer
	            self.buffer = null;
	            self.sizeOfMessage = 0;
	            self.bytesRead = 0;
	            self.stubBuffer = null;
	            // Emit the buffer
	            self.emit("message", emitBuffer, self);
	          } catch(err) {
	            var errorObject = {err:"socketHandler", trace:err, bin:self.buffer, parseState:{
	              sizeOfMessage:self.sizeOfMessage,
	              bytesRead:self.bytesRead,
	              stubBuffer:self.stubBuffer}};
	            if(self.logger != null && self.logger.doError) self.logger.error("parseError", errorObject);
	            // We got a parse Error fire it off then keep going
	            self.emit("parseError", errorObject, self);
	          }
	        }
	      } else {
	        // Stub buffer is kept in case we don't get enough bytes to determine the
	        // size of the message (< 4 bytes)
	        if(self.stubBuffer != null && self.stubBuffer.length > 0) {
	
	          // If we have enough bytes to determine the message size let's do it
	          if(self.stubBuffer.length + data.length > 4) {
	            // Prepad the data
	            var newData = new Buffer(self.stubBuffer.length + data.length);
	            self.stubBuffer.copy(newData, 0);
	            data.copy(newData, self.stubBuffer.length);
	            // Reassign for parsing
	            data = newData;
	
	            // Reset state of buffer
	            self.buffer = null;
	            self.sizeOfMessage = 0;
	            self.bytesRead = 0;
	            self.stubBuffer = null;
	
	          } else {
	
	            // Add the the bytes to the stub buffer
	            var newStubBuffer = new Buffer(self.stubBuffer.length + data.length);
	            // Copy existing stub buffer
	            self.stubBuffer.copy(newStubBuffer, 0);
	            // Copy missing part of the data
	            data.copy(newStubBuffer, self.stubBuffer.length);
	            // Exit parsing loop
	            data = new Buffer(0);
	          }
	        } else {
	          if(data.length > 4) {
	            // Retrieve the message size
	            var sizeOfMessage = binaryutils.decodeUInt32(data, 0);
	            // If we have a negative sizeOfMessage emit error and return
	            if(sizeOfMessage < 0 || sizeOfMessage > self.maxMessageSizeBytes) {
	              var errorObject = {err:"socketHandler", trace:'', bin:self.buffer, parseState:{
	                sizeOfMessage: sizeOfMessage,
	                bytesRead: self.bytesRead,
	                stubBuffer: self.stubBuffer}};
	              if(self.logger != null && self.logger.doError) self.logger.error("parseError", errorObject);
	              // We got a parse Error fire it off then keep going
	              self.emit("parseError", errorObject, self);
	              return;
	            }
	
	            // Ensure that the size of message is larger than 0 and less than the max allowed
	            if(sizeOfMessage > 4 && sizeOfMessage < self.maxMessageSizeBytes && sizeOfMessage > data.length) {
	              self.buffer = new Buffer(sizeOfMessage);
	              // Copy all the data into the buffer
	              data.copy(self.buffer, 0);
	              // Update bytes read
	              self.bytesRead = data.length;
	              // Update sizeOfMessage
	              self.sizeOfMessage = sizeOfMessage;
	              // Ensure stub buffer is null
	              self.stubBuffer = null;
	              // Exit parsing loop
	              data = new Buffer(0);
	
	            } else if(sizeOfMessage > 4 && sizeOfMessage < self.maxMessageSizeBytes && sizeOfMessage == data.length) {
	              try {
	                var emitBuffer = data;
	                // Reset state of buffer
	                self.buffer = null;
	                self.sizeOfMessage = 0;
	                self.bytesRead = 0;
	                self.stubBuffer = null;
	                // Exit parsing loop
	                data = new Buffer(0);
	                // Emit the message
	                self.emit("message", emitBuffer, self);
	              } catch (err) {
	                var errorObject = {err:"socketHandler", trace:err, bin:self.buffer, parseState:{
	                  sizeOfMessage:self.sizeOfMessage,
	                  bytesRead:self.bytesRead,
	                  stubBuffer:self.stubBuffer}};
	                if(self.logger != null && self.logger.doError) self.logger.error("parseError", errorObject);
	                // We got a parse Error fire it off then keep going
	                self.emit("parseError", errorObject, self);
	              }
	            } else if(sizeOfMessage <= 4 || sizeOfMessage > self.maxMessageSizeBytes) {
	              var errorObject = {err:"socketHandler", trace:null, bin:data, parseState:{
	                sizeOfMessage:sizeOfMessage,
	                bytesRead:0,
	                buffer:null,
	                stubBuffer:null}};
	              if(self.logger != null && self.logger.doError) self.logger.error("parseError", errorObject);
	              // We got a parse Error fire it off then keep going
	              self.emit("parseError", errorObject, self);
	
	              // Clear out the state of the parser
	              self.buffer = null;
	              self.sizeOfMessage = 0;
	              self.bytesRead = 0;
	              self.stubBuffer = null;
	              // Exit parsing loop
	              data = new Buffer(0);
	
	            } else {
	              try {
	                var emitBuffer = data.slice(0, sizeOfMessage);
	                // Reset state of buffer
	                self.buffer = null;
	                self.sizeOfMessage = 0;
	                self.bytesRead = 0;
	                self.stubBuffer = null;
	                // Copy rest of message
	                data = data.slice(sizeOfMessage);
	                // Emit the message
	                self.emit("message", emitBuffer, self);
	              } catch (err) {
	                var errorObject = {err:"socketHandler", trace:err, bin:self.buffer, parseState:{
	                  sizeOfMessage:sizeOfMessage,
	                  bytesRead:self.bytesRead,
	                  stubBuffer:self.stubBuffer}};
	                if(self.logger != null && self.logger.doError) self.logger.error("parseError", errorObject);
	                // We got a parse Error fire it off then keep going
	                self.emit("parseError", errorObject, self);
	              }
	
	            }
	          } else {
	            // Create a buffer that contains the space for the non-complete message
	            self.stubBuffer = new Buffer(data.length)
	            // Copy the data to the stub buffer
	            data.copy(self.stubBuffer, 0);
	            // Exit parsing loop
	            data = new Buffer(0);
	          }
	        }
	      }
	    }
	  }
	}
	
	var endHandler = function(self) {
	  return function() {
	    // Set connected to false
	    self.connected = false;
	    // Emit end event
	    self.emit("end", {err: 'connection received Fin packet from [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);
	  }
	}
	
	var timeoutHandler = function(self) {
	  return function() {
	    // Set connected to false
	    self.connected = false;
	    // Emit timeout event
	    self.emit("timeout", {err: 'connection to [' + self.socketOptions.host + ':' + self.socketOptions.port + '] timed out'}, self);
	  }
	}
	
	var drainHandler = function(self) {
	  return function() {
	  }
	}
	
	var errorHandler = function(self) {
	  return function(err) {
	    self.connection.destroy();
	    // Set connected to false
	    self.connected = false;
	    // Emit error
	    self.emit("error", {err: 'failed to connect to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);
	  }
	}
	
	var closeHandler = function(self) {
	  return function(hadError) {
	    // If we have an error during the connection phase
	    if(hadError && !self.connected) {
	      // Set disconnected
	      self.connected = false;
	      // Emit error
	      self.emit("error", {err: 'failed to connect to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);
	    } else {
	      // Set disconnected
	      self.connected = false;
	      // Emit close
	      self.emit("close", {err: 'connection closed to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);
	    }
	  }
	}
	
	// Some basic defaults
	Connection.DEFAULT_PORT = 27017;
	
	
	
	
	
	
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85), __webpack_require__(281).Buffer))

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var utils = __webpack_require__(185),
	  inherits = __webpack_require__(282).inherits,
	  net = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  timers = __webpack_require__(258),
	  EventEmitter = __webpack_require__(298).EventEmitter,
	  inherits = __webpack_require__(282).inherits,
	  MongoReply = __webpack_require__(205).MongoReply,
	  Connection = __webpack_require__(183).Connection;
	
	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(207).processor();
	
	var ConnectionPool = exports.ConnectionPool = function(host, port, poolSize, bson, socketOptions) {
	  if(typeof host !== 'string') {
	    throw new Error("host must be specified [" + host + "]");
	  }
	
	  // Set up event emitter
	  EventEmitter.call(this);
	
	  // Keep all options for the socket in a specific collection allowing the user to specify the
	  // Wished upon socket connection parameters
	  this.socketOptions = typeof socketOptions === 'object' ? socketOptions : {};
	  this.socketOptions.host = host;
	  this.socketOptions.port = port;
	  this.socketOptions.domainSocket = false;
	  this.bson = bson;
	  // PoolSize is always + 1 for special reserved "measurment" socket (like ping, stats etc)
	  if (typeof poolSize !== 'number') {
	    poolSize = parseInt(poolSize.toString(), 10);
	    if (isNaN(poolSize)) {
	      throw new Error("poolSize must be a number!");
	    }
	  }
	  this.poolSize = poolSize;
	  this.minPoolSize = Math.floor(this.poolSize / 2) + 1;
	
	  // Check if the host is a socket
	  if(host.match(/^\//)) {
	    this.socketOptions.domainSocket = true;
	  } else if(typeof port === 'string') {
	    try { 
	      port = parseInt(port, 10); 
	    } catch(err) { 
	      new Error("port must be specified or valid integer["  + port + "]"); 
	    }
	  } else if(typeof port !== 'number') {
	    throw new Error("port must be specified ["  + port + "]");
	  }
	
	  // Set default settings for the socket options
	  utils.setIntegerParameter(this.socketOptions, 'timeout', 0);
	  // Delay before writing out the data to the server
	  utils.setBooleanParameter(this.socketOptions, 'noDelay', true);
	  // Delay before writing out the data to the server
	  utils.setIntegerParameter(this.socketOptions, 'keepAlive', 0);
	  // Set the encoding of the data read, default is binary == null
	  utils.setStringParameter(this.socketOptions, 'encoding', null);
	  // Allows you to set a throttling bufferSize if you need to stop overflows
	  utils.setIntegerParameter(this.socketOptions, 'bufferSize', 0);
	
	  // Internal structures
	  this.openConnections = [];
	  // Assign connection id's
	  this.connectionId = 0;
	
	  // Current index for selection of pool connection
	  this.currentConnectionIndex = 0;
	  // The pool state
	  this._poolState = 'disconnected';
	  // timeout control
	  this._timeout = false;
	  // Time to wait between connections for the pool
	  this._timeToWait = 10;
	}
	
	inherits(ConnectionPool, EventEmitter);
	
	ConnectionPool.prototype.setMaxBsonSize = function(maxBsonSize) {
	  if(maxBsonSize == null){
	    maxBsonSize = Connection.DEFAULT_MAX_BSON_SIZE;
	  }
	
	  for(var i = 0; i < this.openConnections.length; i++) {
	    this.openConnections[i].maxBsonSize = maxBsonSize;
	    this.openConnections[i].maxBsonSettings.maxBsonSize = maxBsonSize;
	  }
	}
	
	ConnectionPool.prototype.setMaxMessageSizeBytes = function(maxMessageSizeBytes) {
	  if(maxMessageSizeBytes == null){
	    maxMessageSizeBytes = Connection.DEFAULT_MAX_MESSAGE_SIZE;
	  }
	
	  for(var i = 0; i < this.openConnections.length; i++) {
	    this.openConnections[i].maxMessageSizeBytes = maxMessageSizeBytes;
	    this.openConnections[i].maxBsonSettings.maxMessageSizeBytes = maxMessageSizeBytes;
	  }
	}
	
	ConnectionPool.prototype.setMaxWriteBatchSize = function(maxWriteBatchSize) {
	  if(maxWriteBatchSize == null){
	    maxWriteBatchSize = Connection.DEFAULT_MAX_WRITE_BATCH_SIZE;
	  }
	
	  for(var i = 0; i < this.openConnections.length; i++) {
	    this.openConnections[i].maxWriteBatchSize = maxWriteBatchSize;
	  }  
	}
	
	// Start a function
	var _connect = function(_self) {
	  // return new function() {
	    // Create a new connection instance
	    var connection = new Connection(_self.connectionId++, _self.socketOptions);
	    // Set logger on pool
	    connection.logger = _self.logger;
	    // Connect handler
	    connection.on("connect", function(err, connection) {
	      // Add connection to list of open connections
	      _self.openConnections.push(connection);
	      // If the number of open connections is equal to the poolSize signal ready pool
	      if(_self.openConnections.length === _self.poolSize && _self._poolState !== 'disconnected') {
	        // Set connected
	        _self._poolState = 'connected';
	        // Emit pool ready
	        _self.emit("poolReady");
	      } else if(_self.openConnections.length < _self.poolSize) {
	        // Wait a little bit of time to let the close event happen if the server closes the connection
	        // so we don't leave hanging connections around
	        if(typeof _self._timeToWait == 'number') {
	          setTimeout(function() {
	            // If we are still connecting (no close events fired in between start another connection)
	            if(_self._poolState == 'connecting') {
	              _connect(_self);
	            }
	          }, _self._timeToWait);
	        } else {
	          processor(function() {
	            // If we are still connecting (no close events fired in between start another connection)
	            if(_self._poolState == 'connecting') {
	              _connect(_self);
	            }
	          });
	        }
	      }
	    });
	
	    var numberOfErrors = 0
	
	    // Error handler
	    connection.on("error", function(err, connection, error_options) {
	      numberOfErrors++;
	      // If we are already disconnected ignore the event
	      if(_self._poolState != 'disconnected' && _self.listeners("error").length > 0) {
	        _self.emit("error", err, connection, error_options);
	      }
	
	      // Close the connection
	      connection.close();
	      // Set pool as disconnected
	      _self._poolState = 'disconnected';
	      // Stop the pool
	      _self.stop();
	    });
	
	    // Close handler
	    connection.on("close", function() {
	      // If we are already disconnected ignore the event
	      if(_self._poolState !== 'disconnected' && _self.listeners("close").length > 0) {
	        _self.emit("close");
	      }
	
	      // Set disconnected
	      _self._poolState = 'disconnected';
	      // Stop
	      _self.stop();
	    });
	
	    // Timeout handler
	    connection.on("timeout", function(err, connection) {
	      // If we are already disconnected ignore the event
	      if(_self._poolState !== 'disconnected' && _self.listeners("timeout").length > 0) {
	        _self.emit("timeout", err);
	      }
	
	      // Close the connection
	      connection.close();
	      // Set disconnected
	      _self._poolState = 'disconnected';
	      _self.stop();
	    });
	
	    // Parse error, needs a complete shutdown of the pool
	    connection.on("parseError", function() {
	      // If we are already disconnected ignore the event
	      if(_self._poolState !== 'disconnected' && _self.listeners("parseError").length > 0) {
	        _self.emit("parseError", new Error("parseError occured"));
	      }
	
	      // Set disconnected
	      _self._poolState = 'disconnected';
	      _self.stop();
	    });
	
	    connection.on("message", function(message) {
	      _self.emit("message", message);
	    });
	
	    // Start connection in the next tick
	    connection.start();
	  // }();
	}
	
	
	// Start method, will throw error if no listeners are available
	// Pass in an instance of the listener that contains the api for
	// finding callbacks for a given message etc.
	ConnectionPool.prototype.start = function() {
	  var markerDate = new Date().getTime();
	  var self = this;
	
	  if(this.listeners("poolReady").length == 0) {
	    throw "pool must have at least one listener ready that responds to the [poolReady] event";
	  }
	
	  // Set pool state to connecting
	  this._poolState = 'connecting';
	  this._timeout = false;
	
	  _connect(self);
	}
	
	// Restart a connection pool (on a close the pool might be in a wrong state)
	ConnectionPool.prototype.restart = function() {
	  // Close all connections
	  this.stop(false);
	  // Now restart the pool
	  this.start();
	}
	
	// Stop the connections in the pool
	ConnectionPool.prototype.stop = function(removeListeners) {
	  removeListeners = removeListeners == null ? true : removeListeners;
	  // Set disconnected
	  this._poolState = 'disconnected';
	
	  // Clear all listeners if specified
	  if(removeListeners) {
	    this.removeAllEventListeners();
	  }
	
	  // Close all connections
	  for(var i = 0; i < this.openConnections.length; i++) {
	    this.openConnections[i].close();
	  }
	
	  // Clean up
	  this.openConnections = [];
	}
	
	// Check the status of the connection
	ConnectionPool.prototype.isConnected = function() {
	  // return this._poolState === 'connected';
	  return this.openConnections.length > 0 && this.openConnections[0].isConnected();
	}
	
	// Checkout a connection from the pool for usage, or grab a specific pool instance
	ConnectionPool.prototype.checkoutConnection = function(id) {
	  var index = (this.currentConnectionIndex++ % (this.openConnections.length));
	  var connection = this.openConnections[index];
	  return connection;
	}
	
	ConnectionPool.prototype.getAllConnections = function() {
	  return this.openConnections;
	}
	
	// Remove all non-needed event listeners
	ConnectionPool.prototype.removeAllEventListeners = function() {
	  this.removeAllListeners("close");
	  this.removeAllListeners("error");
	  this.removeAllListeners("timeout");
	  this.removeAllListeners("connect");
	  this.removeAllListeners("end");
	  this.removeAllListeners("parseError");
	  this.removeAllListeners("message");
	  this.removeAllListeners("poolReady");
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	exports.setIntegerParameter = function(object, field, defaultValue) {
	  if(object[field] == null) {
	    object[field] = defaultValue;
	  } else if(typeof object[field] !== "number" && object[field] !== parseInt(object[field], 10)) {
	    throw "object field [" + field + "] must be a numeric integer value, attempted to set to [" + object[field] + "] type of [" + typeof object[field] + "]";
	  }
	}
	
	exports.setBooleanParameter = function(object, field, defaultValue) {
	  if(object[field] == null) {
	    object[field] = defaultValue;
	  } else if(typeof object[field] !== "boolean") {
	    throw "object field [" + field + "] must be a boolean value, attempted to set to [" + object[field] + "] type of [" + typeof object[field] + "]";
	  }
	}
	
	exports.setStringParameter = function(object, field, defaultValue) {
	  if(object[field] == null) {
	    object[field] = defaultValue;
	  } else if(typeof object[field] !== "string") {
	    throw "object field [" + field + "] must be a string value, attempted to set to [" + object[field] + "] type of [" + typeof object[field] + "]";
	  }
	}

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var ReadPreference = __webpack_require__(187).ReadPreference
	  , Base = __webpack_require__(182).Base
	  , ServerCapabilities = __webpack_require__(195).ServerCapabilities
	  , Server = __webpack_require__(194).Server
	  , format = __webpack_require__(282).format
	  , timers = __webpack_require__(258)
	  , utils = __webpack_require__(207)
	  , inherits = __webpack_require__(282).inherits;
	
	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(207).processor();
	
	/**
	 * Mongos constructor provides a connection to a mongos proxy including failover to additional servers
	 *
	 * Options
	 *  - **socketOptions** {Object, default:null}, an object containing socket options to use (noDelay:(boolean), keepAlive:(number), connectTimeoutMS:(number), socketTimeoutMS:(number))
	 *  - **ha** {Boolean, default:true}, turn on high availability, attempts to reconnect to down proxies
	 *  - **haInterval** {Number, default:2000}, time between each replicaset status check.
	 *
	 * @class Represents a Mongos connection with failover to backup proxies
	 * @param {Array} list of mongos server objects
	 * @param {Object} [options] additional options for the mongos connection
	 */
	var Mongos = function Mongos(servers, options) {
	  // Set up basic
	  if(!(this instanceof Mongos))
	    return new Mongos(servers, options);
	
	  // Set up event emitter
	  Base.call(this);
	
	  // Throw error on wrong setup
	  if(servers == null || !Array.isArray(servers) || servers.length == 0)
	    throw new Error("At least one mongos proxy must be in the array");
	
	  // Ensure we have at least an empty options object
	  this.options = options == null ? {} : options;
	  // Set default connection pool options
	  this.socketOptions = this.options.socketOptions != null ? this.options.socketOptions : {};
	  // Enabled ha
	  this.haEnabled = this.options['ha'] == null ? true : this.options['ha'];
	  this._haInProgress = false;
	  // How often are we checking for new servers in the replicaset
	  this.mongosStatusCheckInterval = this.options['haInterval'] == null ? 1000 : this.options['haInterval'];
	  // Save all the server connections
	  this.servers = servers;
	  // Servers we need to attempt reconnect with
	  this.downServers = {};
	  // Servers that are up
	  this.upServers = {};
	  // Up servers by ping time
	  this.upServersByUpTime = {};
	  // Set poolsize or default
	  this.poolSize = this.options.poolSize || 5;
	  // Emit open setup
	  this.emitOpen = this.options.emitOpen || true;
	  // Just contains the current lowest ping time and server
	  this.lowestPingTimeServer = null;
	  this.lowestPingTime = 0;
	  // Connection timeout
	  this._connectTimeoutMS = this.socketOptions.connectTimeoutMS
	    ? this.socketOptions.connectTimeoutMS
	    : 1000;
	
	  // Add options to servers
	  for(var i = 0; i < this.servers.length; i++) {
	    var server = this.servers[i];
	    server._callBackStore = this._callBackStore;
	    server.auto_reconnect = false;
	    
	    // Override pool size
	    if(typeof this.poolSize == 'number') {
	      server.poolSize = this.poolSize
	    }
	    
	    // Default empty socket options object
	    var socketOptions = {host: server.host, port: server.port};
	    // If a socket option object exists clone it
	    if(this.socketOptions != null) {
	      var keys = Object.keys(this.socketOptions);
	      for(var k = 0; k < keys.length;k++) socketOptions[keys[i]] = this.socketOptions[keys[i]];
	    }
	
	    // Set socket options
	    server.socketOptions = socketOptions;
	  }
	
	  // Allow setting the socketTimeoutMS on all connections
	  // to work around issues such as secondaries blocking due to compaction
	  utils.setSocketTimeoutProperty(this, this.socketOptions);  
	}
	
	/**
	 * @ignore
	 */
	inherits(Mongos, Base);
	
	/**
	 * @ignore
	 */
	Mongos.prototype.isMongos = function() {
	  return true;
	}
	
	/**
	 * @ignore
	 */
	Mongos.prototype.connect = function(db, options, callback) {
	  if('function' === typeof options) callback = options, options = {};
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;
	  var self = this;
	
	  // Keep reference to parent
	  this.db = db;
	  // Set server state to connecting
	  this._serverState = 'connecting';
	  // Number of total servers that need to initialized (known servers)
	  this._numberOfServersLeftToInitialize = this.servers.length;  
	  // Connect handler
	  var connectHandler = function(_server) {
	    return function(err, result) {
	      self._numberOfServersLeftToInitialize = self._numberOfServersLeftToInitialize - 1;
	
	      // Add server capabilities
	      if(_server.isMasterDoc) {
	        // Set server capabilities
	        _server.serverCapabilities = new ServerCapabilities(_server.isMasterDoc);
	
	        // Set server capabilities on all the connections
	        var connections = _server.allRawConnections();
	        for(var i = 0; i < connections.length; i++) {
	          connections[i].serverCapabilities = _server.serverCapabilities;
	        }                
	      }
	
	      // Add the server to the list of servers that are up
	      if(!err) {
	        self.upServers[format("%s:%s", _server.host, _server.port)] = _server;
	      }
	
	      // We are done connecting
	      if(self._numberOfServersLeftToInitialize == 0) {
	        // If we have no valid mongos server instances error out
	        if(Object.keys(self.upServers).length == 0) {
	          // return self.emit("connectionError", new Error("No valid mongos instances found"));
	          return callback(new Error("No valid mongos instances found"), null);
	        }
	
	        // Start ha function if it exists
	        if(self.haEnabled) {
	          // Setup the ha process
	          if(self._replicasetTimeoutId != null) clearInterval(self._replicasetTimeoutId);
	          self._replicasetTimeoutId = setInterval(self.mongosCheckFunction, self.mongosStatusCheckInterval);
	        }
	
	        // Set the mongos to connected
	        self._serverState = "connected";
	
	        // Emit the open event
	        if(self.emitOpen)
	          self._emitAcrossAllDbInstances(self, null, "open", null, null, null);        
	
	        self._emitAcrossAllDbInstances(self, null, "fullsetup", null, null, null);      
	        // Callback
	        callback(null, self.db);
	      }
	    }
	  };
	
	  // Error handler
	  var errorOrCloseHandler = function(_server) {
	    return function(err, result) {
	      // Emit left event, signaling mongos left the ha
	      self.emit('left', 'mongos', _server);
	      // Execute all the callbacks with errors
	      self.__executeAllCallbacksWithError(err);
	      // Check if we have the server
	      var found = false;
	      
	      // Get the server name
	      var server_name = format("%s:%s", _server.host, _server.port);
	      // Add the downed server
	      self.downServers[server_name] = _server;
	      // Remove the current server from the list
	      delete self.upServers[server_name]; 
	
	      // Emit close across all the attached db instances
	      if(Object.keys(self.upServers).length == 0) {
	        self._emitAcrossAllDbInstances(self, null, "close", new Error("mongos disconnected, no valid proxies contactable over tcp"), null, null);
	      }
	    }
	  }
	
	  // Mongo function
	  this.mongosCheckFunction = function() {
	    // Set as not waiting for check event 
	    self._haInProgress = true;
	    
	    // Servers down
	    var numberOfServersLeft = Object.keys(self.downServers).length;
	    
	    // Check downed servers
	    if(numberOfServersLeft > 0) {
	      for(var name in self.downServers) {
	        // Pop a downed server      
	        var downServer = self.downServers[name];
	        // Set up the connection options for a Mongos
	        var options = {
	          auto_reconnect: false,
	          returnIsMasterResults: true,
	          slaveOk: true,
	          poolSize: self.poolSize,
	          socketOptions: { 
	            connectTimeoutMS: self._connectTimeoutMS,
	            socketTimeoutMS: self._socketTimeoutMS
	          }          
	        }
	
	        // Create a new server object
	        var newServer = new Server(downServer.host, downServer.port, options);
	        // Setup the connection function
	        var connectFunction = function(_db, _server, _options, _callback)  {
	          return function() {
	            // Attempt to connect
	            _server.connect(_db, _options, function(err, result) {
	              numberOfServersLeft = numberOfServersLeft - 1;
	
	              // Add server capabilities
	              if(_server.isMasterDoc) {
	                // Set server capabilities
	                _server.serverCapabilities = new ServerCapabilities(_server.isMasterDoc);
	
	                // Set server capabilities on all the connections
	                var connections = _server.allRawConnections();
	                for(var i = 0; i < connections.length; i++) {
	                  connections[i].serverCapabilities = _server.serverCapabilities;
	                }                
	              }
	
	              if(err) {
	                return _callback(err, _server);
	              } else {                
	                // Set the new server settings
	                _server._callBackStore = self._callBackStore;
	
	                // Add server event handlers
	                _server.on("close", errorOrCloseHandler(_server));
	                _server.on("timeout", errorOrCloseHandler(_server));
	                _server.on("error", errorOrCloseHandler(_server));
	                
	                // Get a read connection
	                var _connection = _server.checkoutReader();
	                // Get the start time
	                var startTime = new Date().getTime();
	                
	                // Execute ping command to mark each server with the expected times
	                self.db.command({ping:1}
	                  , {failFast:true, connection:_connection}, function(err, result) {
	                  // Get the start time
	                  var endTime = new Date().getTime();
	                  // Mark the server with the ping time
	                  _server.runtimeStats['pingMs'] = endTime - startTime;
	
	                  // If we have any buffered commands let's signal reconnect event
	                  if(self._commandsStore.count() > 0) {
	                    self.emit('reconnect');
	                  }
	
	                  // Execute any waiting reads
	                  self._commandsStore.execute_writes();   
	                  self._commandsStore.execute_queries();   
	                  // Callback
	                  return _callback(null, _server);
	                });
	              }
	            });
	          }
	        } 
	
	        // Attempt to connect to the database
	        connectFunction(self.db, newServer, options, function(err, _server) {
	          // If we have an error
	          if(err) {
	            self.downServers[format("%s:%s", _server.host, _server.port)] = _server;
	          }
	
	          // Connection function
	          var connectionFunction = function(_auth, _connection, _callback) {
	            var pending = _auth.length();
	
	            for(var j = 0; j < pending; j++) {
	              // Get the auth object
	              var _auth = _auth.get(j);
	              // Unpack the parameter
	              var username = _auth.username;
	              var password = _auth.password;
	              var options = { 
	                  authMechanism: _auth.authMechanism
	                , authSource: _auth.authdb
	                , connection: _connection 
	              };
	
	              // If we have changed the service name
	              if(_auth.gssapiServiceName) 
	                options.gssapiServiceName = _auth.gssapiServiceName;
	
	              // Hold any error
	              var _error = null;
	              // Authenticate against the credentials
	              self.db.authenticate(username, password, options, function(err, result) {
	                _error = err != null ? err : _error;
	                // Adjust the pending authentication
	                pending = pending - 1;
	                // Finished up
	                if(pending == 0) _callback(_error ? _error : null, _error ? false : true);
	              });
	            }
	          }
	
	          // Run auths against the connections
	          if(self.auth.length() > 0) {
	            var connections = _server.allRawConnections();
	            var pendingAuthConn = connections.length;
	
	            // No connections we are done
	            if(connections.length == 0) {
	              // Set ha done
	              if(numberOfServersLeft == 0) {
	                self._haInProgress = false;
	              }              
	            }
	
	            // Final error object
	            var finalError = null;
	            // Go over all the connections
	            for(var j = 0; j < connections.length; j++) {
	              
	              // Execute against all the connections
	              connectionFunction(self.auth, connections[j], function(err, result) {
	                // Pending authentication
	                pendingAuthConn = pendingAuthConn - 1 ;
	
	                // Save error if any
	                finalError = err ? err : finalError;
	
	                // If we are done let's finish up
	                if(pendingAuthConn == 0) {
	                  // Set ha done
	                  if(numberOfServersLeft == 0) {
	                    self._haInProgress = false;
	                  }
	
	                  if(!err) {
	                    add_server(self, _server);
	                  }
	
	                  // If we have any buffered commands let's signal reconnect event
	                  if(self._commandsStore.count() > 0) {
	                    self.emit('reconnect');
	                  }
	
	                  // Execute any waiting reads
	                  self._commandsStore.execute_writes();   
	                  self._commandsStore.execute_queries();                  
	                }
	              });
	            }
	          } else {
	            if(!err) {
	              add_server(self, _server);
	            }
	
	            // Set ha done
	            if(numberOfServersLeft == 0) {
	              self._haInProgress = false;
	
	              // If we have any buffered commands let's signal reconnect event
	              if(self._commandsStore.count() > 0) {
	                self.emit('reconnect');
	              }
	
	              // Execute any waiting reads
	              self._commandsStore.execute_writes();   
	              self._commandsStore.execute_queries();   
	            }
	          }
	        })();
	      }
	    } else {
	      self._haInProgress = false;
	    }
	  }
	
	  // Connect all the server instances
	  for(var i = 0; i < this.servers.length; i++) {
	    // Get the connection
	    var server = this.servers[i];
	    server.mongosInstance = this;
	    // Add server event handlers
	    server.on("close", errorOrCloseHandler(server));
	    server.on("timeout", errorOrCloseHandler(server));
	    server.on("error", errorOrCloseHandler(server));
	    
	    // Configuration
	    var options = {
	      slaveOk: true,
	      poolSize: this.poolSize || server.poolSize,
	      socketOptions: { connectTimeoutMS: self._connectTimeoutMS },
	      returnIsMasterResults: true
	    }        
	
	    // Connect the instance
	    server.connect(self.db, options, connectHandler(server));
	  }
	}
	
	/**
	 * @ignore
	 * Add a server to the list of up servers and sort them by ping time
	 */
	var add_server = function(self, _server) {
	  // Emit a new server joined
	  self.emit('joined', "mongos", null, _server);
	  // Get the server url
	  var server_key = format("%s:%s", _server.host, _server.port);
	  // Push to list of valid server
	  self.upServers[server_key] = _server;
	  // Remove the server from the list of downed servers
	  delete self.downServers[server_key];              
	
	  // Sort the keys by ping time
	  var keys = Object.keys(self.upServers);
	  var _upServersSorted = {};
	  var _upServers = []
	  
	  // Get all the servers
	  for(var name in self.upServers) {
	    _upServers.push(self.upServers[name]);
	  }
	
	  // Sort all the server
	  _upServers.sort(function(a, b) {
	    return a.runtimeStats['pingMs'] > b.runtimeStats['pingMs'];
	  });
	
	  // Rebuild the upServer
	  for(var i = 0; i < _upServers.length; i++) {
	    _upServersSorted[format("%s:%s", _upServers[i].host, _upServers[i].port)] = _upServers[i];
	  }
	
	  // Set the up servers
	  self.upServers = _upServersSorted;
	}
	
	/**
	 * @ignore
	 * Just return the currently picked active connection
	 */
	Mongos.prototype.allServerInstances = function() {
	  return this.servers;
	}
	
	/**
	 * @ignore
	 */
	Mongos.prototype.setSocketOptions = function(options) {
	  var servers = this.allServerInstances();
	  for(var i = 0; i < servers.length; i++) {
	    servers[i].setSocketOptions(options);
	  }
	}
	
	/**
	 * Always ourselves
	 * @ignore
	 */
	Mongos.prototype.setReadPreference = function() {}
	
	/**
	 * @ignore
	 */
	Mongos.prototype.allRawConnections = function() {
	  // Neeed to build a complete list of all raw connections, start with master server
	  var allConnections = [];
	  // Get all connected connections
	  for(var name in this.upServers) {
	    allConnections = allConnections.concat(this.upServers[name].allRawConnections());
	  }
	  // Return all the conections
	  return allConnections;
	}
	
	/**
	 * @ignore
	 */
	Mongos.prototype.isConnected = function() {
	  return Object.keys(this.upServers).length > 0;
	}
	
	/**
	 * @ignore
	 */
	Mongos.prototype.isAutoReconnect = function() {
	  return true;
	}
	
	/**
	 * @ignore
	 */
	Mongos.prototype.canWrite = Mongos.prototype.isConnected;
	
	/**
	 * @ignore
	 */
	Mongos.prototype.canRead = Mongos.prototype.isConnected;
	
	/**
	 * @ignore
	 */
	Mongos.prototype.isDestroyed = function() {
	  return this._serverState == 'destroyed';
	}
	
	/**
	 * @ignore
	 */
	Mongos.prototype.checkoutWriter = function() {
	  // Checkout a writer
	  var keys = Object.keys(this.upServers);
	  if(keys.length == 0) return null;
	  return this.upServers[keys[0]].checkoutWriter();
	}
	
	/**
	 * @ignore
	 */
	Mongos.prototype.checkoutReader = function(read) {
	  // If read is set to null default to primary
	  read = read || 'primary'
	  // If we have a read preference object unpack it
	  if(read != null && typeof read == 'object' && read['_type'] == 'ReadPreference') {
	    // Validate if the object is using a valid mode
	    if(!read.isValid()) throw new Error("Illegal readPreference mode specified, " + JSON.stringify(read));
	  } else if(!ReadPreference.isValid(read)) {
	    throw new Error("Illegal readPreference mode specified, " + JSON.stringify(read));
	  }
	
	  // Checkout a writer
	  var keys = Object.keys(this.upServers);
	  if(keys.length == 0) return null;
	  return this.upServers[keys[0]].checkoutWriter();
	}
	
	/**
	 * @ignore
	 */
	Mongos.prototype.close = function(callback) {
	  var self = this;
	  // Set server status as disconnected
	  this._serverState = 'destroyed';
	  // Number of connections to close
	  var numberOfConnectionsToClose = self.servers.length;
	  // If we have a ha process running kill it
	  if(self._replicasetTimeoutId != null) clearInterval(self._replicasetTimeoutId);
	  self._replicasetTimeoutId = null;
	  
	  // Emit close event
	  processor(function() {
	    self._emitAcrossAllDbInstances(self, null, "close", null, null, true)    
	  });
	
	  // Flush out any remaining call handlers
	  self._flushAllCallHandlers(utils.toError("Connection Closed By Application"));
	
	  // No up servers just return
	  if(Object.keys(this.upServers) == 0) {
	    return callback(null);
	  }
	
	  // Close all the up servers
	  for(var name in this.upServers) {
	    this.upServers[name].close(function(err, result) {
	      numberOfConnectionsToClose = numberOfConnectionsToClose - 1;
	
	      // Callback if we have one defined
	      if(numberOfConnectionsToClose == 0 && typeof callback == 'function') {
	        callback(null);
	      }
	    });
	  }
	}
	
	/**
	 * @ignore
	 * Return the used state
	 */
	Mongos.prototype._isUsed = function() {
	  return this._used;
	}
	
	exports.Mongos = Mongos;

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * A class representation of the Read Preference.
	 *
	 * Read Preferences
	 *  - **ReadPreference.PRIMARY**, Read from primary only. All operations produce an error (throw an exception where applicable) if primary is unavailable. Cannot be combined with tags (This is the default.).
	 *  - **ReadPreference.PRIMARY_PREFERRED**, Read from primary if available, otherwise a secondary.
	 *  - **ReadPreference.SECONDARY**, Read from secondary if available, otherwise error.
	 *  - **ReadPreference.SECONDARY_PREFERRED**, Read from a secondary if available, otherwise read from the primary.
	 *  - **ReadPreference.NEAREST**, All modes read from among the nearest candidates, but unlike other modes, NEAREST will include both the primary and all secondaries in the random selection.
	 *
	 * @class Represents a Read Preference.
	 * @param {String} the read preference type
	 * @param {Object} tags
	 * @return {ReadPreference}
	 */
	var ReadPreference = function(mode, tags) {
	  if(!(this instanceof ReadPreference))
	    return new ReadPreference(mode, tags);
	  this._type = 'ReadPreference';
	  this.mode = mode;
	  this.tags = tags;
	}
	
	/**
	 * @ignore
	 */
	ReadPreference.isValid = function(_mode) {
	  return (_mode == ReadPreference.PRIMARY || _mode == ReadPreference.PRIMARY_PREFERRED
	    || _mode == ReadPreference.SECONDARY || _mode == ReadPreference.SECONDARY_PREFERRED
	    || _mode == ReadPreference.NEAREST
	    || _mode == true || _mode == false || _mode == null);
	}
	
	/**
	 * @ignore
	 */
	ReadPreference.prototype.isValid = function(mode) {
	  var _mode = typeof mode == 'string' ? mode : this.mode;
	  return ReadPreference.isValid(_mode);
	}
	
	/**
	 * @ignore
	 */
	ReadPreference.prototype.toObject = function() {
	  var object = {mode:this.mode};
	
	  if(this.tags != null) {
	    object['tags'] = this.tags;
	  }
	
	  return object;
	}
	
	/**
	 * @ignore
	 */
	ReadPreference.PRIMARY = 'primary';
	ReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';
	ReadPreference.SECONDARY = 'secondary';
	ReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';
	ReadPreference.NEAREST = 'nearest'
	
	/**
	 * @ignore
	 */
	exports.ReadPreference  = ReadPreference;

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	var DbCommand = __webpack_require__(175).DbCommand
	  , ServerCapabilities = __webpack_require__(195).ServerCapabilities
	  , format = __webpack_require__(282).format;
	
	var HighAvailabilityProcess = function(replset, options) {  
	  this.replset = replset;
	  this.options = options;
	  this.server = null;
	  this.state = HighAvailabilityProcess.INIT;
	  this.selectedIndex = 0;
	}
	
	HighAvailabilityProcess.INIT = 'init';
	HighAvailabilityProcess.RUNNING = 'running';
	HighAvailabilityProcess.STOPPED = 'stopped';
	
	HighAvailabilityProcess.prototype.start = function() {  
	  var self = this;
	  if(this.replset._state 
	    && Object.keys(this.replset._state.addresses).length == 0) {
	    if(this.server) this.server.close();
	    this.state = HighAvailabilityProcess.STOPPED;
	    return;      
	  }
	
	  if(this.server) this.server.close();
	  // Start the running
	  this._haProcessInProcess = false;
	  this.state = HighAvailabilityProcess.RUNNING;
	  
	  // Get all possible reader servers
	  var candidate_servers = this.replset._state.getAllReadServers();
	  if(candidate_servers.length == 0) {
	    return;
	  }
	
	  // Select a candidate server for the connection
	  var server = candidate_servers[this.selectedIndex % candidate_servers.length];
	  this.selectedIndex = this.selectedIndex + 1;
	  
	  // Unpack connection options
	  var connectTimeoutMS = self.options.connectTimeoutMS || 10000;
	  var socketTimeoutMS = self.options.socketTimeoutMS || 30000;
	
	  // Just ensure we don't have a full cycle dependency
	  var Db = __webpack_require__(199).Db
	  var Server = __webpack_require__(194).Server;
	
	  // Set up a new server instance
	  var newServer = new Server(server.host, server.port, {
	      auto_reconnect: false
	    , returnIsMasterResults: true
	    , poolSize: 1
	    , socketOptions: { 
	        connectTimeoutMS: connectTimeoutMS,
	        socketTimeoutMS: socketTimeoutMS,
	        keepAlive: 100
	      }
	    , ssl: self.replset.options.ssl
	    , sslValidate: self.replset.options.sslValidate
	    , sslCA: self.replset.options.sslCA
	    , sslCert: self.replset.options.sslCert
	    , sslKey: self.replset.options.sslKey
	    , sslPass: self.replset.options.sslPass
	  });
	
	  // Create new dummy db for app
	  self.db = new Db('local', newServer, {w:1});
	
	  // Set up the event listeners
	  newServer.once("error", _handle(this, newServer));
	  newServer.once("close", _handle(this, newServer));
	  newServer.once("timeout", _handle(this, newServer));
	  newServer.name = format("%s:%s", server.host, server.port);
	
	  // Let's attempt a connection over here
	  newServer.connect(self.db, function(err, result, _server) {
	    // Emit ha_connect
	    self.replset.emit("ha_connect", err, result, _server);
	
	    if(self.state == HighAvailabilityProcess.STOPPED) {
	      _server.close();
	    }
	
	    // Ensure server capabilities object is on all connections
	    if(_server.isMasterDoc) {
	      // Set server capabilities
	      _server.serverCapabilities = new ServerCapabilities(_server.isMasterDoc);
	
	      // Set server capabilities on all the connections
	      var connections = _server.allRawConnections();
	      for(var i = 0; i < connections.length; i++) {
	        connections[i].serverCapabilities = _server.serverCapabilities;
	      }      
	    }
	
	    if(err) {
	      // Close the server
	      _server.close();
	      // Check if we can even do HA (is there anything running)
	      if(Object.keys(self.replset._state.addresses).length == 0) {
	        return;
	      }
	      
	      // Let's boot the ha timeout settings
	      setTimeout(function() {
	        self.start();
	      }, self.options.haInterval);
	    } else {
	      self.server = _server;
	      // Let's boot the ha timeout settings
	      setTimeout(_timeoutHandle(self), self.options.haInterval);
	    }
	  });
	}
	
	HighAvailabilityProcess.prototype.stop = function() {
	  this.state = HighAvailabilityProcess.STOPPED;
	  if(this.server) this.server.close();
	}
	
	var _timeoutHandle = function(self) {
	  return function() {
	    if(self.state == HighAvailabilityProcess.STOPPED) {
	      // Stop all server instances
	      for(var name in self.replset._state.addresses) {
	        self.replset._state.addresses[name].close();
	        delete self.replset._state.addresses[name];
	      }
	
	      // Finished pinging
	      return;
	    }
	
	    // If the server is connected
	    if(self.server.isConnected() && !self._haProcessInProcess) {
	      // Start HA process
	      self._haProcessInProcess = true;
	      // Execute is master command
	      self.db._executeQueryCommand(DbCommand.createIsMasterCommand(self.db), 
	          {failFast:true, connection: self.server.checkoutReader()}
	        , function(err, res) {
	          // Emit ha event
	          self.replset.emit("ha_ismaster", err, res);
	
	          // If we have an error close
	          if(err) {
	            self.server.close();
	            // Re-run loop
	            return setTimeout(_timeoutHandle(self), self.options.haInterval);
	          }
	
	          // Master document
	          var master = res.documents[0];
	          var hosts = master.hosts || [];
	          var reconnect_servers = [];
	          var state = self.replset._state;
	
	          // We are in recovery mode, let's remove the current server
	          if(!master.ismaster 
	            && !master.secondary
	            && state.addresses[master.me]) {
	              self.server.close();
	              state.addresses[master.me].close();
	              delete state.secondaries[master.me];
	              // Re-run loop
	              return setTimeout(_timeoutHandle(self), self.options.haInterval);
	          }
	
	          // We have a new master different front he current one
	          if((master.primary && state.master == null)
	            || (master.primary && state.master.name != master.primary)) {
	
	            // Locate the primary and set it
	            if(state.addresses[master.primary]) {
	              if(state.master) state.master.close();
	              delete state.secondaries[master.primary];
	              state.master = state.addresses[master.primary];
	            }
	
	            // Emit joined event due to primary change
	            self.replset.emit('joined', "primary", master, state.master);
	            
	            // Set up the changes
	            if(state.master != null && state.master.isMasterDoc != null) {
	              state.master.isMasterDoc.ismaster = true;
	              state.master.isMasterDoc.secondary = false;                
	            } else if(state.master != null) {
	              state.master.isMasterDoc = master;
	              state.master.isMasterDoc.ismaster = true;
	              state.master.isMasterDoc.secondary = false;                
	            }
	
	            // If we have any buffered commands let's signal reconnect event
	            if(self.replset._commandsStore.count() > 0) {
	              self.replset.emit('reconnect');
	            }
	
	            // Execute any waiting commands (queries or writes)
	            self.replset._commandsStore.execute_queries();
	            self.replset._commandsStore.execute_writes();   
	          }
	
	          // For all the hosts let's check that we have connections
	          for(var i = 0; i < hosts.length; i++) {
	            var host = hosts[i];
	            
	            // Check if we need to reconnect to a server
	            if(state.addresses[host] == null) {
	              reconnect_servers.push(host);
	            } else if(state.addresses[host] && !state.addresses[host].isConnected()) {
	              state.addresses[host].close();
	              delete state.secondaries[host];
	              reconnect_servers.push(host);              
	            }
	          }
	
	          // Let's reconnect to any server needed
	          if(reconnect_servers.length > 0) {
	            _reconnect_servers(self, reconnect_servers);  
	          } else {
	            self._haProcessInProcess = false
	            return setTimeout(_timeoutHandle(self), self.options.haInterval);
	          }
	      });
	    } else if(!self.server.isConnected()) {
	      setTimeout(function() {
	        return self.start();
	      }, self.options.haInterval);
	    } else {
	      setTimeout(_timeoutHandle(self), self.options.haInterval);
	    }
	  }
	}
	
	var _reconnect_servers = function(self, reconnect_servers) {
	  if(reconnect_servers.length == 0) {
	    self._haProcessInProcess = false    
	    return setTimeout(_timeoutHandle(self), self.options.haInterval);
	  }
	
	  // Unpack connection options
	  var connectTimeoutMS = self.options.connectTimeoutMS || 10000;
	  var socketTimeoutMS = self.options.socketTimeoutMS || 0;
	
	  // Server class
	  var Db = __webpack_require__(199).Db
	  var Server = __webpack_require__(194).Server;
	  // Get the host
	  var host = reconnect_servers.shift();
	  // Split it up
	  var _host = host.split(":")[0];
	  var _port = parseInt(host.split(":")[1], 10);
	
	  // Set up a new server instance
	  var newServer = new Server(_host, _port, {
	      auto_reconnect: false
	    , returnIsMasterResults: true
	    , poolSize: self.options.poolSize
	    , socketOptions: { 
	        connectTimeoutMS: connectTimeoutMS,
	        socketTimeoutMS: socketTimeoutMS
	      }
	    , ssl: self.replset.options.ssl
	    , sslValidate: self.replset.options.sslValidate
	    , sslCA: self.replset.options.sslCA
	    , sslCert: self.replset.options.sslCert
	    , sslKey: self.replset.options.sslKey
	    , sslPass: self.replset.options.sslPass
	  });
	
	  // Create new dummy db for app
	  var db = new Db('local', newServer, {w:1});
	  var state = self.replset._state;
	
	  // Set up the event listeners
	  newServer.once("error", _repl_set_handler("error", self.replset, newServer));
	  newServer.once("close", _repl_set_handler("close", self.replset, newServer));
	  newServer.once("timeout", _repl_set_handler("timeout", self.replset, newServer));
	
	  // Set shared state
	  newServer.name = host;
	  newServer._callBackStore = self.replset._callBackStore;
	  newServer.replicasetInstance = self.replset;
	  newServer.enableRecordQueryStats(self.replset.recordQueryStats);
	
	  // Let's attempt a connection over here
	  newServer.connect(db, function(err, result, _server) {
	    // Emit ha_connect
	    self.replset.emit("ha_connect", err, result, _server);
	
	    if(self.state == HighAvailabilityProcess.STOPPED) {
	      _server.close();
	    }
	
	    // Ensure server capabilities object is on all connections
	    if(_server.isMasterDoc) {
	      // Set server capabilities
	      _server.serverCapabilities = new ServerCapabilities(_server.isMasterDoc);
	
	      // Set server capabilities on all the connections
	      var connections = _server.allRawConnections();
	      for(var i = 0; i < connections.length; i++) {
	        connections[i].serverCapabilities = _server.serverCapabilities;
	      }      
	    }
	
	    // If we connected let's check what kind of server we have
	    if(!err) {
	      _apply_auths(self, db, _server, function(err, result) {
	        if(err) {
	          _server.close();
	          // Process the next server
	          return setTimeout(function() {
	            _reconnect_servers(self, reconnect_servers);  
	          }, self.options.haInterval);                      
	        }
	        
	        var doc = _server.isMasterDoc;    
	        // Fire error on any unknown callbacks for this server
	        self.replset.__executeAllServerSpecificErrorCallbacks(_server.socketOptions.host, _server.socketOptions.port, err);    
	
	        if(doc.ismaster) {
	          // Emit primary added
	          self.replset.emit('joined', "primary", doc, _server);
	
	          // If it was a secondary remove it
	          if(state.secondaries[doc.me]) {
	            delete state.secondaries[doc.me];
	          }
	
	          // Override any server in list of addresses
	          state.addresses[doc.me] = _server;
	          // Set server as master
	          state.master = _server;
	
	          // If we have any buffered commands let's signal reconnect event
	          if(self.replset._commandsStore.count() > 0) {
	            self.replset.emit('reconnect');
	          }
	
	          // Execute any waiting writes
	          self.replset._commandsStore.execute_writes();   
	        } else if(doc.secondary) {
	          // Emit secondary added
	          self.replset.emit('joined', "secondary", doc, _server);
	          // Add the secondary to the state
	          state.secondaries[doc.me] = _server;
	          // Override any server in list of addresses
	          state.addresses[doc.me] = _server;
	
	          // If we have any buffered commands let's signal reconnect event
	          if(self.replset._commandsStore.count() > 0) {
	            self.replset.emit('reconnect');
	          }
	
	          // Execute any waiting reads
	          self.replset._commandsStore.execute_queries();   
	        } else {
	          _server.close();
	        }
	
	        // Set any tags on the instance server
	        _server.name = doc.me;
	        _server.tags = doc.tags;
	        // Process the next server
	        setTimeout(function() {
	          _reconnect_servers(self, reconnect_servers);  
	        }, self.options.haInterval);            
	      });
	    } else {
	      _server.close();
	      self.replset.__executeAllServerSpecificErrorCallbacks(_server.socketOptions.host, _server.socketOptions.port, err);    
	
	      setTimeout(function() {
	        _reconnect_servers(self, reconnect_servers);  
	      }, self.options.haInterval);            
	    }
	  });
	}
	
	var _apply_auths = function(self, _db, _server, _callback) {
	  if(self.replset.auth.length() == 0) return _callback(null);
	  // Apply any authentication needed
	  if(self.replset.auth.length() > 0) {
	    var pending = self.replset.auth.length();
	    var connections = _server.allRawConnections();
	    var pendingAuthConn = connections.length;
	    // Connection function
	    var connectionFunction = function(auth, _connection, __callback) {
	      var pending = auth.length();
	
	      for(var j = 0; j < pending; j++) {
	        // Get the auth object
	        var _auth = auth.get(j);
	        // Unpack the parameter
	        var username = _auth.username;
	        var password = _auth.password;
	        var options = { 
	            authMechanism: _auth.authMechanism            
	          , authSource: _auth.authdb
	          , connection: _connection 
	        };
	
	        // If we have changed the service name
	        if(_auth.gssapiServiceName) 
	          options.gssapiServiceName = _auth.gssapiServiceName;
	        
	        // Hold any error
	        var _error = null;
	        
	        // Authenticate against the credentials
	        _db.authenticate(username, password, options, function(err, result) {
	          _error = err != null ? err : _error;
	          // Adjust the pending authentication
	          pending = pending - 1;
	          // Finished up
	          if(pending == 0) __callback(_error ? _error : null, _error ? false : true);
	        });
	      }
	    }
	
	    // Final error object
	    var finalError = null;
	    // Iterate over all the connections
	    for(var i = 0; i < connections.length; i++) {
	      connectionFunction(self.replset.auth, connections[i], function(err, result) {
	        // Pending authentication
	        pendingAuthConn = pendingAuthConn - 1 ;
	
	        // Save error if any
	        finalError = err ? err : finalError;
	
	        // If we are done let's finish up
	        if(pendingAuthConn == 0) {
	          _callback(null);
	        }
	      });
	    }
	  }
	}
	
	var _handle = function(self, server) {
	  return function(err) {
	    server.close();    
	  }
	}
	
	var _repl_set_handler = function(event, self, server) {
	  var ReplSet = __webpack_require__(190).ReplSet;
	
	  return function(err, doc) {
	    server.close();
	
	    // The event happened to a primary
	    // Remove it from play
	    if(self._state.isPrimary(server)) {
	      self._state.master == null;
	      self._serverState = ReplSet.REPLSET_READ_ONLY;
	    } else if(self._state.isSecondary(server)) {
	      delete self._state.secondaries[server.name];
	    }
	
	    // Unpack variables
	    var host = server.socketOptions.host;
	    var port = server.socketOptions.port;
	
	    // Fire error on any unknown callbacks
	    self.__executeAllServerSpecificErrorCallbacks(host, port, err);    
	  }
	}
	
	exports.HighAvailabilityProcess = HighAvailabilityProcess;


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	var PingStrategy = __webpack_require__(192).PingStrategy
	  , StatisticsStrategy = __webpack_require__(193).StatisticsStrategy
	  , ReadPreference = __webpack_require__(187).ReadPreference;
	
	var Options = function(options) {
	  options = options || {};
	  this._options = options;
	  this.ha = options.ha || true;
	  this.haInterval = options.haInterval || 2000;
	  this.reconnectWait = options.reconnectWait || 1000;
	  this.retries = options.retries || 30;
	  this.rs_name = options.rs_name;
	  this.socketOptions = options.socketOptions || {};
	  this.readPreference = options.readPreference;
	  this.readSecondary = options.read_secondary;
	  this.poolSize = options.poolSize == null ? 5 : options.poolSize;
	  this.strategy = options.strategy || 'ping';
	  this.secondaryAcceptableLatencyMS = options.secondaryAcceptableLatencyMS || 15;
	  this.connectArbiter = options.connectArbiter || false;
	  this.connectWithNoPrimary = options.connectWithNoPrimary || false;
	  this.logger = options.logger;
	  this.ssl = options.ssl || false;
	  this.sslValidate = options.sslValidate || false;
	  this.sslCA = options.sslCA;
	  this.sslCert = options.sslCert;
	  this.sslKey = options.sslKey;
	  this.sslPass = options.sslPass;
	  this.emitOpen = options.emitOpen || true;
	}
	
	Options.prototype.init = function() {
	  if(this.sslValidate && (!Array.isArray(this.sslCA) || this.sslCA.length == 0)) {
	    throw new Error("The driver expects an Array of CA certificates in the sslCA parameter when enabling sslValidate");
	  }  
	
	  // Make sure strategy is one of the two allowed
	  if(this.strategy != null && (this.strategy != 'ping' && this.strategy != 'statistical' && this.strategy != 'none')) 
	      throw new Error("Only ping or statistical strategies allowed");    
	  
	  if(this.strategy == null) this.strategy = 'ping';
	  
	  // Set logger if strategy exists
	  if(this.strategyInstance) this.strategyInstance.logger = this.logger;
	
	  // Unpack read Preference
	  var readPreference = this.readPreference;
	  // Validate correctness of Read preferences
	  if(readPreference != null) {
	    if(readPreference != ReadPreference.PRIMARY && readPreference != ReadPreference.PRIMARY_PREFERRED
	      && readPreference != ReadPreference.SECONDARY && readPreference != ReadPreference.SECONDARY_PREFERRED
	      && readPreference != ReadPreference.NEAREST && typeof readPreference != 'object' && readPreference['_type'] != 'ReadPreference') {
	      throw new Error("Illegal readPreference mode specified, " + JSON.stringify(readPreference));
	    }
	
	    this.readPreference = readPreference;
	  } else {
	    this.readPreference = null;
	  } 
	
	     // Ensure read_secondary is set correctly
	  if(this.readSecondary != null)
	    this.readSecondary = this.readPreference == ReadPreference.PRIMARY 
	        || this.readPreference == false  
	        || this.readPreference == null ? false : true;
	
	  // Ensure correct slave set
	  if(this.readSecondary) this.slaveOk = true;
	
	  // Set up logger if any set
	  this.logger = this.logger != null
	    && (typeof this.logger.debug == 'function')
	    && (typeof this.logger.error == 'function')
	    && (typeof this.logger.debug == 'function')
	      ? this.logger : {error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}};  
	
	  // Connection timeout
	  this.connectTimeoutMS = typeof this.socketOptions.connectTimeoutMS == 'number'
	    ? this.socketOptions.connectTimeoutMS
	    : 1000;
	
	  // Socket connection timeout
	  this.socketTimeoutMS = typeof this.socketOptions.socketTimeoutMS == 'number'
	    ? this.socketOptions.socketTimeoutMS
	    : 30000;
	}
	
	Options.prototype.decorateAndClean = function(servers, callBackStore) {
	  var self = this;
	
	  // var de duplicate list
	  var uniqueServers = {};
	  // De-duplicate any servers in the seed list
	  for(var i = 0; i < servers.length; i++) {
	    var server = servers[i];
	    // If server does not exist set it
	    if(uniqueServers[server.host + ":" + server.port] == null) {
	      uniqueServers[server.host + ":" + server.port] = server;
	    }
	  }
	
	  // Let's set the deduplicated list of servers
	  var finalServers = [];
	  // Add the servers
	  for(var key in uniqueServers) {
	    finalServers.push(uniqueServers[key]);
	  }
	
	  finalServers.forEach(function(server) {
	    // Ensure no server has reconnect on
	    server.options.auto_reconnect = false;
	    // Set up ssl options
	    server.ssl = self.ssl;
	    server.sslValidate = self.sslValidate;
	    server.sslCA = self.sslCA;
	    server.sslCert = self.sslCert;
	    server.sslKey = self.sslKey;
	    server.sslPass = self.sslPass;
	    server.poolSize = self.poolSize;
	    // Set callback store
	    server._callBackStore = callBackStore;
	  });
	
	  return finalServers;
	}
	
	exports.Options = Options;


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	var ReadPreference = __webpack_require__(187).ReadPreference
	  , DbCommand = __webpack_require__(175).DbCommand
	  , inherits = __webpack_require__(282).inherits
	  , format = __webpack_require__(282).format
	  , timers = __webpack_require__(258)
	  , Server = __webpack_require__(194).Server
	  , utils = __webpack_require__(207)
	  , PingStrategy = __webpack_require__(192).PingStrategy
	  , StatisticsStrategy = __webpack_require__(193).StatisticsStrategy
	  , Options = __webpack_require__(189).Options
	  , ServerCapabilities = __webpack_require__(195).ServerCapabilities
	  , ReplSetState = __webpack_require__(191).ReplSetState
	  , HighAvailabilityProcess = __webpack_require__(188).HighAvailabilityProcess
	  , Base = __webpack_require__(182).Base;
	
	var STATE_STARTING_PHASE_1 = 0;
	var STATE_PRIMARY = 1;
	var STATE_SECONDARY = 2;
	var STATE_RECOVERING = 3;
	var STATE_FATAL_ERROR = 4;
	var STATE_STARTING_PHASE_2 = 5;
	var STATE_UNKNOWN = 6;
	var STATE_ARBITER = 7;
	var STATE_DOWN = 8;
	var STATE_ROLLBACK = 9;
	
	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(207).processor();
	
	/**
	 * ReplSet constructor provides replicaset functionality
	 *
	 * Options
	 *  - **ha** {Boolean, default:true}, turn on high availability.
	 *  - **haInterval** {Number, default:2000}, time between each replicaset status check.
	 *  - **reconnectWait** {Number, default:1000}, time to wait in miliseconds before attempting reconnect.
	 *  - **retries** {Number, default:30}, number of times to attempt a replicaset reconnect.
	 *  - **rs_name** {String}, the name of the replicaset to connect to.
	 *  - **socketOptions** {Object, default:null}, an object containing socket options to use (noDelay:(boolean), keepAlive:(number), connectTimeoutMS:(number), socketTimeoutMS:(number))
	 *  - **strategy** {String, default:'ping'}, selection strategy for reads choose between (ping, statistical and none, default is ping)
	 *  - **secondaryAcceptableLatencyMS** {Number, default:15}, sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms)
	 *  - **connectWithNoPrimary** {Boolean, default:false}, sets if the driver should connect even if no primary is available
	 *  - **connectArbiter** {Boolean, default:false}, sets if the driver should connect to arbiters or not.
	 *  - **logger** {Object, default:null}, an object representing a logger that you want to use, needs to support functions debug, log, error **({error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}})**.
	 *  - **poolSize** {Number, default:5}, number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.
	 *  - **ssl** {Boolean, default:false}, use ssl connection (needs to have a mongod server with ssl support)
	 *  - **sslValidate** {Boolean, default:false}, validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslCA** {Array, default:null}, Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslCert** {Buffer/String, default:null}, String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslKey** {Buffer/String, default:null}, String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslPass** {Buffer/String, default:null}, String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)
	 *
	 * @class Represents a 
	 Replicaset Configuration
	 * @param {Array} list of server objects participating in the replicaset.
	 * @param {Object} [options] additional options for the replicaset connection.
	 */
	var ReplSet = exports.ReplSet = function(servers, options) {
	  // Set up basic
	  if(!(this instanceof ReplSet))
	    return new ReplSet(servers, options);
	
	  // Set up event emitter
	  Base.call(this);
	
	  // Ensure we have a list of servers
	  if(!Array.isArray(servers)) throw Error("The parameter must be an array of servers and contain at least one server");
	  // Ensure no Mongos's
	  for(var i = 0; i < servers.length; i++) {
	    if(!(servers[i] instanceof Server)) throw new Error("list of servers must be of type Server");
	  }
	
	  // Save the options
	  this.options = new Options(options);
	  // Ensure basic validation of options
	  this.options.init();
	
	  // Server state
	  this._serverState = ReplSet.REPLSET_DISCONNECTED;
	  // Add high availability process
	  this._haProcess = new HighAvailabilityProcess(this, this.options);
	
	  // Let's iterate over all the provided server objects and decorate them
	  this.servers = this.options.decorateAndClean(servers, this._callBackStore);
	  // Throw error if no seed servers
	  if(this.servers.length == 0) throw new Error("No valid seed servers in the array");
	
	  // Let's set up our strategy object for picking secondaries
	  if(this.options.strategy == 'ping') {
	    // Create a new instance
	    this.strategyInstance = new PingStrategy(this, this.options.secondaryAcceptableLatencyMS);
	  } else if(this.options.strategy == 'statistical') {
	    // Set strategy as statistical
	    this.strategyInstance = new StatisticsStrategy(this);
	    // Add enable query information
	    this.enableRecordQueryStats(true);
	  }
	
	  this.emitOpen = this.options.emitOpen || true;
	  // Set up a clean state
	  this._state = new ReplSetState(this);
	  // Current round robin selected server
	  this._currentServerChoice = 0;
	  // Ensure up the server callbacks
	  for(var i = 0; i < this.servers.length; i++) {
	    this.servers[i]._callBackStore = this._callBackStore;
	    this.servers[i].name = format("%s:%s", this.servers[i].host, this.servers[i].port)
	    this.servers[i].replicasetInstance = this;
	    this.servers[i].options.auto_reconnect = false;
	    this.servers[i].poolSize = this.options.poolSize;
	    this.servers[i].inheritReplSetOptionsFrom(this);
	  }
	
	  // Allow setting the socketTimeoutMS on all connections
	  // to work around issues such as secondaries blocking due to compaction
	  utils.setSocketTimeoutProperty(this, this.options.socketOptions);
	}
	
	/**
	 * @ignore
	 */
	inherits(ReplSet, Base);
	
	// Replicaset states
	ReplSet.REPLSET_CONNECTING = 'connecting';
	ReplSet.REPLSET_DISCONNECTED = 'disconnected';
	ReplSet.REPLSET_CONNECTED = 'connected';
	ReplSet.REPLSET_RECONNECTING = 'reconnecting';
	ReplSet.REPLSET_DESTROYED = 'destroyed';
	ReplSet.REPLSET_READ_ONLY = 'readonly';
	
	ReplSet.prototype.isAutoReconnect = function() {
	  return true;
	}
	
	ReplSet.prototype.canWrite = function() {
	  return this._state.master && this._state.master.isConnected();
	}
	
	ReplSet.prototype.canRead = function(read) {
	  if((read == ReadPreference.PRIMARY 
	      || (typeof read == 'object' && read.mode == ReadPreference.PRIMARY)
	      || read == null || read == false) && (this._state.master == null || !this._state.master.isConnected())) return false;
	  return Object.keys(this._state.secondaries).length > 0;
	}
	
	/**
	 * @ignore
	 */
	ReplSet.prototype.enableRecordQueryStats = function(enable) {
	  // Set the global enable record query stats
	  this.recordQueryStats = enable;
	
	  // Enable all the servers
	  for(var i = 0; i < this.servers.length; i++) {
	    this.servers[i].enableRecordQueryStats(enable);
	  }
	}
	
	/**
	 * @ignore
	 */
	ReplSet.prototype.setSocketOptions = function(options) {
	  var servers = this.allServerInstances();
	  
	  if(typeof options.socketTimeoutMS == 'number') {
	    this.options.socketOptions.socketTimeoutMS = options.socketTimeoutMS;
	  }
	
	  if(typeof options.connectTimeoutMS == 'number')
	    this.options.socketOptions.connectTimeoutMS = options.connectTimeoutMS;
	
	  for(var i = 0; i < servers.length; i++) {
	    servers[i].setSocketOptions(options);
	  }
	}
	
	/**
	 * @ignore
	 */
	ReplSet.prototype.setReadPreference = function(preference) {
	  this.options.readPreference = preference;
	}
	
	ReplSet.prototype.connect = function(parent, options, callback) {
	  if(this._serverState != ReplSet.REPLSET_DISCONNECTED) 
	    return callback(new Error("in process of connection"));
	
	  // If no callback throw
	  if(!(typeof callback == 'function')) 
	    throw new Error("cannot call ReplSet.prototype.connect with no callback function");
	
	  var self = this;
	  // Save db reference
	  this.options.db = parent;
	  // Set replicaset as connecting
	  this._serverState = ReplSet.REPLSET_CONNECTING
	  // Copy all the servers to our list of seeds
	  var candidateServers = this.servers.slice(0);
	  // Pop the first server
	  var server = candidateServers.pop();
	  server.name = format("%s:%s", server.host, server.port);
	  // Set up the options
	  var opts = {
	    returnIsMasterResults: true,
	    eventReceiver: server
	  }
	
	  // Register some event listeners
	  this.once("fullsetup", function(err, db, replset) {
	    // Set state to connected
	    self._serverState = ReplSet.REPLSET_CONNECTED;
	    // Stop any process running
	    if(self._haProcess) self._haProcess.stop();
	    // Start the HA process
	    self._haProcess.start();
	
	    // Emit fullsetup
	    processor(function() {
	      if(self.emitOpen)
	        self._emitAcrossAllDbInstances(self, null, "open", null, null, null);        
	
	      self._emitAcrossAllDbInstances(self, null, "fullsetup", null, null, null);        
	    });
	
	    // If we have a strategy defined start it
	    if(self.strategyInstance) {
	      self.strategyInstance.start();
	    }
	
	    // Finishing up the call
	    callback(err, db, replset);
	  });
	
	  // Errors
	  this.once("connectionError", function(err, result) {
	    callback(err, result);
	  });
	
	  // Attempt to connect to the server
	  server.connect(this.options.db, opts, _connectHandler(this, candidateServers, server));
	}
	
	ReplSet.prototype.close = function(callback) {  
	  var self = this;
	  // Set as destroyed
	  this._serverState = ReplSet.REPLSET_DESTROYED;
	  // Stop the ha
	  this._haProcess.stop();
	  
	  // If we have a strategy stop it
	  if(this.strategyInstance) {
	    this.strategyInstance.stop();
	  }
	
	  // Kill all servers available
	  for(var name in this._state.addresses) {
	    this._state.addresses[name].close();
	  }
	
	  // Clean out the state
	  this._state = new ReplSetState(this); 
	  
	  // Emit close event
	  processor(function() {
	    self._emitAcrossAllDbInstances(self, null, "close", null, null, true)    
	  });
	
	  // Flush out any remaining call handlers
	  self._flushAllCallHandlers(utils.toError("Connection Closed By Application"));
	
	  // Callback
	  if(typeof callback == 'function') 
	    return callback(null, null);
	}
	
	/**
	 * Creates a new server for the `replset` based on `host`.
	 *
	 * @param {String} host - host:port pair (localhost:27017)
	 * @param {ReplSet} replset - the ReplSet instance
	 * @return {Server}
	 * @ignore
	 */
	var createServer = function(self, host, options) {
	  // copy existing socket options to new server
	  var socketOptions = {}
	  if(options.socketOptions) {
	    var keys = Object.keys(options.socketOptions);
	    for(var k = 0; k < keys.length; k++) {
	      socketOptions[keys[k]] = options.socketOptions[keys[k]];
	    }
	  }
	
	  var parts = host.split(/:/);
	  if(1 === parts.length) {
	    parts[1] = Connection.DEFAULT_PORT;
	  }
	
	  socketOptions.host = parts[0];
	  socketOptions.port = parseInt(parts[1], 10);
	
	  var serverOptions = {
	    readPreference: options.readPreference,
	    socketOptions: socketOptions,
	    poolSize: options.poolSize,
	    logger: options.logger,
	    auto_reconnect: false,
	    ssl: options.ssl,
	    sslValidate: options.sslValidate,
	    sslCA: options.sslCA,
	    sslCert: options.sslCert,
	    sslKey: options.sslKey,
	    sslPass: options.sslPass
	  }
	
	  var server = new Server(socketOptions.host, socketOptions.port, serverOptions);
	  // Set up shared state
	  server._callBackStore = self._callBackStore;
	  server.replicasetInstance = self;
	  server.enableRecordQueryStats(self.recordQueryStats);
	  // Set up event handlers
	  server.on("close", _handler("close", self, server));
	  server.on("error", _handler("error", self, server));
	  server.on("timeout", _handler("timeout", self, server));
	  return server;
	}
	
	var _handler = function(event, self, server) {
	  return function(err, doc) {
	    // The event happened to a primary
	    // Remove it from play
	    if(self._state.isPrimary(server)) {    
	      // Emit that the primary left the replicaset
	      self.emit('left', 'primary', server);
	      // Get the current master
	      var current_master = self._state.master;
	      self._state.master = null;
	      self._serverState = ReplSet.REPLSET_READ_ONLY;
	    
	      if(current_master != null) {
	        // Unpack variables
	        var host = current_master.socketOptions.host;
	        var port = current_master.socketOptions.port;
	
	        // Fire error on any unknown callbacks
	        self.__executeAllServerSpecificErrorCallbacks(host, port, err);        
	      }
	    } else if(self._state.isSecondary(server)) {
	      // Emit that a secondary left the replicaset
	      self.emit('left', 'secondary', server);
	      // Delete from the list
	      delete self._state.secondaries[server.name];
	    }
	
	    // If there is no more connections left and the setting is not destroyed
	    // set to disconnected
	    if(Object.keys(self._state.addresses).length == 0 
	      && self._serverState != ReplSet.REPLSET_DESTROYED) {
	        self._serverState = ReplSet.REPLSET_DISCONNECTED;
	
	        // Emit close across all the attached db instances
	        self._dbStore.emit("close", new Error("replicaset disconnected, no valid servers contactable over tcp"), null, true);
	    }
	
	    // Unpack variables
	    var host = server.socketOptions.host;
	    var port = server.socketOptions.port;
	
	    // Fire error on any unknown callbacks
	    self.__executeAllServerSpecificErrorCallbacks(host, port, err);
	  }
	}
	
	var locateNewServers = function(self, state, candidateServers, ismaster) {
	  // Retrieve the host
	  var hosts = ismaster.hosts;
	  // In candidate servers
	  var inCandidateServers = function(name, candidateServers) {
	    for(var i = 0; i < candidateServers.length; i++) {
	      if(candidateServers[i].name == name) return true;
	    }
	
	    return false;
	  }
	
	  // New servers
	  var newServers = [];
	  if(Array.isArray(hosts)) {
	    // Let's go over all the hosts
	    for(var i = 0; i < hosts.length; i++) {
	      if(!state.contains(hosts[i]) 
	        && !inCandidateServers(hosts[i], candidateServers)) {
	          newServers.push(createServer(self, hosts[i], self.options));
	      }
	    }    
	  }
	
	  // Return list of possible new servers
	  return newServers;
	}
	
	var _connectHandler = function(self, candidateServers, instanceServer) {
	  return function(err, doc) {
	    // If we have an error add to the list
	    if(err) {
	      self._state.errors[instanceServer.name] = instanceServer;
	    } else {
	      delete self._state.errors[instanceServer.name];
	    }
	
	    if(!err) {      
	      var ismaster = doc.documents[0]
	
	      // Error the server if 
	      if(!ismaster.ismaster
	        && !ismaster.secondary) {
	        self._state.errors[instanceServer.name] = instanceServer;
	      }
	
	      // Set server capabilities
	      instanceServer.serverCapabilities = new ServerCapabilities(ismaster);
	
	      // Set server capabilities on all the connections
	      var connections = instanceServer.allRawConnections();
	      for(var i = 0; i < connections.length; i++) {
	        connections[i].serverCapabilities = instanceServer.serverCapabilities;
	      }
	    }
	
	    // No error let's analyse the ismaster command
	    if(!err && self._state.errors[instanceServer.name] == null) {
	      var ismaster = doc.documents[0]
	
	      // If no replicaset name exists set the current one
	      if(self.options.rs_name == null) {
	        self.options.rs_name = ismaster.setName;
	      }
	
	      // If we have a member that is not part of the set let's finish up
	      if(typeof ismaster.setName == 'string' && ismaster.setName != self.options.rs_name) {
	        return self.emit("connectionError", new Error("Replicaset name " + ismaster.setName + " does not match specified name " + self.options.rs_name));
	      }
	
	      // Add the error handlers
	      instanceServer.on("close", _handler("close", self, instanceServer));
	      instanceServer.on("error", _handler("error", self, instanceServer));
	      instanceServer.on("timeout", _handler("timeout", self, instanceServer));
	      
	      // Set any tags on the instance server
	      instanceServer.name = ismaster.me;
	      instanceServer.tags = ismaster.tags;
	
	      // Add the server to the list
	      self._state.addServer(instanceServer, ismaster);
	
	      // Check if we have more servers to add (only check when done with initial set)
	      if(candidateServers.length == 0) {
	        // Get additional new servers that are not currently in set
	        var new_servers = locateNewServers(self, self._state, candidateServers, ismaster);
	
	        // Locate any new servers that have not errored out yet
	        for(var i = 0; i < new_servers.length; i++) {
	          if(self._state.errors[new_servers[i].name] == null) {
	            candidateServers.push(new_servers[i])            
	          }
	        }
	      }
	    }
	
	    // If the candidate server list is empty and no valid servers
	    if(candidateServers.length == 0 &&
	      !self._state.hasValidServers()) {
	        return self.emit("connectionError", new Error("No valid replicaset instance servers found"));
	    } else if(candidateServers.length == 0) {      
	      if(!self.options.connectWithNoPrimary && (self._state.master == null || !self._state.master.isConnected())) {
	        return self.emit("connectionError", new Error("No primary found in set"));
	      }
	      return self.emit("fullsetup", null, self.options.db, self);
	    }
	        
	    // Let's connect the next server    
	    var nextServer = candidateServers.pop();
	  
	    // Set up the options
	    var opts = {
	      returnIsMasterResults: true,
	      eventReceiver: nextServer
	    }
	
	    // Attempt to connect to the server
	    nextServer.connect(self.options.db, opts, _connectHandler(self, candidateServers, nextServer));
	  }
	}
	
	ReplSet.prototype.isDestroyed = function() {
	  return this._serverState == ReplSet.REPLSET_DESTROYED;
	}
	
	ReplSet.prototype.isConnected = function(read) {
	  var isConnected = false;  
	
	  if(read == null || read == ReadPreference.PRIMARY || read == false)
	    isConnected = this._state.master != null && this._state.master.isConnected();
	
	  if((read == ReadPreference.PRIMARY_PREFERRED || read == ReadPreference.SECONDARY_PREFERRED || read == ReadPreference.NEAREST)
	    && ((this._state.master != null && this._state.master.isConnected())
	    || (this._state && this._state.secondaries && Object.keys(this._state.secondaries).length > 0))) {
	      isConnected = true;
	  } else if(read == ReadPreference.SECONDARY) {
	    isConnected = this._state && this._state.secondaries && Object.keys(this._state.secondaries).length > 0;
	  }
	
	  // No valid connection return false
	  return isConnected;
	}
	
	ReplSet.prototype.isMongos = function() {
	  return false;
	}
	
	ReplSet.prototype.checkoutWriter = function() {
	  if(this._state.master) return this._state.master.checkoutWriter();
	  return new Error("no writer connection available");
	}
	
	ReplSet.prototype.processIsMaster = function(_server, _ismaster) {
	  // Server in recovery mode, remove it from available servers
	  if(!_ismaster.ismaster && !_ismaster.secondary) {
	    // Locate the actual server
	    var server = this._state.addresses[_server.name];
	    // Close the server, simulating the closing of the connection
	    // to get right removal semantics
	    if(server) server.close();
	    // Execute any callback errors
	    _handler(null, this, server)(new Error("server is in recovery mode"));
	  }
	}
	
	ReplSet.prototype.allRawConnections = function() {
	  var connections = [];
	
	  for(var name in this._state.addresses) {
	    connections = connections.concat(this._state.addresses[name].allRawConnections());
	  }
	
	  return connections;
	}
	
	/**
	 * @ignore
	 */
	ReplSet.prototype.allServerInstances = function() {
	  var self = this;
	  // If no state yet return empty
	  if(!self._state) return [];
	  // Close all the servers (concatenate entire list of servers first for ease)
	  var allServers = self._state.master != null ? [self._state.master] : [];
	
	  // Secondary keys
	  var keys = Object.keys(self._state.secondaries);
	  // Add all secondaries
	  for(var i = 0; i < keys.length; i++) {
	    allServers.push(self._state.secondaries[keys[i]]);
	  }
	
	  // Return complete list of all servers
	  return allServers;
	}
	
	/**
	 * @ignore
	 */
	ReplSet.prototype.checkoutReader = function(readPreference, tags) {
	  var connection = null;
	
	  // If we have a read preference object unpack it
	  if(typeof readPreference == 'object' && readPreference['_type'] == 'ReadPreference') {
	    // Validate if the object is using a valid mode
	    if(!readPreference.isValid()) throw new Error("Illegal readPreference mode specified, " + JSON.stringify(readPreference.mode));
	    // Set the tag
	    tags = readPreference.tags;
	    readPreference = readPreference.mode;
	  } else if(typeof readPreference == 'object' && readPreference['_type'] != 'ReadPreference') {
	    return new Error("read preferences must be either a string or an instance of ReadPreference");
	  }
	
	  // Set up our read Preference, allowing us to override the readPreference
	  var finalReadPreference = readPreference != null ? readPreference : this.options.readPreference;
	
	  // Ensure we unpack a reference
	  if(finalReadPreference != null && typeof finalReadPreference == 'object' && finalReadPreference['_type'] == 'ReadPreference') {
	    // Validate if the object is using a valid mode
	    if(!finalReadPreference.isValid()) throw new Error("Illegal readPreference mode specified, " + JSON.stringify(finalReadPreference.mode));
	    // Set the tag
	    tags = finalReadPreference.tags;
	    readPreference = finalReadPreference.mode;
	  }
	
	  // Finalize the read preference setup
	  finalReadPreference = finalReadPreference == true ? ReadPreference.SECONDARY_PREFERRED : finalReadPreference;
	  finalReadPreference = finalReadPreference == null ? ReadPreference.PRIMARY : finalReadPreference;
	
	  // If we are reading from a primary
	  if(finalReadPreference == 'primary') {
	    // If we provide a tags set send an error
	    if(typeof tags == 'object' && tags != null) {
	      return new Error("PRIMARY cannot be combined with tags");
	    }
	
	    // If we provide a tags set send an error
	    if(this._state.master == null) {
	      return new Error("No replica set primary available for query with ReadPreference PRIMARY");
	    }
	
	    // Checkout a writer
	    return this.checkoutWriter();
	  }
	
	  // If we have specified to read from a secondary server grab a random one and read
	  // from it, otherwise just pass the primary connection
	  if((this.options.readSecondary || finalReadPreference == ReadPreference.SECONDARY_PREFERRED || finalReadPreference == ReadPreference.SECONDARY) && Object.keys(this._state.secondaries).length > 0) {
	    // If we have tags, look for servers matching the specific tag
	    if(this.strategyInstance != null) {
	      // Only pick from secondaries
	      var _secondaries = [];
	      for(var key in this._state.secondaries) {
	        _secondaries.push(this._state.secondaries[key]);
	      }
	
	      if(finalReadPreference == ReadPreference.SECONDARY) {
	        // Check out the nearest from only the secondaries
	        connection = this.strategyInstance.checkoutConnection(tags, _secondaries);
	      } else {
	        connection = this.strategyInstance.checkoutConnection(tags, _secondaries);
	        // No candidate servers that match the tags, error
	        if(connection == null || connection instanceof Error) {
	          // No secondary server avilable, attemp to checkout a primary server
	          connection = this.checkoutWriter();
	          // If no connection return an error
	          if(connection == null || connection instanceof Error) {
	            return new Error("No replica set members available for query");
	          }
	        }
	      }
	    } else if(tags != null && typeof tags == 'object') {
	      // Get connection
	      connection = _pickFromTags(this, tags);// = function(self, readPreference, tags) {
	      // No candidate servers that match the tags, error
	      if(connection == null) {
	        return new Error("No replica set members available for query");
	      }
	    } else {
	      connection = _roundRobin(this, tags);
	    }
	  } else if(finalReadPreference == ReadPreference.PRIMARY_PREFERRED) {
	    // Check if there is a primary available and return that if possible
	    connection = this.checkoutWriter();
	    // If no connection available checkout a secondary
	    if(connection == null || connection instanceof Error) {
	      // If we have tags, look for servers matching the specific tag
	      if(tags != null && typeof tags == 'object') {
	        // Get connection
	        connection = _pickFromTags(this, tags);// = function(self, readPreference, tags) {
	        // No candidate servers that match the tags, error
	        if(connection == null) {
	          return new Error("No replica set members available for query");
	        }
	      } else {
	        connection = _roundRobin(this, tags);
	      }
	    }
	  } else if(finalReadPreference == ReadPreference.SECONDARY_PREFERRED) {
	    // If we have tags, look for servers matching the specific tag
	    if(this.strategyInstance != null) {
	      connection = this.strategyInstance.checkoutConnection(tags);
	      
	      // No candidate servers that match the tags, error
	      if(connection == null || connection instanceof Error) {
	        // No secondary server avilable, attemp to checkout a primary server
	        connection = this.checkoutWriter();
	        // If no connection return an error
	        if(connection == null || connection instanceof Error) {
	          var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;
	          return new Error("No replica set member available for query with ReadPreference " + preferenceName + " and tags " + JSON.stringify(tags));
	        }
	      }
	    } else if(tags != null && typeof tags == 'object') {
	      // Get connection
	      connection = _pickFromTags(this, tags);// = function(self, readPreference, tags) {
	      // No candidate servers that match the tags, error
	      if(connection == null) {
	        // No secondary server avilable, attemp to checkout a primary server
	        connection = this.checkoutWriter();
	        // If no connection return an error
	        if(connection == null || connection instanceof Error) {
	          var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;
	          return new Error("No replica set member available for query with ReadPreference " + preferenceName + " and tags " + JSON.stringify(tags));
	        }
	      }
	    }
	  } else if(finalReadPreference == ReadPreference.NEAREST && this.strategyInstance != null) {
	    connection = this.strategyInstance.checkoutConnection(tags);
	  } else if(finalReadPreference == ReadPreference.NEAREST && this.strategyInstance == null) {
	    return new Error("A strategy for calculating nearness must be enabled such as ping or statistical");
	  } else if(finalReadPreference == ReadPreference.SECONDARY && Object.keys(this._state.secondaries).length == 0) {
	    if(tags != null && typeof tags == 'object') {
	      var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;
	      return new Error("No replica set member available for query with ReadPreference " + preferenceName + " and tags " + JSON.stringify(tags));
	    } else {
	      return new Error("No replica set secondary available for query with ReadPreference SECONDARY");
	    }
	  } else {
	    connection = this.checkoutWriter();
	  }
	
	  // Return the connection
	  return connection;
	}
	
	/**
	 * @ignore
	 */
	var _pickFromTags = function(self, tags) {
	  // If we have an array or single tag selection
	  var tagObjects = Array.isArray(tags) ? tags : [tags];
	  // Iterate over all tags until we find a candidate server
	  for(var _i = 0; _i < tagObjects.length; _i++) {
	    // Grab a tag object
	    var tagObject = tagObjects[_i];
	    // Matching keys
	    var matchingKeys = Object.keys(tagObject);
	    // Match all the servers that match the provdided tags
	    var keys = Object.keys(self._state.secondaries);
	    var candidateServers = [];
	
	    for(var i = 0; i < keys.length; i++) {
	      var server = self._state.secondaries[keys[i]];
	      // If we have tags match
	      if(server.tags != null) {
	        var matching = true;
	        // Ensure we have all the values
	        for(var j = 0; j < matchingKeys.length; j++) {
	          if(server.tags[matchingKeys[j]] != tagObject[matchingKeys[j]]) {
	            matching = false;
	            break;
	          }
	        }
	
	        // If we have a match add it to the list of matching servers
	        if(matching) {
	          candidateServers.push(server);
	        }
	      }
	    }
	
	    // If we have a candidate server return
	    if(candidateServers.length > 0) {
	      if(self.strategyInstance) return self.strategyInstance.checkoutConnection(tags, candidateServers);
	      // Set instance to return
	      return candidateServers[Math.floor(Math.random() * candidateServers.length)].checkoutReader();
	    }
	  }
	
	  // No connection found
	  return null;
	}
	
	/**
	 * Pick a secondary using round robin
	 *
	 * @ignore
	 */
	function _roundRobin (replset, tags) {
	  var keys = Object.keys(replset._state.secondaries);
	  // Update index
	  replset._currentServerChoice = replset._currentServerChoice + 1;
	  // Pick a server
	  var key = keys[replset._currentServerChoice % keys.length];
	
	  var conn = null != replset._state.secondaries[key]
	    ? replset._state.secondaries[key].checkoutReader()
	    : null;
	
	  // If connection is null fallback to first available secondary
	  if(null == conn) {
	    conn = pickFirstConnectedSecondary(replset, tags);
	  }
	
	  return conn;
	}
	
	/**
	 * @ignore
	 */
	var pickFirstConnectedSecondary = function pickFirstConnectedSecondary(self, tags) {
	  var keys = Object.keys(self._state.secondaries);
	  var connection;
	
	  // Find first available reader if any
	  for(var i = 0; i < keys.length; i++) {
	    connection = self._state.secondaries[keys[i]].checkoutReader();
	    if(connection) return connection;
	  }
	
	  // If we still have a null, read from primary if it's not secondary only
	  if(self._readPreference == ReadPreference.SECONDARY_PREFERRED) {
	    connection = self._state.master.checkoutReader();
	    if(connection) return connection;
	  }
	
	  var preferenceName = self._readPreference == ReadPreference.SECONDARY_PREFERRED
	    ? 'secondary'
	    : self._readPreference;
	
	  return new Error("No replica set member available for query with ReadPreference "
	                  + preferenceName + " and tags " + JSON.stringify(tags));
	}
	
	/**
	 * Get list of secondaries
	 * @ignore
	 */
	Object.defineProperty(ReplSet.prototype, "secondaries", {enumerable: true
	  , get: function() {
	      return utils.objectToArray(this._state.secondaries);
	    }
	});
	
	/**
	 * Get list of secondaries
	 * @ignore
	 */
	Object.defineProperty(ReplSet.prototype, "arbiters", {enumerable: true
	  , get: function() {
	      return utils.objectToArray(this._state.arbiters);
	    }
	});
	


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Interval state object constructor
	 *
	 * @ignore
	 */
	var ReplSetState = function ReplSetState (replset) {
	  this.errorMessages = [];
	  this.secondaries = {};
	  this.addresses = {};
	  this.arbiters = {};
	  this.passives = {};
	  this.members = [];
	  this.errors = {};
	  this.setName = null;
	  this.master = null;
	  this.replset = replset;
	}
	
	ReplSetState.prototype.hasValidServers = function() {
	  var validServers = [];
	  if(this.master && this.master.isConnected()) return true;
	
	  if(this.secondaries) {
	    var keys = Object.keys(this.secondaries)
	    for(var i = 0; i < keys.length; i++) {
	      if(this.secondaries[keys[i]].isConnected())
	        return true;
	    }
	  }
	
	  return false;
	}
	
	ReplSetState.prototype.getAllReadServers = function() {
	  var candidate_servers = [];
	  for(var name in this.addresses) {
	    candidate_servers.push(this.addresses[name]);
	  }
	
	  // Return all possible read candidates
	  return candidate_servers;
	}
	
	ReplSetState.prototype.addServer = function(server, master) {
	  server.name = master.me;
	
	  if(master.ismaster) {
	    this.master = server;
	    this.addresses[server.name] = server;
	    this.replset.emit('joined', "primary", master, server);
	  } else if(master.secondary) {
	    this.secondaries[server.name] = server;
	    this.addresses[server.name] = server;
	    this.replset.emit('joined', "secondary", master, server);
	  } else if(master.arbiters) {
	    this.arbiters[server.name] = server;
	    this.addresses[server.name] = server;
	    this.replset.emit('joined', "arbiter", master, server);
	  }
	}
	
	ReplSetState.prototype.contains = function(host) {
	  return this.addresses[host] != null;
	}
	
	ReplSetState.prototype.isPrimary = function(server) {
	  return this.master && this.master.name == server.name;
	}
	
	ReplSetState.prototype.isSecondary = function(server) {
	  return this.secondaries[server.name] != null;
	}
	
	exports.ReplSetState = ReplSetState;


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	var Server = __webpack_require__(194).Server
	  , format = __webpack_require__(282).format;
	
	// The ping strategy uses pings each server and records the
	// elapsed time for the server so it can pick a server based on lowest
	// return time for the db command {ping:true}
	var PingStrategy = exports.PingStrategy = function(replicaset, secondaryAcceptableLatencyMS) {
	  this.replicaset = replicaset;
	  this.secondaryAcceptableLatencyMS = secondaryAcceptableLatencyMS;
	  this.state = 'disconnected';
	  // Interval of ping attempts
	  this.pingInterval = replicaset.options.socketOptions.pingInterval || 5000;
	  // Timeout for ping response, default - no timeout
	  this.pingTimeout = replicaset.options.socketOptions.pingTimeout || null;
	  // Class instance
	  this.Db = __webpack_require__(199).Db;
	  // Active db connections
	  this.dbs = {};
	  // Current server index
	  this.index = 0;
	  // Logger api
	  this.Logger = null;
	}
	
	// Starts any needed code
	PingStrategy.prototype.start = function(callback) {
	  // already running?
	  if ('connected' == this.state) return;
	
	  this.state = 'connected';
	
	  // Start ping server
	  this._pingServer(callback);
	}
	
	// Stops and kills any processes running
	PingStrategy.prototype.stop = function(callback) {
	  // Stop the ping process
	  this.state = 'disconnected';
	
	  // Stop all the server instances
	  for(var key in this.dbs) {
	    this.dbs[key].close();
	  }
	
	  // optional callback
	  callback && callback(null, null);
	}
	
	PingStrategy.prototype.checkoutConnection = function(tags, secondaryCandidates) {
	  // Servers are picked based on the lowest ping time and then servers that lower than that + secondaryAcceptableLatencyMS
	  // Create a list of candidat servers, containing the primary if available
	  var candidateServers = [];
	  var self = this;
	
	  // If we have not provided a list of candidate servers use the default setup
	  if(!Array.isArray(secondaryCandidates)) {
	    candidateServers = this.replicaset._state.master != null ? [this.replicaset._state.master] : [];
	    // Add all the secondaries
	    var keys = Object.keys(this.replicaset._state.secondaries);
	    for(var i = 0; i < keys.length; i++) {
	      candidateServers.push(this.replicaset._state.secondaries[keys[i]])
	    }
	  } else {
	    candidateServers = secondaryCandidates;
	  }
	
	  // Final list of eligable server
	  var finalCandidates = [];
	
	  // If we have tags filter by tags
	  if(tags != null && typeof tags == 'object') {
	    // If we have an array or single tag selection
	    var tagObjects = Array.isArray(tags) ? tags : [tags];
	    // Iterate over all tags until we find a candidate server
	    for(var _i = 0; _i < tagObjects.length; _i++) {
	      // Grab a tag object
	      var tagObject = tagObjects[_i];
	      // Matching keys
	      var matchingKeys = Object.keys(tagObject);
	      // Remove any that are not tagged correctly
	      for(var i = 0; i < candidateServers.length; i++) {
	        var server = candidateServers[i];
	        // If we have tags match
	        if(server.tags != null) {
	          var matching = true;
	
	          // Ensure we have all the values
	          for(var j = 0; j < matchingKeys.length; j++) {
	            if(server.tags[matchingKeys[j]] != tagObject[matchingKeys[j]]) {
	              matching = false;
	              break;
	            }
	          }
	
	          // If we have a match add it to the list of matching servers
	          if(matching) {
	            finalCandidates.push(server);
	          }
	        }
	      }
	    }
	  } else {
	    // Final array candidates
	    var finalCandidates = candidateServers;
	  }
	
	  // Filter out any non-connected servers
	  finalCandidates = finalCandidates.filter(function(s) {
	    return s.isConnected();
	  })
	
	  // Sort by ping time
	  finalCandidates.sort(function(a, b) {
	    return a.runtimeStats['pingMs'] > b.runtimeStats['pingMs'];
	  });
	
	  if(0 === finalCandidates.length)
	    return new Error("No replica set members available for query");
	
	  // find lowest server with a ping time
	  var lowest = finalCandidates.filter(function (server) {
	    return undefined != server.runtimeStats.pingMs;
	  })[0];
	
	  if(!lowest) {
	    lowest = finalCandidates[0];
	  }
	
	  // convert to integer
	  var lowestPing = lowest.runtimeStats.pingMs | 0;
	  
	  // determine acceptable latency
	  var acceptable = lowestPing + this.secondaryAcceptableLatencyMS;
	
	  // remove any server responding slower than acceptable
	  var len = finalCandidates.length;
	  while(len--) {
	    if(finalCandidates[len].runtimeStats['pingMs'] > acceptable) {
	      finalCandidates.splice(len, 1);
	    }
	  }
	
	  if(self.logger && self.logger.debug) {    
	    self.logger.debug("Ping strategy selection order for tags", tags);
	    finalCandidates.forEach(function(c) {
	      self.logger.debug(format("%s:%s = %s ms", c.host, c.port, c.runtimeStats['pingMs']), null);
	    })    
	  }
	
	  // If no candidates available return an error
	  if(finalCandidates.length == 0)
	    return new Error("No replica set members available for query");
	
	  // Ensure no we don't overflow
	  this.index = this.index % finalCandidates.length
	  // Pick a random acceptable server  
	  var connection = finalCandidates[this.index].checkoutReader();
	  // Point to next candidate (round robin style)
	  this.index = this.index + 1;
	
	  if(self.logger && self.logger.debug) {    
	    if(connection)
	      self.logger.debug(format("picked server %s:%s", connection.socketOptions.host, connection.socketOptions.port));
	  }
	
	  return connection;
	}
	
	PingStrategy.prototype._pingServer = function(callback) {
	  var self = this;
	
	  // Ping server function
	  var pingFunction = function() {
	    // Our state changed to disconnected or destroyed return
	    if(self.state == 'disconnected' || self.state == 'destroyed') return;
	    // If the replicaset is destroyed return
	    if(self.replicaset.isDestroyed() || self.replicaset._serverState == 'disconnected') return
	
	    // Create a list of all servers we can send the ismaster command to
	    var allServers = self.replicaset._state.master != null ? [self.replicaset._state.master] : [];
	
	    // Secondary keys
	    var keys = Object.keys(self.replicaset._state.secondaries);
	    // Add all secondaries
	    for(var i = 0; i < keys.length; i++) {
	      allServers.push(self.replicaset._state.secondaries[keys[i]]);
	    }
	
	    // Number of server entries
	    var numberOfEntries = allServers.length;
	
	    // We got keys
	    for(var i = 0; i < allServers.length; i++) {
	
	      // We got a server instance
	      var server = allServers[i];
	
	      // Create a new server object, avoid using internal connections as they might
	      // be in an illegal state
	      new function(serverInstance) {
	        var _db = self.dbs[serverInstance.host + ":" + serverInstance.port];
	        // If we have a db
	        if(_db != null) {
	          // Startup time of the command
	          var startTime = Date.now();
	
	          // Execute ping command in own scope
	          var _ping = function(__db, __serverInstance) {
	
	            // Server unavailable. Checks only if pingTimeout defined & greater than 0
	            var _failTimer = self.pingTimeout ? setTimeout(function () {
	              if(null != __serverInstance.runtimeStats && __serverInstance.isConnected()) {
	                __serverInstance.close();
	              }
	            }, self.pingTimeout) : null;
	
	            // Execute ping on this connection
	            __db.executeDbCommand({ping:1}, {failFast:true}, function(err) {
	
	              // Server available
	              clearTimeout(_failTimer);
	
	              // Emit the ping
	              self.replicaset.emit("ping", err, serverInstance);
	
	              if(err) {
	                delete self.dbs[__db.serverConfig.host + ":" + __db.serverConfig.port];
	                __db.close();
	                return done();
	              }
	
	              if(null != __serverInstance.runtimeStats && __serverInstance.isConnected()) {
	                __serverInstance.runtimeStats['pingMs'] = Date.now() - startTime;
	              }
	
	              __db.executeDbCommand({ismaster:1}, {failFast:true}, function(err, result) {
	                // Emit the ping
	                self.replicaset.emit("ping_ismaster", err, result, serverInstance);
	
	                if(err) {
	                  delete self.dbs[__db.serverConfig.host + ":" + __db.serverConfig.port];
	                  __db.close();
	                  return done();
	                }
	
	                // Process the ismaster for the server
	                if(result && result.documents && self.replicaset.processIsMaster) {
	                  self.replicaset.processIsMaster(__serverInstance, result.documents[0]);
	                }
	
	                // Done with the pinging
	                done();
	              });
	            });            
	          };
	          // Ping
	          _ping(_db, serverInstance);
	        } else {
	          var connectTimeoutMS = self.replicaset.options.socketOptions 
	            ? self.replicaset.options.socketOptions.connectTimeoutMS : 0
	
	          // Create a new master connection
	          var _server = new Server(serverInstance.host, serverInstance.port, {
	            auto_reconnect: false,
	            returnIsMasterResults: true,
	            slaveOk: true,
	            poolSize: 1,
	            socketOptions: { connectTimeoutMS: connectTimeoutMS },
	            ssl: self.replicaset.options.ssl,
	            sslValidate: self.replicaset.options.sslValidate,
	            sslCA: self.replicaset.options.sslCA,
	            sslCert: self.replicaset.options.sslCert,
	            sslKey: self.replicaset.options.sslKey,
	            sslPass: self.replicaset.options.sslPass
	          });
	
	          // Create Db instance        
	          var _db = new self.Db('local', _server, { safe: true });
	          _db.on("close", function() {
	            delete self.dbs[this.serverConfig.host + ":" + this.serverConfig.port];
	          })
	
	          var _ping = function(__db, __serverInstance) {
	            if(self.state == 'disconnected') {
	              self.stop();
	              return;
	            }
	
	            __db.open(function(err, db) {  
	              // Emit ping connect
	              self.replicaset.emit("ping_connect", err, __serverInstance);
	
	              if(self.state == 'disconnected' && __db != null) {
	                return __db.close();
	              }
	
	              if(err) {
	                delete self.dbs[__db.serverConfig.host + ":" + __db.serverConfig.port];
	                __db.close();
	                return done();
	              }
	
	              // Save instance
	              self.dbs[__db.serverConfig.host + ":" + __db.serverConfig.port] = __db;
	
	              // Startup time of the command
	              var startTime = Date.now();
	
	              // Execute ping on this connection
	              __db.executeDbCommand({ping:1}, {failFast:true}, function(err) {
	                self.replicaset.emit("ping", err, __serverInstance);
	                
	                if(err) {
	                  delete self.dbs[__db.serverConfig.host + ":" + __db.serverConfig.port];
	                  __db.close();
	                  return done();
	                }
	
	                if(null != __serverInstance.runtimeStats && __serverInstance.isConnected()) {
	                  __serverInstance.runtimeStats['pingMs'] = Date.now() - startTime;
	                }
	
	                __db.executeDbCommand({ismaster:1}, {failFast:true}, function(err, result) {
	                  self.replicaset.emit("ping_ismaster", err, result, __serverInstance);
	
	                  if(err) {
	                    delete self.dbs[__db.serverConfig.host + ":" + __db.serverConfig.port];
	                    __db.close();
	                    return done();
	                  }
	    
	                  // Process the ismaster for the server
	                  if(result && result.documents && self.replicaset.processIsMaster) {
	                    self.replicaset.processIsMaster(__serverInstance, result.documents[0]);
	                  }
	
	                  // Done with the pinging
	                  done();
	                });
	              });
	            });            
	          };
	
	          // Ping the server
	          _ping(_db, serverInstance);
	        }
	
	        function done() {
	          // Adjust the number of checks
	          numberOfEntries--;
	
	          // If we are done with all results coming back trigger ping again
	          if(0 === numberOfEntries && 'connected' == self.state) {
	            setTimeout(pingFunction, self.pingInterval);
	          }
	        }
	      }(server);
	    }
	  }
	
	  // Start pingFunction
	  pingFunction();
	
	  callback && callback(null);
	}


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	// The Statistics strategy uses the measure of each end-start time for each
	// query executed against the db to calculate the mean, variance and standard deviation
	// and pick the server which the lowest mean and deviation
	var StatisticsStrategy = exports.StatisticsStrategy = function(replicaset) {
	  this.replicaset = replicaset;
	  // Logger api
	  this.Logger = null;  
	}
	
	// Starts any needed code
	StatisticsStrategy.prototype.start = function(callback) {
	  callback && callback(null, null);
	}
	
	StatisticsStrategy.prototype.stop = function(callback) {
	  callback && callback(null, null);
	}
	
	StatisticsStrategy.prototype.checkoutConnection = function(tags, secondaryCandidates) {
	  // Servers are picked based on the lowest ping time and then servers that lower than that + secondaryAcceptableLatencyMS
	  // Create a list of candidat servers, containing the primary if available
	  var candidateServers = [];
	
	  // If we have not provided a list of candidate servers use the default setup
	  if(!Array.isArray(secondaryCandidates)) {
	    candidateServers = this.replicaset._state.master != null ? [this.replicaset._state.master] : [];
	    // Add all the secondaries
	    var keys = Object.keys(this.replicaset._state.secondaries);
	    for(var i = 0; i < keys.length; i++) {
	      candidateServers.push(this.replicaset._state.secondaries[keys[i]])
	    }
	  } else {
	    candidateServers = secondaryCandidates;
	  }
	
	  // Final list of eligable server
	  var finalCandidates = [];
	
	  // If we have tags filter by tags
	  if(tags != null && typeof tags == 'object') {
	    // If we have an array or single tag selection
	    var tagObjects = Array.isArray(tags) ? tags : [tags];
	    // Iterate over all tags until we find a candidate server
	    for(var _i = 0; _i < tagObjects.length; _i++) {
	      // Grab a tag object
	      var tagObject = tagObjects[_i];
	      // Matching keys
	      var matchingKeys = Object.keys(tagObject);
	      // Remove any that are not tagged correctly
	      for(var i = 0; i < candidateServers.length; i++) {
	        var server = candidateServers[i];
	        // If we have tags match
	        if(server.tags != null) {
	          var matching = true;
	
	          // Ensure we have all the values
	          for(var j = 0; j < matchingKeys.length; j++) {
	            if(server.tags[matchingKeys[j]] != tagObject[matchingKeys[j]]) {
	              matching = false;
	              break;
	            }
	          }
	
	          // If we have a match add it to the list of matching servers
	          if(matching) {
	            finalCandidates.push(server);
	          }
	        }
	      }
	    }
	  } else {
	    // Final array candidates
	    var finalCandidates = candidateServers;
	  }
	
	  finalCandidates.sort(function(a, b) {
	    return a.runtimeStats.queryStats.sScore > b.runtimeStats.queryStats.sScore;
	  });
	
	  // If no candidates available return an error
	  if(finalCandidates.length == 0) return new Error("No replica set members available for query");
	
	  var bestCandidates = [finalCandidates[0]];
	  for (var i = 1; i < finalCandidates.length; ++i) {
	    if (finalCandidates[i].runtimeStats.queryStats.sScore > finalCandidates[i - 1].runtimeStats.queryStats.sScore) {
	      break;
	    } else {
	      bestCandidates.push(finalCandidates[i]);
	    }
	  }
	
	  return bestCandidates[Math.floor(Math.random() * bestCandidates.length)].checkoutReader();
	}


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var Connection = __webpack_require__(183).Connection,
	  ReadPreference = __webpack_require__(187).ReadPreference,
	  DbCommand = __webpack_require__(175).DbCommand,
	  MongoReply = __webpack_require__(205).MongoReply,
	  ConnectionPool = __webpack_require__(184).ConnectionPool,
	  EventEmitter = __webpack_require__(298).EventEmitter,
	  ServerCapabilities = __webpack_require__(195).ServerCapabilities,
	  Base = __webpack_require__(182).Base,
	  format = __webpack_require__(282).format,
	  utils = __webpack_require__(207),
	  timers = __webpack_require__(258),
	  inherits = __webpack_require__(282).inherits;
	
	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(207).processor();
	
	/**
	 * Class representing a single MongoDB Server connection
	 *
	 * Options
	 *  - **ssl** {Boolean, default:false}, use ssl connection (needs to have a mongod server with ssl support)
	 *  - **sslValidate** {Boolean, default:false}, validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslCA** {Array, default:null}, Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslCert** {Buffer/String, default:null}, String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslKey** {Buffer/String, default:null}, String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **sslPass** {Buffer/String, default:null}, String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)
	 *  - **poolSize** {Number, default:5}, number of connections in the connection pool, set to 5 as default for legacy reasons.
	 *  - **socketOptions** {Object, default:null}, an object containing socket options to use (noDelay:(boolean), keepAlive:(number), connectTimeoutMS:(number), socketTimeoutMS:(number))
	 *  - **logger** {Object, default:null}, an object representing a logger that you want to use, needs to support functions debug, log, error **({error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}})**.
	 *  - **auto_reconnect** {Boolean, default:false}, reconnect on error.
	 *  - **disableDriverBSONSizeCheck** {Boolean, default:false}, force the server to error if the BSON message is to big
	 *
	 * @class Represents a Server connection.
	 * @param {String} host the server host
	 * @param {Number} port the server port
	 * @param {Object} [options] optional options for insert command
	 */
	function Server(host, port, options) {
	  // Set up Server instance
	  if(!(this instanceof Server)) return new Server(host, port, options);
	
	  // Set up event emitter
	  Base.call(this);
	
	  // Ensure correct values
	  if(port != null && typeof port == 'object') {
	    options = port;
	    port = Connection.DEFAULT_PORT;
	  }
	
	  var self = this;
	  this.host = host;
	  this.port = port;
	  this.options = options == null ? {} : options;
	  this.internalConnection;
	  this.internalMaster = false;
	  this.connected = false;  
	  this.poolSize = this.options.poolSize == null ? 5 : this.options.poolSize;
	  this.disableDriverBSONSizeCheck = this.options.disableDriverBSONSizeCheck != null ? this.options.disableDriverBSONSizeCheck : false;
	  this._used = false;
	  this.replicasetInstance = null;
	
	  // Emit open setup
	  this.emitOpen = this.options.emitOpen || true;
	  // Set ssl as connection method
	  this.ssl = this.options.ssl == null ? false : this.options.ssl;
	  // Set ssl validation
	  this.sslValidate = this.options.sslValidate == null ? false : this.options.sslValidate;
	  // Set the ssl certificate authority (array of Buffer/String keys)
	  this.sslCA = Array.isArray(this.options.sslCA) ? this.options.sslCA : null;
	  // Certificate to present to the server
	  this.sslCert = this.options.sslCert;
	  // Certificate private key if in separate file
	  this.sslKey = this.options.sslKey;
	  // Password to unlock private key
	  this.sslPass = this.options.sslPass;
	  // Server capabilities
	  this.serverCapabilities = null;
	  // Set server name
	  this.name = format("%s:%s", host, port);
	
	  // Ensure we are not trying to validate with no list of certificates
	  if(this.sslValidate && (!Array.isArray(this.sslCA) || this.sslCA.length == 0)) {
	    throw new Error("The driver expects an Array of CA certificates in the sslCA parameter when enabling sslValidate");
	  }
	
	  // Contains the isMaster information returned from the server
	  this.isMasterDoc;
	
	  // Set default connection pool options
	  this.socketOptions = this.options.socketOptions != null ? this.options.socketOptions : {};
	  if(this.disableDriverBSONSizeCheck) this.socketOptions.disableDriverBSONSizeCheck = this.disableDriverBSONSizeCheck;
	
	  // Set ssl up if it's defined
	  if(this.ssl) {
	    this.socketOptions.ssl = true;
	    // Set ssl validation
	    this.socketOptions.sslValidate = this.sslValidate == null ? false : this.sslValidate;
	    // Set the ssl certificate authority (array of Buffer/String keys)
	    this.socketOptions.sslCA = Array.isArray(this.sslCA) ? this.sslCA : null;
	    // Set certificate to present
	    this.socketOptions.sslCert = this.sslCert;
	    // Set certificate to present
	    this.socketOptions.sslKey = this.sslKey;
	    // Password to unlock private key
	    this.socketOptions.sslPass = this.sslPass;
	  }
	
	  // Set up logger if any set
	  this.logger = this.options.logger != null
	    && (typeof this.options.logger.debug == 'function')
	    && (typeof this.options.logger.error == 'function')
	    && (typeof this.options.logger.log == 'function')
	      ? this.options.logger : {error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}};
	
	  // Just keeps list of events we allow
	  this.eventHandlers = {error:[], parseError:[], poolReady:[], message:[], close:[], timeout:[]};
	  // Internal state of server connection
	  this._serverState = 'disconnected';
	  // Contains state information about server connection
	  this._state = {'runtimeStats': {'queryStats':new RunningStats()}};
	  // Do we record server stats or not
	  this.recordQueryStats = false;
	
	  // Allow setting the socketTimeoutMS on all connections
	  // to work around issues such as secondaries blocking due to compaction
	  utils.setSocketTimeoutProperty(this, this.socketOptions);
	};
	
	/**
	 * @ignore
	 */
	inherits(Server, Base);
	
	//
	//  Deprecated, USE ReadPreferences class
	//
	Server.READ_PRIMARY = ReadPreference.PRIMARY;
	Server.READ_SECONDARY = ReadPreference.SECONDARY_PREFERRED;
	Server.READ_SECONDARY_ONLY = ReadPreference.SECONDARY;
	
	/**
	 * Always ourselves
	 * @ignore
	 */
	Server.prototype.setReadPreference = function(readPreference) {
	  this._readPreference = readPreference;  
	}
	
	/**
	 * @ignore
	 */
	Server.prototype.isMongos = function() {
	  return this.isMasterDoc != null && this.isMasterDoc['msg'] == "isdbgrid" ? true : false;
	}
	
	/**
	 * @ignore
	 */
	Server.prototype._isUsed = function() {
	  return this._used;
	}
	
	/**
	 * @ignore
	 */
	Server.prototype.close = function(callback) {
	  // Set server status as disconnected
	  this._serverState = 'destroyed';
	  // Remove all local listeners
	  this.removeAllListeners();
	
	  if(this.connectionPool != null) {
	    // Remove all the listeners on the pool so it does not fire messages all over the place
	    this.connectionPool.removeAllEventListeners();
	    // Close the connection if it's open
	    this.connectionPool.stop(true);
	  }
	
	  // Emit close event
	  if(this.db && !this.isSetMember()) {
	    var self = this;
	    processor(function() {
	      self._emitAcrossAllDbInstances(self, null, "close", null, null, true)
	    })
	
	    // Flush out any remaining call handlers
	    self._flushAllCallHandlers(utils.toError("Connection Closed By Application"));
	  }
	
	  // Peform callback if present
	  if(typeof callback === 'function') callback(null);
	};
	
	Server.prototype.isDestroyed = function() {
	  return this._serverState == 'destroyed';
	}
	
	/**
	 * @ignore
	 */
	Server.prototype.isConnected = function() {
	  return this.connectionPool != null && this.connectionPool.isConnected();
	}
	
	/**
	 * @ignore
	 */
	Server.prototype.canWrite = Server.prototype.isConnected;
	Server.prototype.canRead = Server.prototype.isConnected;
	
	Server.prototype.isAutoReconnect = function() {
	  if(this.isSetMember()) return false;
	  return this.options.auto_reconnect != null ? this.options.auto_reconnect : true;
	}
	
	/**
	 * @ignore
	 */
	Server.prototype.allServerInstances = function() {
	  return [this];
	}
	
	/**
	 * @ignore
	 */
	Server.prototype.isSetMember = function() {
	  return this.replicasetInstance != null || this.mongosInstance != null;
	}
	
	/**
	 * @ignore
	 */
	Server.prototype.setSocketOptions = function(options) {
	  var connections = this.allRawConnections();
	  for(var i = 0; i < connections.length; i++) {
	    connections[i].setSocketOptions(options);
	  }
	}
	
	/**
	 * Assigns a replica set to this `server`.
	 *
	 * @param {ReplSet} replset
	 * @ignore
	 */
	Server.prototype.assignReplicaSet = function (replset) {
	  this.replicasetInstance = replset;
	  this.inheritReplSetOptionsFrom(replset);
	  this.enableRecordQueryStats(replset.recordQueryStats);
	}
	
	/**
	 * Takes needed options from `replset` and overwrites
	 * our own options.
	 *
	 * @param {ReplSet} replset
	 * @ignore
	 */
	Server.prototype.inheritReplSetOptionsFrom = function (replset) {
	  this.socketOptions = {};
	  this.socketOptions.connectTimeoutMS = replset.options.socketOptions.connectTimeoutMS || 30000;
	
	  if(replset.options.ssl) {
	    // Set ssl on
	    this.socketOptions.ssl = true;
	    // Set ssl validation
	    this.socketOptions.sslValidate = replset.options.sslValidate == null ? false : replset.options.sslValidate;
	    // Set the ssl certificate authority (array of Buffer/String keys)
	    this.socketOptions.sslCA = Array.isArray(replset.options.sslCA) ? replset.options.sslCA : null;
	    // Set certificate to present
	    this.socketOptions.sslCert = replset.options.sslCert;
	    // Set certificate to present
	    this.socketOptions.sslKey = replset.options.sslKey;
	    // Password to unlock private key
	    this.socketOptions.sslPass = replset.options.sslPass;
	  }
	
	  // If a socket option object exists clone it
	  if(utils.isObject(replset.options.socketOptions)) {
	    var keys = Object.keys(replset.options.socketOptions);
	    for(var i = 0; i < keys.length; i++)
	      this.socketOptions[keys[i]] = replset.options.socketOptions[keys[i]];
	  }
	}
	
	/**
	 * Opens this server connection.
	 *
	 * @ignore
	 */
	Server.prototype.connect = function(dbInstance, options, callback) {
	  if('function' === typeof options) callback = options, options = {};
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;
	  var self = this;
	  // Save the options
	  this.options = options;
	
	  // Currently needed to work around problems with multiple connections in a pool with ssl
	  // TODO fix if possible
	  if(this.ssl == true) {
	    // Set up socket options for ssl
	    this.socketOptions.ssl = true;
	    // Set ssl validation
	    this.socketOptions.sslValidate = this.sslValidate == null ? false : this.sslValidate;
	    // Set the ssl certificate authority (array of Buffer/String keys)
	    this.socketOptions.sslCA = Array.isArray(this.sslCA) ? this.sslCA : null;
	    // Set certificate to present
	    this.socketOptions.sslCert = this.sslCert;
	    // Set certificate to present
	    this.socketOptions.sslKey = this.sslKey;
	    // Password to unlock private key
	    this.socketOptions.sslPass = this.sslPass;
	  }
	
	  // Let's connect
	  var server = this;
	  // Let's us override the main receiver of events
	  var eventReceiver = options.eventReceiver != null ? options.eventReceiver : this;
	  // Save reference to dbInstance
	  this.db = dbInstance;  // `db` property matches ReplSet and Mongos
	  this.dbInstances = [dbInstance];
	
	  // Force connection pool if there is one
	  if(server.connectionPool) server.connectionPool.stop();
	  // Set server state to connecting
	  this._serverState = 'connecting';
	
	  if(server.connectionPool != null) {
	    // Remove all the listeners on the pool so it does not fire messages all over the place
	    this.connectionPool.removeAllEventListeners();
	    // Close the connection if it's open
	    this.connectionPool.stop(true);    
	  }
	
	  this.connectionPool = new ConnectionPool(this.host, this.port, this.poolSize, dbInstance.bson, this.socketOptions);
	  var connectionPool = this.connectionPool;
	  // If ssl is not enabled don't wait between the pool connections
	  if(this.ssl == null || !this.ssl) connectionPool._timeToWait = null;
	  // Set logger on pool
	  connectionPool.logger = this.logger;
	  connectionPool.bson = dbInstance.bson;
	
	  // Set basic parameters passed in
	  var returnIsMasterResults = options.returnIsMasterResults == null ? false : options.returnIsMasterResults;
	
	  // Create a default connect handler, overriden when using replicasets
	  var connectCallback = function(_server) {
	    return function(err, reply) {  
	      // ensure no callbacks get called twice
	      var internalCallback = callback;
	      callback = null;
	      
	      // Assign the server
	      _server = _server != null ? _server : server;
	      
	      // If something close down the connection and removed the callback before
	      // proxy killed connection etc, ignore the erorr as close event was isssued
	      if(err != null && internalCallback == null) return;
	      // Internal callback
	      if(err != null) return internalCallback(err, null, _server);
	      _server.master = reply.documents[0].ismaster == 1 ? true : false;
	      _server.connectionPool.setMaxBsonSize(reply.documents[0].maxBsonObjectSize);
	      _server.connectionPool.setMaxMessageSizeBytes(reply.documents[0].maxMessageSizeBytes);
	      _server.connectionPool.setMaxWriteBatchSize(reply.documents[0].maxWriteBatchSize);
	      // Set server state to connEcted
	      _server._serverState = 'connected';
	      // Set server as connected
	      _server.connected = true;
	      // Save document returned so we can query it
	      _server.isMasterDoc = reply.documents[0];
	      
	      if(self.emitOpen) {        
	        _server._emitAcrossAllDbInstances(_server, eventReceiver, "open", null, returnIsMasterResults ? reply : null, null);        
	        self.emitOpen = false;
	      } else {
	        _server._emitAcrossAllDbInstances(_server, eventReceiver, "reconnect", null, returnIsMasterResults ? reply : null, null);        
	      }
	
	      // Set server capabilities
	      server.serverCapabilities = new ServerCapabilities(_server.isMasterDoc);      
	
	      // Set server capabilities on all the connections
	      var connections = connectionPool.getAllConnections();
	      for(var i = 0; i < connections.length; i++) {
	        connections[i].serverCapabilities = server.serverCapabilities;
	      }
	
	      // If we have it set to returnIsMasterResults
	      if(returnIsMasterResults) {
	        internalCallback(null, reply, _server);
	      } else {
	        internalCallback(null, dbInstance, _server);
	      }
	    }
	  };
	
	  // Let's us override the main connect callback
	  var connectHandler = options.connectHandler == null ? connectCallback(server) : options.connectHandler;
	
	  // Set up on connect method
	  connectionPool.on("poolReady", function() {
	    // Create db command and Add the callback to the list of callbacks by the request id (mapping outgoing messages to correct callbacks)
	    var db_command = DbCommand.NcreateIsMasterCommand(dbInstance, dbInstance.databaseName);
	    // Check out a reader from the pool
	    var connection = connectionPool.checkoutConnection();
	    // Register handler for messages
	    server._registerHandler(db_command, false, connection, connectHandler);
	    // Write the command out
	    connection.write(db_command);
	  })
	
	  // Set up item connection
	  connectionPool.on("message", function(message) {
	    // Attempt to parse the message
	    try {
	      // Create a new mongo reply
	      var mongoReply = new MongoReply()
	      // Parse the header
	      mongoReply.parseHeader(message, connectionPool.bson)
	
	      // If message size is not the same as the buffer size
	      // something went terribly wrong somewhere
	      if(mongoReply.messageLength != message.length) {
	        // Emit the error
	        if(eventReceiver.listeners("error") && eventReceiver.listeners("error").length > 0) eventReceiver.emit("error", new Error("bson length is different from message length"), server);
	        // Remove all listeners
	        server.removeAllListeners();
	      } else {
	        var startDate = new Date().getTime();
	
	        // Callback instance
	        var callbackInfo = server._findHandler(mongoReply.responseTo.toString());
	        // Abort if not a valid callbackInfo, don't try to call it
	        if(callbackInfo == null || callbackInfo.info == null) return;
	
	        // The command executed another request, log the handler again under that request id
	        if(mongoReply.requestId > 0 && mongoReply.cursorId.toString() != "0" 
	          && callbackInfo && callbackInfo.info && callbackInfo.info.exhaust) {
	            server._reRegisterHandler(mongoReply.requestId, callbackInfo);
	        }
	
	        // Parse the body
	        mongoReply.parseBody(message, connectionPool.bson, callbackInfo.info.raw, function(err) {
	          if(err != null) {
	            // If pool connection is already closed
	            if(server._serverState === 'disconnected') return;
	            // Set server state to disconnected
	            server._serverState = 'disconnected';
	            // Remove all listeners and close the connection pool
	            server.removeAllListeners();
	            connectionPool.stop(true);
	
	            // If we have a callback return the error
	            if(typeof callback === 'function') {
	              // ensure no callbacks get called twice
	              var internalCallback = callback;
	              callback = null;
	              // Perform callback
	              internalCallback(err, null, server);
	            } else if(server.isSetMember()) {
	              if(server.listeners("parseError") && server.listeners("parseError").length > 0) server.emit("parseError", utils.toError(err), server);
	            } else {
	              if(eventReceiver.listeners("parseError") && eventReceiver.listeners("parseError").length > 0) eventReceiver.emit("parseError", utils.toError(err), server);
	            }
	
	            // If we are a single server connection fire errors correctly
	            if(!server.isSetMember()) {
	              // Fire all callback errors
	              server.__executeAllCallbacksWithError(err);
	              // Emit error
	              server._emitAcrossAllDbInstances(server, eventReceiver, "parseError", server, null, true);
	            }
	            // Short cut
	            return;
	          }
	
	          // Let's record the stats info if it's enabled
	          if(server.recordQueryStats == true && server._state['runtimeStats'] != null
	            && server._state.runtimeStats['queryStats'] instanceof RunningStats) {
	            // Add data point to the running statistics object
	            server._state.runtimeStats.queryStats.push(new Date().getTime() - callbackInfo.info.start);
	          }
	
	          // Dispatch the call
	          server._callHandler(mongoReply.responseTo, mongoReply, null);
	
	          // If we have an error about the server not being master or primary
	          if((mongoReply.responseFlag & (1 << 1)) != 0
	            && mongoReply.documents[0].code
	            && mongoReply.documents[0].code == 13436) {
	              server.close();
	          }
	        });
	      }
	    } catch (err) {
	      // Throw error in next tick
	      processor(function() {
	        throw err;
	      })
	    }
	  });
	
	  // Handle timeout
	  connectionPool.on("timeout", function(err) {
	    // If pool connection is already closed
	    if(server._serverState === 'disconnected' 
	      || server._serverState === 'destroyed') return;
	    // Set server state to disconnected
	    server._serverState = 'disconnected';
	    // If we have a callback return the error
	    if(typeof callback === 'function') {
	      // ensure no callbacks get called twice
	      var internalCallback = callback;
	      callback = null;
	      // Perform callback
	      internalCallback(err, null, server);
	    } else if(server.isSetMember()) {
	      if(server.listeners("timeout") && server.listeners("timeout").length > 0) server.emit("timeout", err, server);
	    } else {
	      if(eventReceiver.listeners("timeout") && eventReceiver.listeners("timeout").length > 0) eventReceiver.emit("timeout", err, server);
	    }
	
	    // If we are a single server connection fire errors correctly
	    if(!server.isSetMember()) {
	      // Fire all callback errors
	      server.__executeAllCallbacksWithError(err);
	      // Emit error
	      server._emitAcrossAllDbInstances(server, eventReceiver, "timeout", err, server, true);
	    }
	
	    // If we have autoConnect enabled let's fire up an attempt to reconnect
	    if(server.isAutoReconnect() 
	      && !server.isSetMember()
	      && (server._serverState != 'destroyed')
	      && !server._reconnectInProgreess) {
	      // Set the number of retries
	      server._reconnect_retries = server.db.numberOfRetries;
	      // Attempt reconnect
	      server._reconnectInProgreess = true;
	      setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);
	    }    
	  });
	
	  // Handle errors
	  connectionPool.on("error", function(message, connection, error_options) {
	    // If pool connection is already closed
	    if(server._serverState === 'disconnected' 
	      || server._serverState === 'destroyed') return;
	    
	    // Set server state to disconnected
	    server._serverState = 'disconnected';
	    // Error message
	    var error_message = new Error(message && message.err ? message.err : message);
	    // Error message coming from ssl
	    if(error_options && error_options.ssl) error_message.ssl = true;
	
	    // If we have a callback return the error
	    if(typeof callback === 'function') {
	      // ensure no callbacks get called twice
	      var internalCallback = callback;
	      callback = null;
	      // Perform callback
	      internalCallback(error_message, null, server);
	    } else if(server.isSetMember()) {
	      if(server.listeners("error") && server.listeners("error").length > 0) server.emit("error", error_message, server);
	    } else {
	      if(eventReceiver.listeners("error") && eventReceiver.listeners("error").length > 0) eventReceiver.emit("error", error_message, server);
	    }
	
	    // If we are a single server connection fire errors correctly
	    if(!server.isSetMember()) {
	      // Fire all callback errors
	      server.__executeAllCallbacksWithError(error_message);
	      // Emit error
	      server._emitAcrossAllDbInstances(server, eventReceiver, "error", error_message, server, true);
	    }
	
	    // If we have autoConnect enabled let's fire up an attempt to reconnect
	    if(server.isAutoReconnect() 
	      && !server.isSetMember()
	      && (server._serverState != 'destroyed')
	      && !server._reconnectInProgreess) {
	
	      // Set the number of retries
	      server._reconnect_retries = server.db.numberOfRetries;
	      // Attempt reconnect
	      server._reconnectInProgreess = true;
	      setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);
	    }    
	  });
	
	  // Handle close events
	  connectionPool.on("close", function() {
	    // If pool connection is already closed
	    if(server._serverState === 'disconnected' 
	      || server._serverState === 'destroyed') return;
	    // Set server state to disconnected
	    server._serverState = 'disconnected';
	    // If we have a callback return the error
	    if(typeof callback == 'function') {
	      // ensure no callbacks get called twice
	      var internalCallback = callback;
	      callback = null;
	      // Perform callback
	      internalCallback(new Error("connection closed"), null, server);
	    } else if(server.isSetMember()) {
	      if(server.listeners("close") && server.listeners("close").length > 0) server.emit("close", new Error("connection closed"), server);
	    } else {
	      if(eventReceiver.listeners("close") && eventReceiver.listeners("close").length > 0) eventReceiver.emit("close", new Error("connection closed"), server);
	    }
	
	    // If we are a single server connection fire errors correctly
	    if(!server.isSetMember()) {
	      // Fire all callback errors
	      server.__executeAllCallbacksWithError(new Error("connection closed"));
	      // Emit error
	      server._emitAcrossAllDbInstances(server, eventReceiver, "close", server, null, true);
	    }
	
	    // If we have autoConnect enabled let's fire up an attempt to reconnect
	    if(server.isAutoReconnect() 
	      && !server.isSetMember()
	      && (server._serverState != 'destroyed')
	      && !server._reconnectInProgreess) {
	
	      // Set the number of retries
	      server._reconnect_retries = server.db.numberOfRetries;  
	      // Attempt reconnect
	      server._reconnectInProgreess = true;
	      setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);
	    }    
	  });
	
	  /**
	   * @ignore
	   */
	  var __attemptReconnect = function(server) {
	    return function() {
	      // Attempt reconnect
	      server.connect(server.db, server.options, function(err, result) {
	        server._reconnect_retries = server._reconnect_retries - 1;
	
	        if(err) {
	          // Retry
	          if(server._reconnect_retries == 0 || server._serverState == 'destroyed') {
	            server._serverState = 'connected';
	            server._reconnectInProgreess = false
	            // Fire all callback errors
	            return server.__executeAllCallbacksWithError(new Error("failed to reconnect to server"));
	          } else {
	            return setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);
	          }
	        } else {
	          // Set as authenticating (isConnected will be false)
	          server._serverState = 'authenticating';
	          // Apply any auths, we don't try to catch any errors here
	          // as there are nowhere to simply propagate them to
	          self._apply_auths(server.db, function(err, result) {            
	            server._serverState = 'connected';
	            server._reconnectInProgreess = false;
	
	            // Execute any buffered reads and writes
	            server._commandsStore.execute_queries();
	            server._commandsStore.execute_writes();
	            // Emit reconnect event
	            server.emit('reconnect');
	          });
	        } 
	      });      
	    }
	  }
	
	  // If we have a parser error we are in an unknown state, close everything and emit
	  // error
	  connectionPool.on("parseError", function(err) {
	    // If pool connection is already closed
	    if(server._serverState === 'disconnected' 
	      || server._serverState === 'destroyed') return;
	    // Set server state to disconnected
	    server._serverState = 'disconnected';
	    // If we have a callback return the error
	    if(typeof callback === 'function') {
	      // ensure no callbacks get called twice
	      var internalCallback = callback;
	      callback = null;
	      // Perform callback
	      internalCallback(utils.toError(err), null, server);
	    } else if(server.isSetMember()) {
	      if(server.listeners("parseError") && server.listeners("parseError").length > 0) server.emit("parseError", utils.toError(err), server);
	    } else {
	      if(eventReceiver.listeners("parseError") && eventReceiver.listeners("parseError").length > 0) eventReceiver.emit("parseError", utils.toError(err), server);
	    }
	
	    // If we are a single server connection fire errors correctly
	    if(!server.isSetMember()) {
	      // Fire all callback errors
	      server.__executeAllCallbacksWithError(utils.toError(err));
	      // Emit error
	      server._emitAcrossAllDbInstances(server, eventReceiver, "parseError", server, null, true);
	      // Emit close event
	      server._emitAcrossAllDbInstances(server, eventReceiver, "close", new Error("connection closed"), null, true);
	    }
	  });
	
	  // Boot up connection poole, pass in a locator of callbacks
	  connectionPool.start();
	}
	
	/**
	 * @ignore
	 */
	Server.prototype.allRawConnections = function() {
	  return this.connectionPool != null ? this.connectionPool.getAllConnections() : [];
	}
	
	/**
	 * Check if a writer can be provided
	 * @ignore
	 */
	var canCheckoutWriter = function(self, read) {
	  var error = null;
	  // We cannot write to an arbiter or secondary server
	  if(self.isMasterDoc && self.isMasterDoc['arbiterOnly'] == true) {
	    error = new Error("Cannot write to an arbiter");
	    error.code = -5000;
	  } if(self.isMasterDoc && self.isMasterDoc['secondary'] == true) {
	    error = new Error("Cannot write to a secondary");
	    error.code = -5000;
	  } else if(read == true && self._readPreference == ReadPreference.SECONDARY && self.isMasterDoc && self.isMasterDoc['ismaster'] == true) {
	    error = new Error("Cannot read from primary when secondary only specified");
	    error.code = -5000;
	  } else if(!self.isMasterDoc) {
	    error = new Error("Cannot determine state of server");
	    error.code = -5000;
	  }
	
	  // Return no error
	  return error;
	}
	
	/**
	 * @ignore
	 */
	Server.prototype.checkoutWriter = function(read) {
	  if(this._serverState == 'disconnected' || this._serverState == 'destroyed')
	    return null;
	  if(read == true) return this.connectionPool.checkoutConnection();
	  // Check if are allowed to do a checkout (if we try to use an arbiter f.ex)
	  var result = canCheckoutWriter(this, read);
	  // If the result is null check out a writer
	  if(result == null && this.connectionPool != null) {
	    return this.connectionPool.checkoutConnection();
	  } else if(result == null) {
	    return null;
	  } else {
	    return result;
	  }
	}
	
	/**
	 * Check if a reader can be provided
	 * @ignore
	 */
	var canCheckoutReader = function(self) {
	  // We cannot write to an arbiter or secondary server
	  if(self.isMasterDoc && self.isMasterDoc['arbiterOnly'] == true && self.isSetMember()) {
	    return new Error("Cannot write to an arbiter");
	  } else if(self._readPreference != null) {
	    // If the read preference is Primary and the instance is not a master return an error
	    if((self._readPreference == ReadPreference.PRIMARY) && self.isMasterDoc && self.isMasterDoc['ismaster'] != true) {
	      return new Error("Read preference is Server.PRIMARY and server is not master");
	    } else if(self._readPreference == ReadPreference.SECONDARY && self.isMasterDoc && self.isMasterDoc['ismaster'] == true) {
	      return new Error("Cannot read from primary when secondary only specified");
	    }
	  } else if(!self.isMasterDoc) {
	    return new Error("Cannot determine state of server");
	  }
	
	  // Return no error
	  return null;
	}
	
	/**
	 * @ignore
	 */
	Server.prototype.checkoutReader = function(read) {
	  if(this._serverState == 'disconnected' || this._serverState == 'destroyed')
	    return null;
	  // Check if are allowed to do a checkout (if we try to use an arbiter f.ex)
	  var result = canCheckoutReader(this);
	  // If the result is null check out a writer
	  if(result == null && this.connectionPool != null) {
	    return this.connectionPool.checkoutConnection();
	  } else if(result == null) {
	    return null;
	  } else {
	    return result;
	  }
	}
	
	/**
	 * @ignore
	 */
	Server.prototype.enableRecordQueryStats = function(enable) {
	  this.recordQueryStats = enable;
	}
	
	/**
	 * Internal statistics object used for calculating average and standard devitation on
	 * running queries
	 * @ignore
	 */
	var RunningStats = function() {
	  var self = this;
	  this.m_n = 0;
	  this.m_oldM = 0.0;
	  this.m_oldS = 0.0;
	  this.m_newM = 0.0;
	  this.m_newS = 0.0;
	
	  // Define getters
	  Object.defineProperty(this, "numDataValues", { enumerable: true
	    , get: function () { return this.m_n; }
	  });
	
	  Object.defineProperty(this, "mean", { enumerable: true
	    , get: function () { return (this.m_n > 0) ? this.m_newM : 0.0; }
	  });
	
	  Object.defineProperty(this, "variance", { enumerable: true
	    , get: function () { return ((this.m_n > 1) ? this.m_newS/(this.m_n - 1) : 0.0); }
	  });
	
	  Object.defineProperty(this, "standardDeviation", { enumerable: true
	    , get: function () { return Math.sqrt(this.variance); }
	  });
	
	  Object.defineProperty(this, "sScore", { enumerable: true
	    , get: function () {
	      var bottom = this.mean + this.standardDeviation;
	      if(bottom == 0) return 0;
	      return ((2 * this.mean * this.standardDeviation)/(bottom));
	    }
	  });
	}
	
	/**
	 * @ignore
	 */
	RunningStats.prototype.push = function(x) {
	  // Update the number of samples
	  this.m_n = this.m_n + 1;
	  
	  // See Knuth TAOCP vol 2, 3rd edition, page 232
	  if(this.m_n == 1) {
	    this.m_oldM = this.m_newM = x;
	    this.m_oldS = 0.0;
	  } else {
	    this.m_newM = this.m_oldM + (x - this.m_oldM) / this.m_n;
	    this.m_newS = this.m_oldS + (x - this.m_oldM) * (x - this.m_newM);
	    // set up for next iteration
	    this.m_oldM = this.m_newM;
	    this.m_oldS = this.m_newS;
	  }
	}
	
	/**
	 * @ignore
	 */
	Object.defineProperty(Server.prototype, "autoReconnect", { enumerable: true
	  , get: function () {
	      return this.options['auto_reconnect'] == null ? false : this.options['auto_reconnect'];
	    }
	});
	
	/**
	 * @ignore
	 */
	Object.defineProperty(Server.prototype, "connection", { enumerable: true
	  , get: function () {
	      return this.internalConnection;
	    }
	  , set: function(connection) {
	      this.internalConnection = connection;
	    }
	});
	
	/**
	 * @ignore
	 */
	Object.defineProperty(Server.prototype, "master", { enumerable: true
	  , get: function () {
	      return this.internalMaster;
	    }
	  , set: function(value) {
	      this.internalMaster = value;
	    }
	});
	
	/**
	 * @ignore
	 */
	Object.defineProperty(Server.prototype, "primary", { enumerable: true
	  , get: function () {
	      return this;
	    }
	});
	
	/**
	 * Getter for query Stats
	 * @ignore
	 */
	Object.defineProperty(Server.prototype, "queryStats", { enumerable: true
	  , get: function () {
	      return this._state.runtimeStats.queryStats;
	    }
	});
	
	/**
	 * @ignore
	 */
	Object.defineProperty(Server.prototype, "runtimeStats", { enumerable: true
	  , get: function () {
	      return this._state.runtimeStats;
	    }
	});
	
	/**
	 * Get Read Preference method
	 * @ignore
	 */
	Object.defineProperty(Server.prototype, "readPreference", { enumerable: true
	  , get: function () {
	      if(this._readPreference == null && this.readSecondary) {
	        return Server.READ_SECONDARY;
	      } else if(this._readPreference == null && !this.readSecondary) {
	        return Server.READ_PRIMARY;
	      } else {
	        return this._readPreference;
	      }
	    }
	});
	
	/**
	 * @ignore
	 */
	exports.Server = Server;


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var ServerCapabilities = function(isMasterResult) {  
	  // Capabilities
	  var aggregationCursor = false;
	  var writeCommands = false;
	  var textSearch = false;
	  var authCommands = false;
	  var listCollections = false;
	  var listIndexes = false;
	  var maxNumberOfDocsInBatch = isMasterResult.maxWriteBatchSize || 1000;
	
	  if(isMasterResult.minWireVersion >= 0) {
	  	textSearch = true;
	  }
	
	  if(isMasterResult.maxWireVersion >= 1) {
	  	aggregationCursor = true;
	    authCommands = true;
	  }
	
	  if(isMasterResult.maxWireVersion >= 2) {
	    writeCommands = true;
	  }
	
	  if(isMasterResult.maxWireVersion >= 3) {
	    listCollections = true;
	    listIndexes = true;
	  }  
	
	  // If no min or max wire version set to 0
	  if(isMasterResult.minWireVersion == null) {
	    isMasterResult.minWireVersion = 0;
	  }
	
	  if(isMasterResult.maxWireVersion == null) {
	    isMasterResult.maxWireVersion = 0;
	  }
	
	  // Map up read only parameters
	  setup_get_property(this, "hasAggregationCursor", aggregationCursor);
	  setup_get_property(this, "hasWriteCommands", writeCommands);
	  setup_get_property(this, "hasTextSearch", textSearch);
	  setup_get_property(this, "hasAuthCommands", authCommands);
	  setup_get_property(this, "hasListCollectionsCommand", listCollections);
	  setup_get_property(this, "hasListIndexesCommand", listIndexes);
	  setup_get_property(this, "minWireVersion", isMasterResult.minWireVersion);
	  setup_get_property(this, "maxWireVersion", isMasterResult.maxWireVersion);
	  setup_get_property(this, "maxNumberOfDocsInBatch", maxNumberOfDocsInBatch);
	}
	
	var setup_get_property = function(object, name, value) {
	  Object.defineProperty(object, name, {
	      enumerable: true
	    , get: function () { return value; }
	  });  
	}
	
	exports.ServerCapabilities = ServerCapabilities;

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  ReadPreference = __webpack_require__(187).ReadPreference;
	
	exports.parse = function(url, options) {
	  // Ensure we have a default options object if none set
	  options = options || {};
	  // Variables
	  var connection_part = '';
	  var auth_part = '';
	  var query_string_part = '';
	  var dbName = 'admin';
	
	  // Must start with mongodb
	  if(url.indexOf("mongodb://") != 0)
	    throw Error("URL must be in the format mongodb://user:pass@host:port/dbname");
	  // If we have a ? mark cut the query elements off
	  if(url.indexOf("?") != -1) {
	    query_string_part = url.substr(url.indexOf("?") + 1);
	    connection_part = url.substring("mongodb://".length, url.indexOf("?"))
	  } else {
	    connection_part = url.substring("mongodb://".length);
	  }
	
	  // Check if we have auth params
	  if(connection_part.indexOf("@") != -1) {
	    auth_part = connection_part.split("@")[0];
	    connection_part = connection_part.split("@")[1];
	  }
	
	  // Check if the connection string has a db
	  if(connection_part.indexOf(".sock") != -1) {
	    if(connection_part.indexOf(".sock/") != -1) {
	      dbName = connection_part.split(".sock/")[1];
	      connection_part = connection_part.split("/", connection_part.indexOf(".sock") + ".sock".length);
	    } 
	  } else if(connection_part.indexOf("/") != -1) {
	    dbName = connection_part.split("/")[1];
	    connection_part = connection_part.split("/")[0];
	  }
	
	  // Result object
	  var object = {};
	
	  // Pick apart the authentication part of the string
	  var authPart = auth_part || '';
	  var auth = authPart.split(':', 2);
	  if(options['uri_decode_auth']){
	    auth[0] = decodeURIComponent(auth[0]);
	    if(auth[1]){
	      auth[1] = decodeURIComponent(auth[1]);
	    }
	  }
	
	  // Add auth to final object if we have 2 elements
	  if(auth.length == 2) object.auth = {user: auth[0], password: auth[1]};
	
	  // Variables used for temporary storage
	  var hostPart;
	  var urlOptions;
	  var servers;
	  var serverOptions = {socketOptions: {}};
	  var dbOptions = {read_preference_tags: []};
	  var replSetServersOptions = {socketOptions: {}};
	  // Add server options to final object
	  object.server_options = serverOptions;
	  object.db_options = dbOptions;
	  object.rs_options = replSetServersOptions;
	  object.mongos_options = {};
	
	  // Let's check if we are using a domain socket
	  if(url.match(/\.sock/)) {
	    // Split out the socket part
	    var domainSocket = url.substring(
	        url.indexOf("mongodb://") + "mongodb://".length
	      , url.lastIndexOf(".sock") + ".sock".length);
	    // Clean out any auth stuff if any
	    if(domainSocket.indexOf("@") != -1) domainSocket = domainSocket.split("@")[1];
	    servers = [{domain_socket: domainSocket}];
	  } else {
	    // Split up the db
	    hostPart = connection_part;
	    // Parse all server results
	    servers = hostPart.split(',').map(function(h) {
	      var _host, _port, ipv6match;
	      //check if it matches [IPv6]:port, where the port number is optional
	      if ((ipv6match = /\[([^\]]+)\](?:\:(.+))?/.exec(h))) {
	        _host = ipv6match[1];
	        _port = parseInt(ipv6match[2], 10) || 27017;
	      } else {
	        //otherwise assume it's IPv4, or plain hostname
	        var hostPort = h.split(':', 2);
	        _host = hostPort[0] || 'localhost';
	        _port = hostPort[1] != null ? parseInt(hostPort[1], 10) : 27017;
	        // Check for localhost?safe=true style case
	        if(_host.indexOf("?") != -1) _host = _host.split(/\?/)[0];
	      }
	      // Return the mapped object
	      return {host: _host, port: _port};
	    });
	  }
	
	  // Get the db name
	  object.dbName = dbName || 'admin';
	  // Split up all the options
	  urlOptions = (query_string_part || '').split(/[&;]/);    
	  // Ugh, we have to figure out which options go to which constructor manually.
	  urlOptions.forEach(function(opt) {
	    if(!opt) return;
	    var splitOpt = opt.split('='), name = splitOpt[0], value = splitOpt[1];
	    // Options implementations
	    switch(name) {
	      case 'slaveOk':
	      case 'slave_ok':
	        serverOptions.slave_ok = (value == 'true');
	        dbOptions.slaveOk = (value == 'true');
	        break;
	      case 'maxPoolSize':
	      case 'poolSize':
	        serverOptions.poolSize = parseInt(value, 10);
	        replSetServersOptions.poolSize = parseInt(value, 10);
	        break;
	      case 'autoReconnect':
	      case 'auto_reconnect':
	        serverOptions.auto_reconnect = (value == 'true');
	        break;
	      case 'minPoolSize':
	        throw new Error("minPoolSize not supported");
	      case 'maxIdleTimeMS':
	        throw new Error("maxIdleTimeMS not supported");
	      case 'waitQueueMultiple':
	        throw new Error("waitQueueMultiple not supported");
	      case 'waitQueueTimeoutMS':
	        throw new Error("waitQueueTimeoutMS not supported");
	      case 'uuidRepresentation':
	        throw new Error("uuidRepresentation not supported");
	      case 'ssl':
	        if(value == 'prefer') {
	          serverOptions.ssl = value;
	          replSetServersOptions.ssl = value;
	          break;
	        }
	        serverOptions.ssl = (value == 'true');
	        replSetServersOptions.ssl = (value == 'true');
	        break;
	      case 'replicaSet':
	      case 'rs_name':
	        replSetServersOptions.rs_name = value;
	        break;
	      case 'reconnectWait':
	        replSetServersOptions.reconnectWait = parseInt(value, 10);
	        break;
	      case 'retries':
	        replSetServersOptions.retries = parseInt(value, 10);
	        break;
	      case 'readSecondary':
	      case 'read_secondary':
	        replSetServersOptions.read_secondary = (value == 'true');
	        break;
	      case 'fsync':
	        dbOptions.fsync = (value == 'true');
	        break;
	      case 'journal':
	        dbOptions.journal = (value == 'true');
	        break;
	      case 'safe':
	        dbOptions.safe = (value == 'true');
	        break;
	      case 'nativeParser':
	      case 'native_parser':
	        dbOptions.native_parser = (value == 'true');
	        break;
	      case 'connectTimeoutMS':
	        serverOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);
	        replSetServersOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);
	        break;
	      case 'socketTimeoutMS':
	        serverOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);
	        replSetServersOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);
	        break;
	      case 'w':
	        dbOptions.w = parseInt(value, 10);
	        if(isNaN(dbOptions.w)) dbOptions.w = value;
	        break;
	      case 'authSource':
	        dbOptions.authSource = value;
	        break;
	      case 'gssapiServiceName':
	        dbOptions.gssapiServiceName = value;
	        break;
	      case 'authMechanism':
	        if(value == 'GSSAPI') {
	          // If no password provided decode only the principal
	          if(object.auth == null) {
	            var urlDecodeAuthPart = decodeURIComponent(authPart);
	            if(urlDecodeAuthPart.indexOf("@") == -1) throw new Error("GSSAPI requires a provided principal");
	            object.auth = {user: urlDecodeAuthPart, password: null};
	          } else {
	            object.auth.user = decodeURIComponent(object.auth.user);
	          }
	        } else if(value == 'MONGODB-X509') {
	          object.auth = {user: decodeURIComponent(authPart)};
	        }
	        
	        // Only support GSSAPI or MONGODB-CR for now
	        if(value != 'GSSAPI' 
	          && value != 'MONGODB-X509'
	          && value != 'SCRAM-SHA-1'
	          && value != 'MONGODB-CR'
	          && value != 'PLAIN') 
	            throw new Error("only GSSAPI, PLAIN, MONGODB-X509, SCRAM-SHA-1 or MONGODB-CR is supported by authMechanism");
	        
	        // Authentication mechanism
	        dbOptions.authMechanism = value;
	        break;
	      case 'wtimeoutMS':
	        dbOptions.wtimeout = parseInt(value, 10);
	        break;
	      case 'readPreference':
	        if(!ReadPreference.isValid(value)) throw new Error("readPreference must be either primary/primaryPreferred/secondary/secondaryPreferred/nearest");
	        dbOptions.read_preference = value;
	        break;
	      case 'readPreferenceTags':
	        // Decode the value
	        value = decodeURIComponent(value);
	        // Contains the tag object
	        var tagObject = {};
	        if(value == null || value == '') {
	          dbOptions.read_preference_tags.push(tagObject);
	          break;
	        }
	
	        // Split up the tags
	        var tags = value.split(/\,/);
	        for(var i = 0; i < tags.length; i++) {
	          var parts = tags[i].trim().split(/\:/);
	          tagObject[parts[0]] = parts[1];
	        }
	
	        // Set the preferences tags
	        dbOptions.read_preference_tags.push(tagObject);
	        break;
	      default:
	        break;
	    }
	  });
	
	  // No tags: should be null (not [])
	  if(dbOptions.read_preference_tags.length === 0) {
	    dbOptions.read_preference_tags = null;
	  }
	
	  // Validate if there are an invalid write concern combinations
	  if((dbOptions.w == -1 || dbOptions.w == 0) && (
	      dbOptions.journal == true
	      || dbOptions.fsync == true
	      || dbOptions.safe == true)) throw new Error("w set to -1 or 0 cannot be combined with safe/w/journal/fsync")
	
	  // If no read preference set it to primary
	  if(!dbOptions.read_preference) dbOptions.read_preference = 'primary';
	
	  // Add servers to result
	  object.servers = servers;
	  // Returned parsed object
	  return object;
	}


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	var QueryCommand = __webpack_require__(180).QueryCommand,
	  GetMoreCommand = __webpack_require__(177).GetMoreCommand,
	  KillCursorCommand = __webpack_require__(179).KillCursorCommand,
	  Long = __webpack_require__(150).Long,
	  ReadPreference = __webpack_require__(187).ReadPreference,
	  CursorStream = __webpack_require__(198),
	  timers = __webpack_require__(258),
	  utils = __webpack_require__(207);
	
	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(207).processor();
	
	/**
	 * Constructor for a cursor object that handles all the operations on query result
	 * using find. This cursor object is unidirectional and cannot traverse backwards. Clients should not be creating a cursor directly,
	 * but use find to acquire a cursor. (INTERNAL TYPE)
	 *
	 * Options
	 *  - **skip** {Number} skip number of documents to skip.
	 *  - **limit** {Number}, limit the number of results to return. -1 has a special meaning and is used by Db.eval. A value of 1 will also be treated as if it were -1.
	 *  - **sort** {Array | Object}, set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.
	 *  - **hint**  {Object}, hint force the query to use a specific index.
	 *  - **explain** {Boolean}, explain return the explaination of the query.
	 *  - **snapshot** {Boolean}, snapshot Snapshot mode assures no duplicates are returned.
	 *  - **timeout** {Boolean}, timeout allow the query to timeout.
	 *  - **tailable** {Boolean}, tailable allow the cursor to be tailable.
	 *  - **awaitdata** {Boolean}, awaitdata allow the cursor to wait for data, only applicable for tailable cursor.
	 *  - **oplogReplay** {Boolean}, sets an internal flag, only applicable for tailable cursor.
	 *  - **batchSize** {Number}, batchSize the number of the subset of results to request the database to return for every request. This should initially be greater than 1 otherwise the database will automatically close the cursor. The batch size can be set to 1 with cursorInstance.batchSize after performing the initial query to the database.
	 *  - **raw** {Boolean}, raw return all query documents as raw buffers (default false).
	 *  - **read** {Boolean}, read specify override of read from source (primary/secondary).
	 *  - **returnKey** {Boolean}, returnKey only return the index key.
	 *  - **maxScan** {Number}, maxScan limit the number of items to scan.
	 *  - **min** {Number}, min set index bounds.
	 *  - **max** {Number}, max set index bounds.
	 *  - **maxTimeMS** {Number}, number of miliseconds to wait before aborting the query.
	 *  - **showDiskLoc** {Boolean}, showDiskLoc show disk location of results.
	 *  - **comment** {String}, comment you can put a $comment field on a query to make looking in the profiler logs simpler.
	 *  - **numberOfRetries** {Number}, numberOfRetries if using awaidata specifies the number of times to retry on timeout.
	 *  - **dbName** {String}, dbName override the default dbName.
	 *  - **tailableRetryInterval** {Number}, tailableRetryInterval specify the miliseconds between getMores on tailable cursor.
	 *  - **exhaust** {Boolean}, exhaust have the server send all the documents at once as getMore packets.
	 *  - **partial** {Boolean}, partial have the sharded system return a partial result from mongos.
	 *
	 * @class Represents a Cursor.
	 * @param {Db} db the database object to work with.
	 * @param {Collection} collection the collection to query.
	 * @param {Object} selector the query selector.
	 * @param {Object} fields an object containing what fields to include or exclude from objects returned.
	 * @param {Object} [options] additional options for the collection.
	*/
	function Cursor(db, collection, selector, fields, options) {
	  this.db = db;
	  this.collection = collection;
	  this.selector = selector;
	  this.fields = fields;
	  options = !options ? {} : options;
	
	  this.skipValue = options.skip == null ? 0 : options.skip;
	  this.limitValue = options.limit == null ? 0 : options.limit;
	  this.sortValue = options.sort;
	  this.hint = options.hint;
	  this.explainValue = options.explain;
	  this.snapshot = options.snapshot;
	  this.timeout = options.timeout == null ? true : options.timeout;
	  this.tailable = options.tailable;
	  this.awaitdata = options.awaitdata;
	  this.oplogReplay = options.oplogReplay;
	  this.numberOfRetries = options.numberOfRetries == null ? 5 : options.numberOfRetries;
	  this.currentNumberOfRetries = this.numberOfRetries;
	  this.batchSizeValue = options.batchSize == null ? 0 : options.batchSize;
	  this.raw = options.raw == null ? false : options.raw;
	  this.readPreference = options.readPreference == null ? ReadPreference.PRIMARY : options.readPreference;
	  this.returnKey = options.returnKey;
	  this.maxScan = options.maxScan;
	  this.min = options.min;
	  this.max = options.max;
	  this.showDiskLoc = options.showDiskLoc;
	  this.comment = options.comment;
	  this.tailableRetryInterval = options.tailableRetryInterval || 100;
	  this.exhaust = options.exhaust || false;
	  this.partial = options.partial || false;
	  this.slaveOk = options.slaveOk || false;
	  this.maxTimeMSValue = options.maxTimeMS;
	  this.connection = options.connection;
	  this.transforms = options.transforms;
	
	  this.totalNumberOfRecords = 0;
	  this.items = [];
	  this.cursorId = Long.fromInt(0);
	
	  // This name
	  this.dbName = options.dbName;
	
	  // State variables for the cursor
	  this.state = Cursor.INIT;
	  // Keep track of the current query run
	  this.queryRun = false;
	  this.getMoreTimer = false;
	
	  // If we are using a specific db execute against it
	  if(this.dbName != null) {
	    this.collectionName = this.dbName + "." + this.collection.collectionName;
	  } else {
	    this.collectionName = (this.db.databaseName ? this.db.databaseName + "." : '') + this.collection.collectionName;
	  }
	}
	
	/**
	 * Clones a given cursor but uses new options
	 * @param  {Cursor} cursor the cursor to clone.
	 * @return {Object} [options] additional options for the collection when cloning.
	 */
	Cursor.cloneWithOptions = function(cursor, options) {
	  return new Cursor(cursor.db, cursor.collection, cursor.selector, cursor.fields, options);
	}
	
	/**
	 * Resets this cursor to its initial state. All settings like the query string,
	 * tailable, batchSizeValue, skipValue and limits are preserved.
	 *
	 * @return {Cursor} returns itself with rewind applied.
	 * @api public
	 */
	Cursor.prototype.rewind = function() {
	  var self = this;
	
	  if (self.state != Cursor.INIT) {
	    if (self.state != Cursor.CLOSED) {
	      self.close(function() {});
	    }
	
	    self.numberOfReturned = 0;
	    self.totalNumberOfRecords = 0;
	    self.items = [];
	    self.cursorId = Long.fromInt(0);
	    self.state = Cursor.INIT;
	    self.queryRun = false;
	  }
	
	  return self;
	}
	
	
	/**
	 * Returns an array of documents. The caller is responsible for making sure that there
	 * is enough memory to store the results. Note that the array only contain partial
	 * results when this cursor had been previouly accessed. In that case,
	 * cursor.rewind() can be used to reset the cursor.
	 *
	 * @param {Function} callback This will be called after executing this method successfully. The first parameter will contain the Error object if an error occured, or null otherwise. The second parameter will contain an array of BSON deserialized objects as a result of the query.
	 * @return {null}
	 * @api public
	 */
	Cursor.prototype.toArray = function(callback) {
	  var self = this;
	
	  if(!callback) {
	    throw new Error('callback is mandatory');
	  }
	
	  if(this.tailable) {
	    callback(new Error("Tailable cursor cannot be converted to array"), null);
	  } else if(this.state != Cursor.CLOSED) {
	    // return toArrayExhaust(self, callback);
	    // If we are using exhaust we can't use the quick fire method
	    if(self.exhaust) return toArrayExhaust(self, callback);
	    // Quick fire using trampoline to avoid nextTick
	    self.nextObject({noReturn: true}, function(err, result) {
	      if(err) return callback(utils.toError(err), null);
	      if(self.cursorId.toString() == "0") {
	        self.state = Cursor.CLOSED;
	
	        // If we have a transform
	        if(typeof self.transforms == 'function') {
	          self.items = self.transforms(self.items);
	        }
	
	        // Return the documents
	        return callback(null, self.items);
	      }
	
	      // Let's issue getMores until we have no more records waiting
	      getAllByGetMore(self, function(err, done) {
	        self.state = Cursor.CLOSED;
	        if(err) return callback(utils.toError(err), null);
	        // Let's release the internal list
	        var items = self.items;
	        self.items = null;
	
	        // If we have a transform
	        if(typeof self.transforms == 'function') {
	          items = self.transforms(items);
	        }
	
	        // Return all the items
	        callback(null, items);
	      });
	    })
	
	  } else {
	    callback(new Error("Cursor is closed"), null);
	  }
	}
	
	var toArrayExhaust = function(self, callback) {
	  var items = [];
	
	  self.each(function(err, item) {
	    if(err != null) {
	      return callback(utils.toError(err), null);
	    }
	
	    if(item != null && Array.isArray(items)) {
	      items.push(item);
	    } else {
	      var resultItems = items;
	      items = null;
	      self.items = [];
	      callback(null, resultItems);
	    }
	  });
	}
	
	var getAllByGetMore = function(self, callback) {
	  getMore(self, {noReturn: true}, function(err, result) {
	    if(err) return callback(utils.toError(err));
	    if(result == null) return callback(null, null);
	    if(self.cursorId.toString() == "0") return callback(null, null);
	    getAllByGetMore(self, callback);
	  })
	};
	
	/**
	 * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,
	 * not all of the elements will be iterated if this cursor had been previouly accessed.
	 * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike
	 * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements
	 * at any given time if batch size is specified. Otherwise, the caller is responsible
	 * for making sure that the entire result can fit the memory.
	 *
	 * @param {Function} callback this will be called for while iterating every document of the query result. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the document.
	 * @return {null}
	 * @api public
	 */
	Cursor.prototype.each = function(callback) {
	  var self = this;
	  var fn;
	
	  if (!callback) {
	    throw new Error('callback is mandatory');
	  }
	
	  if(this.state != Cursor.CLOSED) {
	    // If we are using exhaust we can't use the quick fire method
	    if(self.exhaust) return eachExhaust(self, callback);
	    // Quick fire using trampoline to avoid nextTick
	    if(this.items.length > 0) {
	      // Trampoline all the entries
	      while(fn = loop(self, callback)) fn(self, callback);
	      // Call each again
	      self.each(callback);
	    } else {
	      self.nextObject(function(err, item) {
	
	        if(err) {
	          self.state = Cursor.CLOSED;
	          return callback(utils.toError(err), item);
	        }
	
	        if(item == null) return callback(null, null);
	        callback(null, item);
	        self.each(callback);
	      })
	    }
	  } else {
	    callback(new Error("Cursor is closed"), null);
	  }
	};
	
	// Special for exhaust command as we don't initiate the actual result sets
	// the server just sends them as they arrive meaning we need to get the IO event
	// loop happen so we can receive more data from the socket or we return to early
	// after the first fetch and loose all the incoming getMore's automatically issued
	// from the server.
	var eachExhaust = function(self, callback) {
	  //FIX: stack overflow (on deep callback) (cred: https://github.com/limp/node-mongodb-native/commit/27da7e4b2af02035847f262b29837a94bbbf6ce2)
	  processor(function(){
	    // Fetch the next object until there is no more objects
	    self.nextObject(function(err, item) {
	      if(err != null) return callback(err, null);
	      if(item != null) {
	        callback(null, item);
	        eachExhaust(self, callback);
	      } else {
	        // Close the cursor if done
	        self.state = Cursor.CLOSED;
	        callback(err, null);
	      }
	    });
	  });
	}
	
	// Trampoline emptying the number of retrieved items
	// without incurring a nextTick operation
	var loop = function(self, callback) {
	  // No more items we are done
	  if(self.items.length == 0) return;
	  // Get the next document
	  var doc = self.items.shift();
	  // Callback
	  callback(null, doc);
	  // Loop
	  return loop;
	}
	
	/**
	 * Determines how many result the query for this cursor will return
	 *
	 * @param {Boolean} applySkipLimit if set to true will apply the skip and limits set on the cursor. Defaults to false.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the number of results or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	Cursor.prototype.count = function(applySkipLimit, callback) {
	  if(typeof applySkipLimit == 'function') {
	    callback = applySkipLimit;
	    applySkipLimit = false;
	  }
	
	  var options = {};
	  if(applySkipLimit) {
	    if(typeof this.skipValue == 'number') options.skip = this.skipValue;
	    if(typeof this.limitValue == 'number') options.limit = this.limitValue;
	  }
	
	  // If maxTimeMS set
	  if(typeof this.maxTimeMSValue == 'number') options.maxTimeMS = this.maxTimeMSValue;
	  // Do we have a hint add it to the options
	  if(this.hint) options.hint = this.hint;
	
	  // Call count command
	  this.collection.count(this.selector, options, callback);
	};
	
	/**
	 * Sets the sort parameter of this cursor to the given value.
	 *
	 * This method has the following method signatures:
	 * (keyOrList, callback)
	 * (keyOrList, direction, callback)
	 *
	 * @param {String|Array|Object} keyOrList This can be a string or an array. If passed as a string, the string will be the field to sort. If passed an array, each element will represent a field to be sorted and should be an array that contains the format [string, direction].
	 * @param {String|Number} direction this determines how the results are sorted. "asc", "ascending" or 1 for asceding order while "desc", "desceding or -1 for descending order. Note that the strings are case insensitive.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain an error object when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.
	 * @return {Cursor} an instance of this object.
	 * @api public
	 */
	Cursor.prototype.sort = function(keyOrList, direction, callback) {
	  callback = callback || function(){};
	  if(typeof direction === "function") { callback = direction; direction = null; }
	
	  if(this.tailable) {
	    callback(new Error("Tailable cursor doesn't support sorting"), null);
	  } else if(this.queryRun == true || this.state == Cursor.CLOSED) {
	    callback(new Error("Cursor is closed"), null);
	  } else {
	    var order = keyOrList;
	
	    if(direction != null) {
	      order = [[keyOrList, direction]];
	    }
	
	    this.sortValue = order;
	    callback(null, this);
	  }
	  return this;
	};
	
	/**
	 * Sets the limit parameter of this cursor to the given value.
	 *
	 * @param {Number} limit the new limit.
	 * @param {Function} [callback] this optional callback will be called after executing this method. The first parameter will contain an error object when the limit given is not a valid number or when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.
	 * @return {Cursor} an instance of this object.
	 * @api public
	 */
	Cursor.prototype.limit = function(limit, callback) {
	  if(this.tailable) {
	    if(callback) {
	      callback(new Error("Tailable cursor doesn't support limit"), null);
	    } else {
	      throw new Error("Tailable cursor doesn't support limit");
	    }
	  } else if(this.queryRun == true || this.state == Cursor.CLOSED) {
	    if(callback) {
	      callback(new Error("Cursor is closed"), null);
	    } else {
	      throw new Error("Cursor is closed");
	    }
	  } else {
	    if(limit != null && limit.constructor != Number) {
	      if(callback) {
	        callback(new Error("limit requires an integer"), null);
	      } else {
	        throw new Error("limit requires an integer");
	      }
	    } else {
	      this.limitValue = limit;
	      if(callback) return callback(null, this);
	    }
	  }
	
	  return this;
	};
	
	/**
	 * Specifies a time limit for a query operation. After the specified
	 * time is exceeded, the operation will be aborted and an error will be
	 * returned to the client. If maxTimeMS is null, no limit is applied.
	 *
	 * @param {Number} maxTimeMS the maxTimeMS for the query.
	 * @param {Function} [callback] this optional callback will be called after executing this method. The first parameter will contain an error object when the limit given is not a valid number or when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.
	 * @return {Cursor} an instance of this object.
	 * @api public
	 */
	Cursor.prototype.maxTimeMS = function(maxTimeMS, callback) {
	  if(typeof maxTimeMS != 'number') {
	    throw new Error("maxTimeMS must be a number");
	  }
	
	  // Save the maxTimeMS option
	  this.maxTimeMSValue = maxTimeMS;
	  // Return the cursor for chaining
	  return this;
	};
	
	/**
	 * Sets the read preference for the cursor
	 *
	 * @param {String} the read preference for the cursor, one of Server.READ_PRIMARY, Server.READ_SECONDARY, Server.READ_SECONDARY_ONLY
	 * @param {Function} [callback] this optional callback will be called after executing this method. The first parameter will contain an error object when the read preference given is not a valid number or when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.
	 * @return {Cursor} an instance of this object.
	 * @api public
	 */
	Cursor.prototype.setReadPreference = function(readPreference, tags, callback) {
	  if(typeof tags == 'function') callback = tags;
	
	  var _mode = readPreference != null && typeof readPreference == 'object' ? readPreference.mode : readPreference;
	
	  if(this.queryRun == true || this.state == Cursor.CLOSED) {
	    if(callback == null) throw new Error("Cannot change read preference on executed query or closed cursor");
	    callback(new Error("Cannot change read preference on executed query or closed cursor"));
	  } else if(_mode != null && _mode != 'primary'
	    && _mode != 'secondaryOnly' && _mode != 'secondary'
	    && _mode != 'nearest' && _mode != 'primaryPreferred' && _mode != 'secondaryPreferred') {
	      if(callback == null) throw new Error("only readPreference of primary, secondary, secondaryPreferred, primaryPreferred or nearest supported");
	      callback(new Error("only readPreference of primary, secondary, secondaryPreferred, primaryPreferred or nearest supported"));
	  } else {
	    this.readPreference = readPreference;
	    if(callback != null) callback(null, this);
	  }
	
	  return this;
	}
	
	/**
	 * Sets the skip parameter of this cursor to the given value.
	 *
	 * @param {Number} skip the new skip value.
	 * @param {Function} [callback] this optional callback will be called after executing this method. The first parameter will contain an error object when the skip value given is not a valid number or when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.
	 * @return {Cursor} an instance of this object.
	 * @api public
	 */
	Cursor.prototype.skip = function(skip, callback) {
	  callback = callback || function(){};
	
	  if(this.tailable) {
	    callback(new Error("Tailable cursor doesn't support skip"), null);
	  } else if(this.queryRun == true || this.state == Cursor.CLOSED) {
	    callback(new Error("Cursor is closed"), null);
	  } else {
	    if(skip != null && skip.constructor != Number) {
	      callback(new Error("skip requires an integer"), null);
	    } else {
	      this.skipValue = skip;
	      callback(null, this);
	    }
	  }
	
	  return this;
	};
	
	/**
	 * Sets the batch size parameter of this cursor to the given value.
	 *
	 * @param {Number} batchSize the new batch size.
	 * @param {Function} [callback] this optional callback will be called after executing this method. The first parameter will contain an error object when the batchSize given is not a valid number or when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.
	 * @return {Cursor} an instance of this object.
	 * @api public
	 */
	Cursor.prototype.batchSize = function(batchSize, callback) {
	  if(this.state == Cursor.CLOSED) {
	    if(callback != null) {
	      return callback(new Error("Cursor is closed"), null);
	    } else {
	      throw new Error("Cursor is closed");
	    }
	  } else if(batchSize != null && batchSize.constructor != Number) {
	    if(callback != null) {
	      return callback(new Error("batchSize requires an integer"), null);
	    } else {
	      throw new Error("batchSize requires an integer");
	    }
	  } else {
	    this.batchSizeValue = batchSize;
	    if(callback != null) return callback(null, this);
	  }
	
	  return this;
	};
	
	/**
	 * The limit used for the getMore command
	 *
	 * @return {Number} The number of records to request per batch.
	 * @ignore
	 * @api private
	 */
	var limitRequest = function(self) {
	  var requestedLimit = self.limitValue;
	  var absLimitValue = Math.abs(self.limitValue);
	  var absBatchValue = Math.abs(self.batchSizeValue);
	
	  if(absLimitValue > 0) {
	    if (absBatchValue > 0) {
	      requestedLimit = Math.min(absLimitValue, absBatchValue);
	    }
	  } else {
	    requestedLimit = self.batchSizeValue;
	  }
	
	  return requestedLimit;
	};
	
	
	/**
	 * Generates a QueryCommand object using the parameters of this cursor.
	 *
	 * @return {QueryCommand} The command object
	 * @ignore
	 * @api private
	 */
	var generateQueryCommand = function(self) {
	  // Unpack the options
	  var queryOptions = QueryCommand.OPTS_NONE;
	  if(!self.timeout) {
	    queryOptions |= QueryCommand.OPTS_NO_CURSOR_TIMEOUT;
	  }
	
	  if(self.tailable) {
	    queryOptions |= QueryCommand.OPTS_TAILABLE_CURSOR;
	    self.skipValue = self.limitValue = 0;
	
	    // if awaitdata is set
	    if(self.awaitdata) {
	      queryOptions |= QueryCommand.OPTS_AWAIT_DATA;
	    }
	
	    // This sets an internal undocumented flag. Clients should not depend on its
	    // behavior!
	    if(self.oplogReplay) {
	      queryOptions |= QueryCommand.OPTS_OPLOG_REPLAY;
	    }
	  }
	
	  if(self.exhaust) {
	    queryOptions |= QueryCommand.OPTS_EXHAUST;
	  }
	
	  // Unpack the read preference to set slave ok correctly
	  var readPreference = self.readPreference instanceof ReadPreference ? self.readPreference.mode : self.readPreference;
	
	  // if(self.read == 'secondary')
	  if(readPreference == ReadPreference.PRIMARY_PREFERRED
	    || readPreference == ReadPreference.SECONDARY
	    || readPreference == ReadPreference.SECONDARY_PREFERRED
	    || readPreference == ReadPreference.NEAREST) {
	      queryOptions |= QueryCommand.OPTS_SLAVE;
	  }
	
	  // Override slaveOk from the user
	  if(self.slaveOk) {
	    queryOptions |= QueryCommand.OPTS_SLAVE;
	  }
	
	  if(self.partial) {
	    queryOptions |= QueryCommand.OPTS_PARTIAL;
	  }
	
	  // limitValue of -1 is a special case used by Db#eval
	  var numberToReturn = self.limitValue == -1 ? -1 : limitRequest(self);
	
	  // Check if we need a special selector
	  if(self.sortValue != null || self.explainValue != null || self.hint != null || self.snapshot != null
	      || self.returnKey != null || self.maxScan != null || self.min != null || self.max != null
	      || self.showDiskLoc != null || self.comment != null || typeof self.maxTimeMSValue == 'number') {
	
	    // order by
	    var orderBy = utils.formattedOrderClause(self.sortValue);
	
	    // Build special selector
	    var specialSelector = {'$query':self.selector};
	    if(orderBy) specialSelector['orderby'] = orderBy;
	    if(self.hint != null && self.hint.constructor == Object) specialSelector['$hint'] = self.hint;
	    if(self.snapshot != null) specialSelector['$snapshot'] = self.snapshot;
	    if(self.returnKey != null) specialSelector['$returnKey'] = self.returnKey;
	    if(self.maxScan != null) specialSelector['$maxScan'] = self.maxScan;
	    if(self.min != null) specialSelector['$min'] = self.min;
	    if(self.max != null) specialSelector['$max'] = self.max;
	    if(self.showDiskLoc != null) specialSelector['$showDiskLoc'] = self.showDiskLoc;
	    if(self.comment != null) specialSelector['$comment'] = self.comment;
	
	    // If we are querying the $cmd collection we need to add maxTimeMS as a field
	    // otherwise for a normal query it's a "special selector" $maxTimeMS
	    if(typeof self.maxTimeMSValue == 'number'
	      && self.collectionName.indexOf('.$cmd') != -1) {
	      specialSelector['maxTimeMS'] = self.maxTimeMSValue;
	    } else if(typeof self.maxTimeMSValue == 'number'
	      && self.collectionName.indexOf('.$cmd') == -1) {
	      specialSelector['$maxTimeMS'] = self.maxTimeMSValue;
	    }
	
	    // If we have explain set only return a single document with automatic cursor close
	    if(self.explainValue) {
	      numberToReturn = (-1)*Math.abs(numberToReturn);
	      specialSelector['$explain'] = true;
	    }
	
	    // Return the query
	    return new QueryCommand(self.db, self.collectionName, queryOptions, self.skipValue, numberToReturn, specialSelector, self.fields);
	  } else {
	    return new QueryCommand(self.db, self.collectionName, queryOptions, self.skipValue, numberToReturn, self.selector, self.fields);
	  }
	};
	
	/**
	 * @return {Object} Returns an object containing the sort value of this cursor with
	 *     the proper formatting that can be used internally in this cursor.
	 * @ignore
	 * @api private
	 */
	Cursor.prototype.formattedOrderClause = function() {
	  return utils.formattedOrderClause(this.sortValue);
	};
	
	/**
	 * Converts the value of the sort direction into its equivalent numerical value.
	 *
	 * @param sortDirection {String|number} Range of acceptable values:
	 *     'ascending', 'descending', 'asc', 'desc', 1, -1
	 *
	 * @return {number} The equivalent numerical value
	 * @throws Error if the given sortDirection is invalid
	 * @ignore
	 * @api private
	 */
	Cursor.prototype.formatSortValue = function(sortDirection) {
	  return utils.formatSortValue(sortDirection);
	};
	
	/**
	 * Gets the next document from the cursor.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain an error object on error while the second parameter will contain a document from the returned result or null if there are no more results.
	 * @api public
	 */
	Cursor.prototype.nextObject = function(options, callback) {
	  var self = this;
	
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }
	
	  if(self.state == Cursor.INIT) {
	    var cmd;
	    try {
	      cmd = generateQueryCommand(self);
	    } catch (err) {
	      return callback(err, null);
	    }
	
	    // No need to check the keys
	    var queryOptions = {exhaust: self.exhaust
	      , raw:self.raw
	      , readPreference:self.readPreference
	      , connection:self.connection
	      , checkKeys: false};
	
	    // Execute command
	    var commandHandler = function(err, result) {
	      // If on reconnect, the command got given a different connection, switch
	      // the whole cursor to it.
	      self.connection = queryOptions.connection;
	      self.state = Cursor.OPEN; // Adjust the state of the cursor
	      if(err != null && result == null) return callback(utils.toError(err), null);
	
	      if(err == null && (result == null || result.documents == null || !Array.isArray(result.documents))) {
	        return self.close(function() {callback(new Error("command failed to return results"), null);});
	      }
	
	      if(err == null && result && result.documents[0] && result.documents[0]['$err']) {
	        return self.close(function() {callback(utils.toError(result.documents[0]), null);});
	      }
	
	      if(err == null && result && result.documents[0] && result.documents[0]['errmsg']) {
	        return self.close(function() {callback(utils.toError(result.documents[0]), null);});
	      }
	
	      self.queryRun = true;
	      self.cursorId = result.cursorId;
	      self.totalNumberOfRecords = result.numberReturned;
	
	      // Add the new documents to the list of items, using forloop to avoid
	      // new array allocations and copying
	      for(var i = 0; i < result.documents.length; i++) {
	        self.items.push(result.documents[i]);
	      }
	
	      // If we have noReturn set just return (not modifying the internal item list)
	      // used for toArray
	      if(options.noReturn) {
	        return callback(null, true);
	      }
	
	      // Ignore callbacks until the cursor is dead for exhausted
	      if(self.exhaust && result.cursorId.toString() == "0") {
	        self.nextObject(callback);
	      } else if(self.exhaust == false || self.exhaust == null) {
	        self.nextObject(callback);
	      }
	    };
	
	    // If we have no connection set on this cursor check one out
	    if(self.connection == null) {
	      try {
	        self.connection = self.db.serverConfig.checkoutReader(this.readPreference);
	
	        // Check if we have an error from the checkout Reader function
	        if(self.connection instanceof Error) {
	          return callback(utils.toError(self.connection), null);
	        }
	
	        // Add to the query options
	        queryOptions.connection = self.connection;
	      } catch(err) {
	        return callback(utils.toError(err), null);
	      }
	    }
	
	    // Execute the command
	    self.db._executeQueryCommand(cmd, queryOptions, commandHandler);
	    // Set the command handler to null
	    commandHandler = null;
	  } else if(self.items.length) {
	    var doc = self.items.shift();
	    // If we have a transform
	    if(typeof self.transforms == 'function') {
	      doc = self.transforms(doc);
	    }
	
	    callback(null, doc);
	  } else if(self.cursorId.greaterThan(Long.fromInt(0))) {
	    getMore(self, callback);
	  } else {
	    // Force cursor to stay open
	    return self.close(function() {callback(null, null);});
	  }
	}
	
	/**
	 * Gets more results from the database if any.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain an error object on error while the second parameter will contain a document from the returned result or null if there are no more results.
	 * @ignore
	 * @api private
	 */
	var getMore = function(self, options, callback) {
	  var limit = 0;
	
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }
	
	  if(self.state == Cursor.GET_MORE) return callback(null, null);
	
	  // Set get more in progress
	  self.state = Cursor.GET_MORE;
	
	  // Set options
	  if (!self.tailable && self.limitValue > 0) {
	    limit = self.limitValue - self.totalNumberOfRecords;
	    if (limit < 1) {
	      self.close(function() {callback(null, null);});
	      return;
	    }
	  }
	
	  try {
	    var getMoreCommand = new GetMoreCommand(
	        self.db
	      , self.collectionName
	      , limitRequest(self)
	      , self.cursorId
	    );
	
	    // Set up options
	    var command_options = {
	        readPreference: self.readPreference
	      , raw: self.raw
	      , connection:self.connection
	    };
	
	    // Execute the command
	    self.db._executeQueryCommand(getMoreCommand, command_options, function(err, result) {
	      var cbValue;
	
	      // Get more done
	      self.state = Cursor.OPEN;
	
	      if(err != null) {
	        self.state = Cursor.CLOSED;
	        return callback(utils.toError(err), null);
	      }
	
	      // Ensure we get a valid result
	      if(!result || !result.documents) {
	        self.state = Cursor.CLOSED;
	        return callback(utils.toError("command failed to return results"), null)
	      }
	
	      // If we have a timed out query
	      if((result.responseFlag & (1 << 0)) != 0) {
	        self.state = Cursor.CLOSED;
	        return callback(utils.toError("cursor killed or timed out"), null);        
	      }
	
	      // If the QueryFailure flag is set
	      if((result.responseFlag & (1 << 1)) != 0) {
	        self.state = Cursor.CLOSED;
	        return callback(utils.toError("QueryFailure flag set on getmore command"), null);
	      }
	
	      try {
	        var isDead = 1 === result.responseFlag && result.cursorId.isZero();
	
	        self.cursorId = result.cursorId;
	        self.totalNumberOfRecords += result.numberReturned;
	
	        // Determine if there's more documents to fetch
	        if(result.numberReturned > 0) {
	          if (self.limitValue > 0) {
	            var excessResult = self.totalNumberOfRecords - self.limitValue;
	
	            if (excessResult > 0) {
	              result.documents.splice(-1 * excessResult, excessResult);
	            }
	          }
	
	          // Reset the tries for awaitdata if we are using it
	          self.currentNumberOfRetries = self.numberOfRetries;
	          // Get the documents
	          for(var i = 0; i < result.documents.length; i++) {
	            self.items.push(result.documents[i]);
	          }
	
	          // Don's shift a document out as we need it for toArray
	          if(options.noReturn) {
	            cbValue = true;
	          } else {
	            cbValue = self.items.shift();
	          }
	        } else if(self.tailable && !isDead && self.awaitdata) {
	          // Excute the tailable cursor once more, will timeout after ~4 sec if awaitdata used
	          self.currentNumberOfRetries = self.currentNumberOfRetries - 1;
	          if(self.currentNumberOfRetries == 0) {
	            self.close(function() {
	              callback(new Error("tailable cursor timed out"), null);
	            });
	          } else {
	            getMore(self, callback);
	          }
	        } else if(self.tailable && !isDead) {
	          self.getMoreTimer = setTimeout(function() { getMore(self, callback); }, self.tailableRetryInterval);
	        } else {
	          self.close(function() {callback(null, null); });
	        }
	
	        result = null;
	      } catch(err) {
	        callback(utils.toError(err), null);
	      }
	      if (cbValue != null) callback(null, cbValue);
	    });
	
	    getMoreCommand = null;
	  } catch(err) {
	    // Get more done
	    self.state = Cursor.OPEN;
	
	    var handleClose = function() {
	      callback(utils.toError(err), null);
	    };
	
	    self.close(handleClose);
	    handleClose = null;
	  }
	}
	
	/**
	 * Gets a detailed information about how the query is performed on this cursor and how
	 * long it took the database to process it.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will always be null while the second parameter will be an object containing the details.
	 * @api public
	 */
	Cursor.prototype.explain = function(callback) {
	  var limit = (-1)*Math.abs(this.limitValue);
	
	  // Create a new cursor and fetch the plan
	  var cursor = new Cursor(this.db, this.collection, this.selector, this.fields, {
	      skip: this.skipValue
	    , limit:limit
	    , sort: this.sortValue
	    , hint: this.hint
	    , explain: true
	    , snapshot: this.snapshot
	    , timeout: this.timeout
	    , tailable: this.tailable
	    , batchSize: this.batchSizeValue
	    , slaveOk: this.slaveOk
	    , raw: this.raw
	    , readPreference: this.readPreference
	    , returnKey: this.returnKey
	    , maxScan: this.maxScan
	    , min: this.min
	    , max: this.max
	    , showDiskLoc: this.showDiskLoc
	    , comment: this.comment
	    , awaitdata: this.awaitdata
	    , oplogReplay: this.oplogReplay
	    , numberOfRetries: this.numberOfRetries
	    , dbName: this.dbName
	  });
	
	  // Fetch the explaination document
	  cursor.nextObject(function(err, item) {
	    if(err != null) return callback(utils.toError(err), null);
	    // close the cursor
	    cursor.close(function(err, result) {
	      if(err != null) return callback(utils.toError(err), null);
	      callback(null, item);
	    });
	  });
	};
	
	/**
	 * Returns a Node Transform Stream interface for this cursor.
	 *
	 * Options
	 *  - **transform** {Function} function of type function(object) { return transformed }, allows for transformation of data before emitting.
	 *
	 * @return {CursorStream} returns a stream object.
	 * @api public
	 */
	Cursor.prototype.stream = function stream(options) {
	  return new CursorStream(this, options);
	}
	
	/**
	 * Close the cursor.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will always contain null while the second parameter will contain a reference to this cursor.
	 * @return {null}
	 * @api public
	 */
	Cursor.prototype.close = function(callback) {
	  var self = this
	  this.getMoreTimer && clearTimeout(this.getMoreTimer);
	  // Close the cursor if not needed
	  if(this.cursorId instanceof Long && this.cursorId.greaterThan(Long.fromInt(0))) {
	    try {
	      var command = new KillCursorCommand(this.db, [this.cursorId]);
	      // Added an empty callback to ensure we don't throw any null exceptions
	      this.db._executeQueryCommand(command, {readPreference:self.readPreference, raw:self.raw, connection:self.connection});
	    } catch(err) {}
	  }
	
	  // Null out the connection
	  self.connection = null;
	  // Reset cursor id
	  this.cursorId = Long.fromInt(0);
	  // Set to closed status
	  this.state = Cursor.CLOSED;
	
	  if(callback) {
	    callback(null, self);
	    self.items = [];
	  }
	
	  return this;
	};
	
	/**
	 * Check if the cursor is closed or open.
	 *
	 * @return {Boolean} returns the state of the cursor.
	 * @api public
	 */
	Cursor.prototype.isClosed = function() {
	  return this.state == Cursor.CLOSED ? true : false;
	};
	
	/**
	 * Init state
	 *
	 * @classconstant INIT
	 **/
	Cursor.INIT = 0;
	
	/**
	 * Cursor open
	 *
	 * @classconstant OPEN
	 **/
	Cursor.OPEN = 1;
	
	/**
	 * Cursor closed
	 *
	 * @classconstant CLOSED
	 **/
	Cursor.CLOSED = 2;
	
	/**
	 * Cursor performing a get more
	 *
	 * @classconstant OPEN
	 **/
	Cursor.GET_MORE = 3;
	
	/**
	 * @ignore
	 * @api private
	 */
	exports.Cursor =  Cursor;


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var timers = __webpack_require__(258);
	
	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(207).processor();
	
	/**
	 * Module dependecies.
	 */
	var Stream = __webpack_require__(295).Stream;
	
	/**
	 * CursorStream
	 *
	 * Returns a stream interface for the **cursor**.
	 *
	 * Options
	 *  - **transform** {Function} function of type function(object) { return transformed }, allows for transformation of data before emitting.
	 *
	 * Events
	 *  - **data** {function(item) {}} the data event triggers when a document is ready.
	 *  - **error** {function(err) {}} the error event triggers if an error happens.
	 *  - **close** {function() {}} the end event triggers when there is no more documents available.
	 *
	 * @class Represents a CursorStream.
	 * @param {Cursor} cursor a cursor object that the stream wraps.
	 * @return {Stream}
	 */
	function CursorStream(cursor, options) {
	  if(!(this instanceof CursorStream)) return new CursorStream(cursor);
	  options = options ? options : {};
	
	  Stream.call(this);
	
	  this.readable = true;
	  this.paused = false;
	  this._cursor = cursor;
	  this._destroyed = null;
	  this.options = options;
	
	  // give time to hook up events
	  var self = this;
	  process.nextTick(function() {
	    self._init();      
	  });
	}
	
	/**
	 * Inherit from Stream
	 * @ignore
	 * @api private
	 */
	CursorStream.prototype.__proto__ = Stream.prototype;
	
	/**
	 * Flag stating whether or not this stream is readable.
	 */
	CursorStream.prototype.readable;
	
	/**
	 * Flag stating whether or not this stream is paused.
	 */
	CursorStream.prototype.paused;
	
	/**
	 * Initialize the cursor.
	 * @ignore
	 * @api private
	 */
	CursorStream.prototype._init = function () {
	  if (this._destroyed) return;
	  this._next();
	}
	
	/**
	 * Pull the next document from the cursor.
	 * @ignore
	 * @api private
	 */
	CursorStream.prototype._next = function () {
	  if(this.paused || this._destroyed) return;
	
	  var self = this;
	  // Get the next object
	  processor(function() {
	    if(self.paused || self._destroyed) return;
	
	    self._cursor.nextObject(function (err, doc) {
	      self._onNextObject(err, doc);
	    });    
	  });
	}
	
	/**
	 * Handle each document as its returned from the cursor.
	 * @ignore
	 * @api private
	 */
	CursorStream.prototype._onNextObject = function (err, doc) {
	  if(err) {
	    this.destroy(err);
	    return this.emit('end');
	  }
	
	  // when doc is null we hit the end of the cursor
	  if(!doc && (this._cursor.state == 1 || this._cursor.state == 2)) {
	    this.emit('end')
	    return this.destroy();
	  } else if(doc) {
	    var data = typeof this.options.transform == 'function' ? this.options.transform(doc) : doc;
	    this.emit('data', data);
	    this._next();
	  }
	}
	
	/**
	 * Pauses the stream.
	 *
	 * @api public
	 */
	CursorStream.prototype.pause = function () {
	  this.paused = true;
	}
	
	/**
	 * Resumes the stream.
	 *
	 * @api public
	 */
	CursorStream.prototype.resume = function () {
	  var self = this;
	
	  // Don't do anything if we are not paused
	  if(!this.paused) return;
	  if(!this._cursor.state == 3) return;
	
	  process.nextTick(function() {
	    self.paused = false;
	    // Only trigger more fetching if the cursor is open
	    self._next();
	  })
	}
	
	/**
	 * Destroys the stream, closing the underlying
	 * cursor. No more events will be emitted.
	 *
	 * @api public
	 */
	CursorStream.prototype.destroy = function (err) {
	  if (this._destroyed) return;
	  this._destroyed = true;
	  this.readable = false;
	
	  this._cursor.close();
	
	  if(err && this.listeners('error').length > 0) {
	    return this.emit('error', err);
	  }
	
	  this.emit('close');
	}
	
	// TODO - maybe implement the raw option to pass binary?
	//CursorStream.prototype.setEncoding = function () {
	//}
	
	module.exports = exports = CursorStream;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Module dependencies.
	 * @ignore
	 */
	var QueryCommand = __webpack_require__(180).QueryCommand
	  , DbCommand = __webpack_require__(175).DbCommand
	  , MongoReply = __webpack_require__(205).MongoReply
	  , Admin = __webpack_require__(154).Admin
	  , Collection = __webpack_require__(172).Collection
	  , Server = __webpack_require__(194).Server
	  , ReplSet = __webpack_require__(190).ReplSet
	  , ReadPreference = __webpack_require__(187).ReadPreference
	  , Mongos = __webpack_require__(186).Mongos
	  , Cursor = __webpack_require__(197).Cursor
	  , EventEmitter = __webpack_require__(298).EventEmitter
	  , InsertCommand = __webpack_require__(178).InsertCommand
	  , CommandCursor = __webpack_require__(173).CommandCursor
	  , f = __webpack_require__(282).format
	  , inherits = __webpack_require__(282).inherits
	  , crypto = __webpack_require__(296)
	  , timers = __webpack_require__(258)
	  , utils = __webpack_require__(207)
	
	  // Authentication methods
	  , mongodb_cr_authenticate = __webpack_require__(156).authenticate
	  , mongodb_gssapi_authenticate = __webpack_require__(157).authenticate
	  , mongodb_sspi_authenticate = __webpack_require__(160).authenticate
	  , mongodb_plain_authenticate = __webpack_require__(158).authenticate
	  , mongodb_x509_authenticate = __webpack_require__(161).authenticate
	  , mongodb_scram_authenticate = __webpack_require__(159).authenticate;
	
	var hasKerberos = false;
	// Check if we have a the kerberos library
	try {
	  __webpack_require__(297);
	  hasKerberos = true;
	} catch(err) {}
	
	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(207).processor();
	
	/**
	 * Create a new Db instance.
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowledgement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **readPreference** {String}, the preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **native_parser** {Boolean, default:false}, use c++ bson parser.
	 *  - **forceServerObjectId** {Boolean, default:false}, force server to create _id fields instead of client.
	 *  - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.
	 *  - **serializeFunctions** {Boolean, default:false}, serialize functions.
	 *  - **raw** {Boolean, default:false}, perform operations using raw bson buffers.
	 *  - **recordQueryStats** {Boolean, default:false}, record query statistics during execution.
	 *  - **retryMiliSeconds** {Number, default:5000}, number of milliseconds between retries.
	 *  - **numberOfRetries** {Number, default:5}, number of retries off connection.
	 *  - **logger** {Object, default:null}, an object representing a logger that you want to use, needs to support functions debug, log, error **({error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}})**.
	 *  - **slaveOk** {Number, default:null}, force setting of SlaveOk flag on queries (only use when explicitly connecting to a secondary server).
	 *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits
	 *  - **bufferMaxEntries** {Number, default: -1}, sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited
	 *
	 * @class Represents a Db
	 * @param {String} databaseName name of the database.
	 * @param {Object} serverConfig server config object.
	 * @param {Object} [options] additional options for the collection.
	 */
	function Db(databaseName, serverConfig, options) {
	  if(!(this instanceof Db)) return new Db(databaseName, serverConfig, options);
	  EventEmitter.call(this);
	  var self = this;
	  this.databaseName = databaseName;
	  this.serverConfig = serverConfig;
	  this.options = options == null ? {} : options;
	  // State to check against if the user force closed db
	  this._applicationClosed = false;
	  // Fetch the override flag if any
	  var overrideUsedFlag = this.options['override_used_flag'] == null ? false : this.options['override_used_flag'];
	
	  // Verify that nobody is using this config
	  if(!overrideUsedFlag && this.serverConfig != null && typeof this.serverConfig == 'object' && this.serverConfig._isUsed && this.serverConfig._isUsed()) {
	    throw new Error('A Server or ReplSet instance cannot be shared across multiple Db instances');
	  } else if(!overrideUsedFlag && typeof this.serverConfig == 'object'){
	    // Set being used
	    this.serverConfig._used = true;
	  }
	
	  // Allow slaveOk override
	  this.slaveOk = this.options['slave_ok'] == null ? false : this.options['slave_ok'];
	  this.slaveOk = this.options['slaveOk'] == null ? this.slaveOk : this.options['slaveOk'];
	
	  // Number of operations to buffer before failure
	  this.bufferMaxEntries = typeof this.options['bufferMaxEntries'] == 'number' ? this.options['bufferMaxEntries'] : -1;
	
	  // Ensure we have a valid db name
	  validateDatabaseName(databaseName);
	
	  // Contains all the connections for the db
	  try {
	    this.native_parser = this.options.native_parser;
	    // The bson lib
	    var bsonLib = this.bsonLib = this.options.native_parser ? __webpack_require__(150).BSONNative : __webpack_require__(150).BSONPure;
	    bsonLib = __webpack_require__(150).BSONPure;
	    // Fetch the serializer object
	    var BSON = bsonLib.BSON;
	
	    // Create a new instance
	    this.bson = new BSON([bsonLib.Long, bsonLib.ObjectID, bsonLib.Binary, bsonLib.Code, bsonLib.DBRef, bsonLib.Symbol, bsonLib.Double, bsonLib.Timestamp, bsonLib.MaxKey, bsonLib.MinKey]);
	    this.bson.promoteLongs = this.options.promoteLongs == null ? true : this.options.promoteLongs;
	
	    // Backward compatibility to access types
	    this.bson_deserializer = bsonLib;
	    this.bson_serializer = bsonLib;
	
	    // Add any overrides to the serializer and deserializer
	    this.bson_deserializer.promoteLongs = this.options.promoteLongs == null ? true : this.options.promoteLongs;
	  } catch (err) {
	    // If we tried to instantiate the native driver
	    var msg = 'Native bson parser not compiled, please compile '
	            + 'or avoid using native_parser=true';
	    throw Error(msg);
	  }
	
	  // Internal state of the server
	  this._state = 'disconnected';
	
	  this.pkFactory = this.options.pkFactory == null ? bsonLib.ObjectID : this.options.pkFactory;
	  this.forceServerObjectId = this.options.forceServerObjectId != null ? this.options.forceServerObjectId : false;
	
	  // Added safe
	  this.safe = this.options.safe == null ? false : this.options.safe;
	
	  // If we have not specified a "safe mode" we just print a warning to the console
	  if(this.options.safe == null
	    && this.options.w == null
	    && this.options.j == null
	    && this.options.journal == null
	    && this.options.fsync == null) {
	    console.log("========================================================================================");
	    console.log("=  Please ensure that you set the default write concern for the database by setting    =");
	    console.log("=   one of the options                                                                 =");
	    console.log("=                                                                                      =");
	    console.log("=     w: (value of > -1 or the string 'majority'), where < 1 means                     =");
	    console.log("=        no write acknowledgement                                                       =");
	    console.log("=     journal: true/false, wait for flush to journal before acknowledgement             =");
	    console.log("=     fsync: true/false, wait for flush to file system before acknowledgement           =");
	    console.log("=                                                                                      =");
	    console.log("=  For backward compatibility safe is still supported and                              =");
	    console.log("=   allows values of [true | false | {j:true} | {w:n, wtimeout:n} | {fsync:true}]      =");
	    console.log("=   the default value is false which means the driver receives does not                =");
	    console.log("=   return the information of the success/error of the insert/update/remove            =");
	    console.log("=                                                                                      =");
	    console.log("=   ex: new Db(new Server('localhost', 27017), {safe:false})                           =");
	    console.log("=                                                                                      =");
	    console.log("=   http://www.mongodb.org/display/DOCS/getLastError+Command                           =");
	    console.log("=                                                                                      =");
	    console.log("=  The default of no acknowledgement will change in the very near future                =");
	    console.log("=                                                                                      =");
	    console.log("=  This message will disappear when the default safe is set on the driver Db           =");
	    console.log("========================================================================================");
	  }
	
	  // Internal states variables
	  this.notReplied ={};
	  this.isInitializing = true;
	  this.openCalled = false;
	
	  // Command queue, keeps a list of incoming commands that need to be executed once the connection is up
	  this.commands = [];
	
	  // Set up logger
	  this.logger = this.options.logger != null
	    && (typeof this.options.logger.debug == 'function')
	    && (typeof this.options.logger.error == 'function')
	    && (typeof this.options.logger.log == 'function')
	      ? this.options.logger : {error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}};
	
	  // Associate the logger with the server config
	  this.serverConfig.logger = this.logger;
	  if(this.serverConfig.strategyInstance) this.serverConfig.strategyInstance.logger = this.logger;
	  this.tag = new Date().getTime();
	  // Just keeps list of events we allow
	  this.eventHandlers = {error:[], parseError:[], poolReady:[], message:[], close:[]};
	
	  // Controls serialization options
	  this.serializeFunctions = this.options.serializeFunctions != null ? this.options.serializeFunctions : false;
	
	  // Raw mode
	  this.raw = this.options.raw != null ? this.options.raw : false;
	
	  // Record query stats
	  this.recordQueryStats = this.options.recordQueryStats != null ? this.options.recordQueryStats : false;
	
	  // If we have server stats let's make sure the driver objects have it enabled
	  if(this.recordQueryStats == true) {
	    this.serverConfig.enableRecordQueryStats(true);
	  }
	
	  // Retry information
	  this.retryMiliSeconds = this.options.retryMiliSeconds != null ? this.options.retryMiliSeconds : 1000;
	  this.numberOfRetries = this.options.numberOfRetries != null ? this.options.numberOfRetries : 60;
	
	  // Set default read preference if any
	  this.readPreference = this.options.readPreference;
	
	  // Set slaveOk if we have specified a secondary or secondary preferred readPreference
	  if(this.readPreference == ReadPreference.SECONDARY ||
	    this.readPreference == ReadPreference.SECONDARY_PREFERRED) {
	    this.slaveOk = true;
	  }
	
	  // Set read preference on serverConfig if none is set
	  // but the db one was
	  if(this.serverConfig.options.readPreference != null) {
	    this.serverConfig.setReadPreference(this.serverConfig.options.readPreference);
	  } else if(this.readPreference != null) {
	    this.serverConfig.setReadPreference(this.readPreference);
	  }
	
	  // Ensure we keep a reference to this db
	  this.serverConfig._dbStore.add(this);
	};
	
	/**
	 * @ignore
	 */
	function validateDatabaseName(databaseName) {
	  if(typeof databaseName !== 'string') throw new Error("database name must be a string");
	  if(databaseName.length === 0) throw new Error("database name cannot be the empty string");
	  if(databaseName == '$external') return;
	
	  var invalidChars = [" ", ".", "$", "/", "\\"];
	  for(var i = 0; i < invalidChars.length; i++) {
	    if(databaseName.indexOf(invalidChars[i]) != -1) throw new Error("database names cannot contain the character '" + invalidChars[i] + "'");
	  }
	}
	
	/**
	 * @ignore
	 */
	inherits(Db, EventEmitter);
	
	/**
	 * Initialize the database connection.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the index information or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.open = function(callback) {
	  var self = this;
	
	  // Check that the user has not called this twice
	  if(this.openCalled) {
	    // Close db
	    this.close();
	    // Throw error
	    throw new Error("db object already connecting, open cannot be called multiple times");
	  }
	
	  // If we have a specified read preference
	  if(this.readPreference != null) this.serverConfig.setReadPreference(this.readPreference);
	
	  // Set that db has been opened
	  this.openCalled = true;
	
	  // Set the status of the server
	  self._state = 'connecting';
	
	  // Set up connections
	  if(self.serverConfig instanceof Server || self.serverConfig instanceof ReplSet || self.serverConfig instanceof Mongos) {
	    // Ensure we have the original options passed in for the server config
	    var connect_options = {};
	    for(var name in self.serverConfig.options) {
	      connect_options[name] = self.serverConfig.options[name]
	    }
	    connect_options.firstCall = true;
	
	    // Attempt to connect
	    self.serverConfig.connect(self, connect_options, function(err, result) {
	      if(err != null) {
	        // Close db to reset connection
	        return self.close(function () {
	          // Return error from connection
	          return callback(err, null);
	        });
	      }
	      // Set the status of the server
	      self._state = 'connected';
	      // If we have queued up commands execute a command to trigger replays
	      if(self.commands.length > 0) _execute_queued_command(self);
	      // Callback
	      process.nextTick(function() {
	        try {
	          callback(null, self);
	        } catch(err) {
	          self.close();
	          throw err;
	        }
	      });
	    });
	  } else {
	    try {
	      callback(Error("Server parameter must be of type Server, ReplSet or Mongos"), null);
	    } catch(err) {
	      self.close();
	      throw err;
	    }
	  }
	};
	
	/**
	 * Create a new Db instance sharing the current socket connections.
	 *
	 * @param {String} dbName the name of the database we want to use.
	 * @return {Db} a db instance using the new database.
	 * @api public
	 */
	Db.prototype.db = function(dbName) {
	  // Copy the options and add out internal override of the not shared flag
	  var options = {};
	  for(var key in this.options) {
	    options[key] = this.options[key];
	  }
	
	  // Add override flag
	  options['override_used_flag'] = true;
	  // Check if the db already exists and reuse if it's the case
	  var db = this.serverConfig._dbStore.fetch(dbName);
	
	  // Create a new instance
	  if(!db) {
	    db = new Db(dbName, this.serverConfig, options);
	  }
	
	  // Return the db object
	  return db;
	};
	
	/**
	 * Close the current db connection, including all the child db instances. Emits close event and calls optional callback.
	 *
	 * @param {Boolean} [forceClose] connection can never be reused.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.close = function(forceClose, callback) {
	  var self = this;
	  // Ensure we force close all connections
	  this._applicationClosed = false;
	
	  if(typeof forceClose == 'function') {
	    callback = forceClose;
	  } else if(typeof forceClose == 'boolean') {
	    this._applicationClosed = forceClose;
	  }
	
	  this.serverConfig.close(function(err, result) {
	    // You can reuse the db as everything is shut down
	    self.openCalled = false;
	    // If we have a callback call it
	    if(callback) callback(err, result);
	  });
	};
	
	/**
	 * Access the Admin database
	 *
	 * @param {Function} [callback] returns the results.
	 * @return {Admin} the admin db object.
	 * @api public
	 */
	Db.prototype.admin = function(callback) {
	  if(callback == null) return new Admin(this);
	  callback(null, new Admin(this));
	};
	
	var transformCollections = function(databaseName) {
	  var matching = f('%s.', databaseName);
	
	  return function(results) {
	    if(Array.isArray(results)) {
	      for(var i = 0; i < results.length; i++) {
	        var index = results[i].name.indexOf(matching);
	        // Remove database name if available
	        if(results[i].name && index == 0) {
	          results[i].name = results[i].name.substr(index + matching.length);
	        }
	      }      
	    } else {
	      var index = results.name.indexOf(matching);      
	      if(index == 0) {
	        results.name = results.name.substr(index + matching.length);
	      }
	    }
	
	    // Return the results
	    return results;
	  }
	}
	
	/**
	 * Get the list of all collection names for the specified db
	 *
	 * Options
	 *  - **batchSize** {Number, default:null}, The batchSize for the returned command cursor or if pre 2.8 the systems batch collection
	 *
	 * @param {object} filter Query to filter collections by
	 * @param {object} [options] additional options during update.
	 * @param {number} [options.batchSize=null] The batchSize for the returned command cursor or if pre 2.8 the systems batch collection
	 * @return {Cursor}
	 * @api public
	 */
	Db.prototype.listCollections = function(filter, options) {
	  filter = filter || {};
	  options = options || {};
	
	  // Checkout the writer
	  var connection = this.serverConfig.checkoutReader();
	  // We have a list collections command
	  if(connection && connection.serverCapabilities.hasListCollectionsCommand) {
	    // Cursor options
	    var cursor = options.batchSize ? {batchSize: options.batchSize} : {}
	    // Build the command
	    var command = { listCollections : true, filter: filter, cursor: cursor };
	    // Get the command cursor
	    return new CommandCursor(this, this.collection(DbCommand.SYSTEM_NAMESPACE_COLLECTION), command, {transform: transformCollections(this.databaseName) });
	  }
	
	  // We cannot use the listCollectionsCommand
	  if(connection && !connection.serverCapabilities.hasListCollectionsCommand) {
	    // If we have legacy mode and have not provided a full db name filter it
	    // Use Regex to correctly check if the filter name contains the database name at the beginning along with a dot
	    if(typeof filter.name == 'string' && !(new RegExp('^' + this.databaseName + '\\.').test(filter.name))) {
	      filter = utils.shallowObjectCopy(filter);
	      filter.name = f('%s.%s', this.databaseName, filter.name);
	    }
	  }
	
	  // No filter, filter by current database
	  if(filter == null) {
	    filter.name = f('/%s/', this.databaseName);
	  }
	
	  // Rewrite the filter to use $and to filter out indexes
	  if(filter.name) {
	    filter = {$and: [{name: filter.name}, {name:/^((?!\$).)*$/}]};
	  } else {
	    filter = {name:/^((?!\$).)*$/};
	  }
	
	  // Return options
	  var options = {transforms: transformCollections(this.databaseName)}
	  // Get the cursor
	  var cursor = this.collection(DbCommand.SYSTEM_NAMESPACE_COLLECTION).find(filter, options);
	  // Set the passed in batch size if one was provided
	  if(options.batchSize) cursor = cursor.batchSize(options.batchSize);
	    // We have a fallback mode using legacy systems collections
	  return cursor;
	};
	
	/**
	 * Get the list of all collection names for the specified db
	 *
	 * Options
	 *  - **namesOnly** {String, default:false}, Return only the full collection namespace.
	 *
	 * @param {String} [collectionName] the collection name we wish to filter by.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the collection names or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.collectionNames = function(collectionName, options, callback) {
	  // Unpack calls
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  collectionName = args.length ? args.shift() : null;
	  options = args.length ? args.shift() || {} : {};
	
	  var filter = {}
	  if(collectionName) {
	    filter.name = collectionName;
	  }
	
	  // Call list collections
	  this.listCollections(filter, options).toArray(callback);
	};
	
	/**
	 * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can
	 * can use it without a callback in the following way. var collection = db.collection('mycollection');
	 *
	 * Options
	*  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowledgement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **serializeFunctions** {Boolean, default:false}, serialize functions on the document.
	 *  - **raw** {Boolean, default:false}, perform all operations using raw bson objects.
	 *  - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.
	 *  - **readPreference** {String}, the preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **strict**, (Boolean, default:false) returns an error if the collection does not exist
	 *
	 * @param {String} collectionName the collection name we wish to access.
	 * @param {Object} [options] returns option results.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the collection or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.collection = function(collectionName, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {};
	  var self = this;
	
	  if(options == null || !options.strict) {
	    try {
	      var collection = new Collection(self, collectionName, self.pkFactory, options);
	      if(callback) callback(null, collection);
	      return collection;
	    } catch(err) {
	      if(callback) return callback(err);
	      throw err;
	    }
	  }
	
	  // Strict mode
	  if(typeof callback != 'function') {
	    throw utils.toError(f("A callback is required in strict mode. While getting collection %s.", collectionName));
	  }
	
	  self.listCollections({name:collectionName}).toArray(function(err, collections) {
	    if(err != null) return callback(err, null);
	    if(collections.length == 0) return callback(utils.toError(f("Collection %s does not exist. Currently in strict mode.", collectionName)), null);
	
	    try {
	      return callback(null, new Collection(self, collectionName, self.pkFactory, options));
	    } catch(err) {
	      return callback(err, null);
	    }
	  });
	};
	
	/**
	 * Fetch all collections for the current db.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the collections or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.collections = function(callback) {
	  var self = this;
	  // Let's get the collection names
	  self.collectionNames(function(err, documents) {
	    if(err != null) return callback(err, null);
	
	    // Filter collections removing any illegal ones
	    documents = documents.filter(function(doc) {
	      return doc.name.indexOf('$') == -1;
	    });
	
	    // Create collection objects
	    var collections = documents.map(function(document) {
	      return new Collection(self, document.name.replace(self.databaseName + ".", ''), self.pkFactory);
	    });
	
	    // Return the collection objects
	    callback(null, collections);
	  });
	};
	
	/**
	 * Evaluate javascript on the server
	 *
	 * Options
	 *  - **nolock** {Boolean, default:false}, Tell MongoDB not to block on the evaulation of the javascript.
	 *
	 * @param {Code} code javascript to execute on server.
	 * @param {Object|Array} [parameters] the parameters for the call.
	 * @param {Object} [options] the options
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from eval or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.eval = function(code, parameters, options, callback) {
	  // Unpack calls
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  parameters = args.length ? args.shift() : parameters;
	  options = args.length ? args.shift() || {} : {};
	
	  var finalCode = code;
	  var finalParameters = [];
	  // If not a code object translate to one
	  if(!(finalCode instanceof this.bsonLib.Code)) {
	    finalCode = new this.bsonLib.Code(finalCode);
	  }
	
	  // Ensure the parameters are correct
	  if(parameters != null && parameters.constructor != Array && typeof parameters !== 'function') {
	    finalParameters = [parameters];
	  } else if(parameters != null && parameters.constructor == Array && typeof parameters !== 'function') {
	    finalParameters = parameters;
	  }
	
	  // Create execution selector
	  var cmd = {'$eval':finalCode, 'args':finalParameters};
	  // Check if the nolock parameter is passed in
	  if(options['nolock']) {
	    cmd['nolock'] = options['nolock'];
	  }
	
	  // Set primary read preference
	  options.readPreference = ReadPreference.PRIMARY;
	
	  // Execute the command
	  this.command(cmd, options, function(err, result) {
	    if(err) return callback(err, null);
	    if(result && result.ok == 1) return callback(null, result.retval);
	    if(result) return callback(new Error("eval failed: " + result.errmsg), null);
	    callback(err, result);
	  });
	};
	
	/**
	 * Dereference a dbref, against a db
	 *
	 * @param {DBRef} dbRef db reference object we wish to resolve.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from dereference or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.dereference = function(dbRef, callback) {
	  var db = this;
	  // If we have a db reference then let's get the db first
	  if(dbRef.db != null) db = this.db(dbRef.db);
	  // Fetch the collection and find the reference
	  var collection = db.collection(dbRef.namespace);
	  collection.findOne({'_id':dbRef.oid}, function(err, result) {
	    callback(err, result);
	  });
	}
	
	/**
	 * Logout user from server, fire off on all connections and remove all auth info
	 *
	 * Options
	 *  - **authMechanism** {String, default:MONGODB-CR}, The authentication mechanism to use, GSSAPI or MONGODB-CR
	 *  - **authdb** {String}, The Db to authenticate against instead of this
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from logout or null if an error occurred.
	 * @param {Object} [options] the options
	 * @return {null}
	 * @api public
	 */
	Db.prototype.logout = function(options, callback) {
	  var self = this;
	  // Unpack calls
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};
	
	  // We have passed in an auth db
	  var runDb = options.authdb ? this.db(options.authdb) : this;
	
	  // Number of connections we need to logout from
	  var numberOfConnections = this.serverConfig.allRawConnections().length;
	  // logout command
	  var cmd = {'logout':1};
	  // Add onAll to login to ensure all connection are logged out
	  options.onAll = true;
	
	  // Execute the command
	  runDb.command(cmd, options, function(err, result) {
	    // Count down
	    numberOfConnections = numberOfConnections - 1;
	    // Work around the case where the number of connections are 0
	    if(numberOfConnections == 0 && typeof callback == 'function') {
	      var internalCallback = callback;
	      callback = null;
	
	      // Remove the db from auths
	      self.serverConfig.auth.remove(self.databaseName);
	      // Callback with result
	      internalCallback(null, result.ok == 1 ? true : false);
	    }
	  });
	}
	
	/**
	 * Authenticate a user against the server.
	 * authMechanism
	 * Options
	 *  - **authMechanism** {String, default:MONGODB-CR}, The authentication mechanism to use, GSSAPI or MONGODB-CR
	 *  - **authdb** {String}, The Db to authenticate against instead of this
	 *
	 * @param {String} username username.
	 * @param {String} password password.
	 * @param {Object} [options] the options
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from authentication or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.authenticate = function(username, password, options, callback) {
	  var self = this;
	
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  } else {
	    options = utils.shallowObjectCopy(options);
	  }
	
	  // Set default mechanism
	  if(!options.authMechanism) {
	    options.authMechanism = 'DEFAULT';
	  } else if(options.authMechanism != 'GSSAPI'
	    && options.authMechanism != 'MONGODB-CR'
	    && options.authMechanism != 'MONGODB-X509'
	    && options.authMechanism != 'SCRAM-SHA-1'
	    && options.authMechanism != 'PLAIN') {
	      return callback(new Error("only GSSAPI, PLAIN, MONGODB-X509, SCRAM-SHA-1 or MONGODB-CR is supported by authMechanism"));
	  }
	
	  // the default db to authenticate against is 'this'
	  // if authententicate is called from a retry context, it may be another one, like admin
	  var authdb = options.authdb ? options.authdb : self.databaseName;
	  authdb = options.authSource ? options.authSource : authdb;
	
	  // Callback
	  var _callback = function(err, result) {
	    if(self.listeners("authenticated").length > 0) {
	      self.emit("authenticated", err, result);
	    }
	
	    // Return to caller
	    callback(err, result);
	  }
	
	  // If classic auth delegate to auth command
	  if(options.authMechanism == 'MONGODB-CR') {
	    mongodb_cr_authenticate(self, username, password, authdb, options, _callback);
	  } else if(options.authMechanism == 'PLAIN') {
	    mongodb_plain_authenticate(self, username, password, options, _callback);
	  } else if(options.authMechanism == 'MONGODB-X509') {
	    mongodb_x509_authenticate(self, username, password, options, _callback);
	  } else if(options.authMechanism == 'SCRAM-SHA-1') {
	    mongodb_scram_authenticate(self, username, password, authdb, options, _callback);
	  } else if(options.authMechanism == 'DEFAULT') {
	    // Get a server
	    var servers = this.serverConfig.allServerInstances();
	    // if the max wire protocol version >= 3 do scram otherwise mongodb_cr
	    if(servers.length > 0 && servers[0].isMasterDoc && servers[0].isMasterDoc.maxWireVersion >= 3) {
	      mongodb_scram_authenticate(self, username, password, authdb, options, _callback);
	    } else {
	      mongodb_cr_authenticate(self, username, password, authdb, options, _callback);
	    }
	  } else if(options.authMechanism == 'GSSAPI') {
	    //
	    // Kerberos library is not installed, throw and error
	    if(hasKerberos == false) {
	      console.log("========================================================================================");
	      console.log("=  Please make sure that you install the Kerberos library to use GSSAPI                =");
	      console.log("=                                                                                      =");
	      console.log("=  npm install -g kerberos                                                             =");
	      console.log("=                                                                                      =");
	      console.log("=  The Kerberos package is not installed by default for simplicities sake              =");
	      console.log("=  and needs to be global install                                                      =");
	      console.log("========================================================================================");
	      throw new Error("Kerberos library not installed");
	    }
	
	    if(process.platform == 'win32') {
	      mongodb_sspi_authenticate(self, username, password, authdb, options, _callback);
	    } else {
	      // We have the kerberos library, execute auth process
	      mongodb_gssapi_authenticate(self, username, password, authdb, options, _callback);
	    }
	  }
	};
	
	/**
	 * Add a user to the database.
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowledgement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **customData**, (Object, default:{}) custom data associated with the user (only Mongodb 2.6 or higher)
	 *  - **roles**, (Array, default:[]) roles associated with the created user (only Mongodb 2.6 or higher)
	 *
	 * @param {String} username username.
	 * @param {String} password password.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from addUser or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.addUser = function(username, password, options, callback) {
	  // Checkout a write connection to get the server capabilities
	  var connection = this.serverConfig.checkoutWriter();
	  if(connection != null
	    && connection.serverCapabilities != null
	    && connection.serverCapabilities.hasAuthCommands) {
	      return _executeAuthCreateUserCommand(this, username, password, options, callback);
	  }
	
	  // Unpack the parameters
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};
	
	  // Get the error options
	  var errorOptions = _getWriteConcern(this, options);
	  errorOptions.w = errorOptions.w == null ? 1 : errorOptions.w;
	  // Use node md5 generator
	  var md5 = crypto.createHash('md5');
	  // Generate keys used for authentication
	  md5.update(username + ":mongo:" + password);
	  var userPassword = md5.digest('hex');
	  // Fetch a user collection
	  var collection = this.collection(DbCommand.SYSTEM_USER_COLLECTION);
	  // Check if we are inserting the first user
	  collection.count({}, function(err, count) {
	    // We got an error (f.ex not authorized)
	    if(err != null) return callback(err, null);
	    // Check if the user exists and update i
	    collection.find({user: username}, {dbName: options['dbName']}).toArray(function(err, documents) {
	      // We got an error (f.ex not authorized)
	      if(err != null) return callback(err, null);
	      // Add command keys
	      var commandOptions = errorOptions;
	      commandOptions.dbName = options['dbName'];
	      commandOptions.upsert = true;
	
	      // We have a user, let's update the password or upsert if not
	      collection.update({user: username},{$set: {user: username, pwd: userPassword}}, commandOptions, function(err, results, full) {
	        if(count == 0 && err) {
	          callback(null, [{user:username, pwd:userPassword}]);
	        } else if(err) {
	          callback(err, null)
	        } else {
	          callback(null, [{user:username, pwd:userPassword}]);
	        }
	      });
	    });
	  });
	};
	
	/**
	 * @ignore
	 */
	var _executeAuthCreateUserCommand = function(self, username, password, options, callback) {
	  // Special case where there is no password ($external users)
	  if(typeof username == 'string'
	    && password != null && typeof password == 'object') {
	    callback = options;
	    options = password;
	    password = null;
	  }
	
	  // Unpack all options
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }
	
	  // Error out if we digestPassword set
	  if(options.digestPassword != null) {
	    throw utils.toError("The digestPassword option is not supported via add_user. Please use db.command('createUser', ...) instead for this option.");
	  }
	
	  // Get additional values
	  var customData = options.customData != null ? options.customData : {};
	  var roles = Array.isArray(options.roles) ? options.roles : [];
	  var maxTimeMS = typeof options.maxTimeMS == 'number' ? options.maxTimeMS : null;
	
	  // If not roles defined print deprecated message
	  if(roles.length == 0) {
	    console.log("Creating a user without roles is deprecated in MongoDB >= 2.6");
	  }
	
	  // Get the error options
	  var writeConcern = _getWriteConcern(self, options);
	  var commandOptions = {writeCommand:true};
	  if(options['dbName']) commandOptions.dbName = options['dbName'];
	
	  // Add maxTimeMS to options if set
	  if(maxTimeMS != null) commandOptions.maxTimeMS = maxTimeMS;
	
	  // Check the db name and add roles if needed
	  if((self.databaseName.toLowerCase() == 'admin' || options.dbName == 'admin') && !Array.isArray(options.roles)) {
	    roles = ['root']
	  } else if(!Array.isArray(options.roles)) {
	    roles = ['dbOwner']
	  }
	
	  // Build the command to execute
	  var command = {
	      createUser: username
	    , customData: customData
	    , roles: roles
	    , digestPassword:false
	    , writeConcern: writeConcern
	  }
	
	  // Use node md5 generator
	  var md5 = crypto.createHash('md5');
	  // Generate keys used for authentication
	  md5.update(username + ":mongo:" + password);
	  var userPassword = md5.digest('hex');
	
	  // No password
	  if(typeof password == 'string') {
	    command.pwd = userPassword;
	  }
	
	  // Execute the command
	  self.command(command, commandOptions, function(err, result) {
	    if(err) return callback(err, null);
	    callback(!result.ok ? utils.toError("Failed to add user " + username) : null
	      , result.ok ? [{user: username, pwd: ''}] : null);
	  })
	}
	
	/**
	 * Remove a user from a database
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowledgement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *
	 * @param {String} username username.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from removeUser or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.removeUser = function(username, options, callback) {
	  // Checkout a write connection to get the server capabilities
	  var connection = this.serverConfig.checkoutWriter();
	  if(connection != null && connection.serverCapabilities != null && connection.serverCapabilities.hasAuthCommands) {
	    return _executeAuthRemoveUserCommand(this, username, options, callback);
	  }
	
	  // Unpack the parameters
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};
	
	  // Figure out the safe mode settings
	  var safe = self.safe != null && self.safe == false ? {w: 1} : self.safe;
	  // Override with options passed in if applicable
	  safe = options != null && options['safe'] != null ? options['safe'] : safe;
	  // Ensure it's at least set to safe
	  safe = safe == null ? {w: 1} : safe;
	
	  // Fetch a user collection
	  var collection = this.collection(DbCommand.SYSTEM_USER_COLLECTION);
	  collection.findOne({user: username}, {dbName: options['dbName']}, function(err, user) {
	    if(user != null) {
	      // Add command keys
	      var commandOptions = safe;
	      commandOptions.dbName = options['dbName'];
	
	      collection.remove({user: username}, commandOptions, function(err, result) {
	        callback(err, true);
	      });
	    } else {
	      callback(err, false);
	    }
	  });
	};
	
	var _executeAuthRemoveUserCommand = function(self, username, options, callback) {
	  // Unpack all options
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }
	
	  // Get the error options
	  var writeConcern = _getWriteConcern(self, options);
	  var commandOptions = {writeCommand:true};
	  if(options['dbName']) commandOptions.dbName = options['dbName'];
	
	  // Get additional values
	  var maxTimeMS = typeof options.maxTimeMS == 'number' ? options.maxTimeMS : null;
	
	  // Add maxTimeMS to options if set
	  if(maxTimeMS != null) commandOptions.maxTimeMS = maxTimeMS;
	
	  // Build the command to execute
	  var command = {
	      dropUser: username
	    , writeConcern: writeConcern
	  }
	
	  // Execute the command
	  self.command(command, commandOptions, function(err, result) {
	    if(err) return callback(err, null);
	    callback(null, result.ok ? true : false);
	  })
	}
	
	/**
	 * Creates a collection on a server pre-allocating space, need to create f.ex capped collections.
	 *
	 * Options
	*  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowledgement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **serializeFunctions** {Boolean, default:false}, serialize functions on the document.
	 *  - **raw** {Boolean, default:false}, perform all operations using raw bson objects.
	 *  - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.
	 *  - **capped** {Boolean, default:false}, create a capped collection.
	 *  - **size** {Number}, the size of the capped collection in bytes.
	 *  - **max** {Number}, the maximum number of documents in the capped collection.
	 *  - **autoIndexId** {Boolean, default:true}, create an index on the _id field of the document, True by default on MongoDB 2.2 or higher off for version < 2.2.
	 *  - **readPreference** {String}, the preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **strict**, (Boolean, default:false) throws an error if collection already exists
	 *
	 * @param {String} collectionName the collection name we wish to access.
	 * @param {Object} [options] returns option results.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from createCollection or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.createCollection = function(collectionName, options, callback) {
	  var self = this;
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }
	
	  // Figure out the safe mode settings
	  var safe = self.safe != null && self.safe == false ? {w: 1} : self.safe;
	  // Override with options passed in if applicable
	  safe = options != null && options['safe'] != null ? options['safe'] : safe;
	  // Ensure it's at least set to safe
	  safe = safe == null ? {w: 1} : safe;
	  // Check if we have the name
	  this.listCollections({name:collectionName}).toArray(function(err, collections) {
	    if(err != null) return callback(err, null);
	    if(collections.length > 0 && options.strict) {
	      return callback(utils.toError(f("Collection %s already exists. Currently in strict mode.", collectionName)), null);
	    } else if (collections.length > 0) {
	      try { return callback(null, new Collection(self, collectionName, self.pkFactory, options)); }
	      catch(err) { return callback(err); }
	    }
	
	    // logout command
	    var cmd = {'create':collectionName};
	
	    for(var name in options) {
	      if(options[name] != null && typeof options[name] != 'function') cmd[name] = options[name];
	    }
	
	    // Execute the command
	    self.command(cmd, options, function(err, result) {
	      // Handle errors of pre-existing collections
	      if(err && options && options.strict) {
	        return callback(err, null);
	      }
	      // Attempt to return a collection
	      try {
	        callback(null, new Collection(self, collectionName, self.pkFactory, options));
	      } catch(err) {
	        callback(utils.toError(err), null);
	      }
	    });
	  });
	};
	
	var _getReadConcern = function(self, options) {
	  if(options.readPreference) return options.readPreference;
	  if(self.readPreference) return self.readPreference;
	  return 'primary';
	}
	
	/**
	 * Execute a command hash against MongoDB. This lets you acess any commands not available through the api on the server.
	 *
	 * Options
	 *  - **readPreference** {String}, the preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **maxTimeMS** {Number}, number of milliseconds to wait before aborting the query.
	 *  - **ignoreCommandFilter** {Boolean}, overrides the default redirection of certain commands to primary.
	 *  - **writeCommand** {Boolean, default: false}, signals this is a write command and to ignore read preferences
	 *  - **checkKeys** {Boolean, default: false}, overrides the default not to check the key names for the command
	 *
	 * @param {Object} selector the command hash to send to the server, ex: {ping:1}.
	 * @param {Object} [options] additional options for the command.
	 * @param {Function} callback this will be called after executing this method. The command always return the whole result of the command as the second parameter.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.command = function(selector, options, callback) {
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }
	
	  // Make a shallow copy so no modifications happen on the original
	  options = utils.shallowObjectCopy(options);
	
	  // Ignore command preference (I know what I'm doing)
	  var ignoreCommandFilter = options.ignoreCommandFilter ? options.ignoreCommandFilter : false;
	
	  // Get read preference if we set one
	  var readPreference = _getReadConcern(this, options);
	
	  // Ensure only commands who support read Prefrences are exeuted otherwise override and use Primary
	  if(readPreference != false && ignoreCommandFilter == false) {
	    if(selector['group'] || selector['aggregate'] || selector['collStats'] || selector['dbStats']
	      || selector['count'] || selector['distinct'] || selector['geoNear'] || selector['geoSearch']
	      || selector['geoWalk'] || selector['text'] || selector['cursorInfo']
	      || selector['parallelCollectionScan']
	      || (selector['mapreduce'] && (selector.out == 'inline' || selector.out.inline))) {
	      // Set the read preference
	      options.readPreference = readPreference;
	    } else {
	      options.readPreference = ReadPreference.PRIMARY;
	    }
	  } else if(readPreference != false) {
	    options.readPreference = readPreference;
	  }
	
	  // Add the maxTimeMS option to the command if specified
	  if(typeof options.maxTimeMS == 'number') {
	    selector.maxTimeMS = options.maxTimeMS
	  }
	
	  // Command options
	  var command_options = {};
	
	  // Do we have an override for checkKeys
	  if(typeof options['checkKeys'] == 'boolean') command_options['checkKeys'] = options['checkKeys'];
	  command_options['checkKeys'] = typeof options['checkKeys'] == 'boolean' ? options['checkKeys'] : false;
	  if(typeof options['serializeFunctions'] == 'boolean') command_options['serializeFunctions'] = options['serializeFunctions'];
	  if(options['dbName']) command_options['dbName'] = options['dbName'];
	
	  // If we have a write command, remove readPreference as an option
	  if((options.writeCommand
	    || selector['findAndModify']
	    || selector['insert'] || selector['update'] || selector['delete']
	    || selector['createUser'] || selector['updateUser'] || selector['removeUser'])
	    && options.readPreference) {
	    delete options['readPreference'];
	  }
	
	  // Add a write concern if we have passed in any
	  if(options.w || options.wtimeout || options.j || options.fsync || options.safe) {
	    selector.writeConcern = {};
	    if(options.safe) selector.writeConcern.w = 1;
	    if(options.w) selector.writeConcern.w = options.w;
	    if(options.wtimeout) selector.writeConcern.wtimeout = options.wtimeout;
	    if(options.j) selector.writeConcern.j = options.j;
	    if(options.fsync) selector.writeConcern.fsync = options.fsync;
	  }
	
	  // If we have an actual writeConcern object override
	  if(options.writeConcern) {
	    selector.writeConcern = writeConcern;
	  }
	
	  // Check if we need to set slaveOk
	  if(command_options.readPreference != 'primary')
	    command_options.slaveOk = true;
	
	  // Execution db
	  var execDb = typeof options.auth == 'string' ? this.db(options.auth) : this;
	  execDb = typeof options.authdb == 'string' ? this.db(options.authdb) : execDb;
	
	  // Execute a query command
	  this._executeQueryCommand(DbCommand.createDbSlaveOkCommand(execDb, selector, command_options), options, function(err, results, connection) {
	    if(options.returnConnection) {
	      if(err) return callback(err, null, connection);
	      if(results == null || results.documents == null) return callback(new Error("command failed to return result"));
	      if(results.documents[0].errmsg)
	        return callback(utils.toError(results.documents[0]), null, connection);
	      callback(null, results.documents[0], connection);
	    } else {
	      if(err) return callback(err, null);
	      if(results == null || results.documents == null) return callback(new Error("command failed to return result"));
	      if(results.documents[0].errmsg)
	        return callback(utils.toError(results.documents[0]), null);
	      callback(null, results.documents[0]);
	    }
	  });
	};
	
	/**
	 * Drop a collection from the database, removing it permanently. New accesses will create a new collection.
	 *
	 * @param {String} collectionName the name of the collection we wish to drop.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from dropCollection or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.dropCollection = function(collectionName, callback) {
	  var self = this;
	  callback || (callback = function(){});
	
	  // Command to execute
	  var cmd = {'drop':collectionName}
	
	  // Execute the command
	  this.command(cmd, {}, function(err, result) {
	    if(err) return callback(err, null);
	    if(result.ok) return callback(null, true);
	    callback(null, false);
	  });
	};
	
	/**
	 * Rename a collection.
	 *
	 * Options
	 *  - **dropTarget** {Boolean, default:false}, drop the target name collection if it previously exists.
	 *
	 * @param {String} fromCollection the name of the current collection we wish to rename.
	 * @param {String} toCollection the new name of the collection.
	 * @param {Object} [options] returns option results.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from renameCollection or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.renameCollection = function(fromCollection, toCollection, options, callback) {
	  var self = this;
	
	  if(typeof options == 'function') {
	    callback = options;
	    options = {}
	  }
	
	  // Add return new collection
	  options.new_collection = true;
	
	  // Execute using the collection method
	  this.collection(fromCollection).rename(toCollection, options, callback);
	};
	
	/**
	 * Runs a command on the database.
	 * @ignore
	 * @api private
	 */
	Db.prototype.executeDbCommand = function(command_hash, options, callback) {
	  if(callback == null) { callback = options; options = {}; }
	  this._executeQueryCommand(DbCommand.createDbSlaveOkCommand(this, command_hash, options), options, function(err, result) {
	    if(callback) callback(err, result);
	  });
	};
	
	/**
	 * Runs a command on the database as admin.
	 * @ignore
	 * @api private
	 */
	Db.prototype.executeDbAdminCommand = function(command_hash, options, callback) {
	  if(typeof options == 'function') {
	    callback = options;
	    options = {}
	  }
	
	  if(options.readPreference) {
	    options.readPreference = options.readPreference;
	  }
	
	  this._executeQueryCommand(DbCommand.createAdminDbCommand(this, command_hash), options, function(err, result) {
	    if(callback) callback(err, result);
	  });
	};
	
	/**
	 * Creates an index on the collection.
	 *
	 * Options
	*  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowledgement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **unique** {Boolean, default:false}, creates an unique index.
	 *  - **sparse** {Boolean, default:false}, creates a sparse index.
	 *  - **background** {Boolean, default:false}, creates the index in the background, yielding whenever possible.
	 *  - **min** {Number}, for geospatial indexes set the lower bound for the co-ordinates.
	 *  - **max** {Number}, for geospatial indexes set the high bound for the co-ordinates.
	 *  - **v** {Number}, specify the format version of the indexes.
	 *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
	 *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
	 *
	 * @param {String} collectionName name of the collection to create the index on.
	 * @param {Object} fieldOrSpec fieldOrSpec that defines the index.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from createIndex or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.createIndex = function(collectionName, fieldOrSpec, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};
	  options = typeof callback === 'function' ? options : callback;
	  options = options == null ? {} : options;
	
	  // Get the error options
	  var writeConcern = _getWriteConcern(self, options);
	  // Ensure we have a callback
	  if(_hasWriteConcern(writeConcern) && typeof callback != 'function') {
	    throw new Error("Cannot use a writeConcern without a provided callback");
	  }
	
	  // Attempt to run using createIndexes command
	  createIndexUsingCreateIndexes(self, collectionName, fieldOrSpec, options, function(err, result) {
	    if(err == null) {
	      return callback(err, result);
	    }
	
	    // Create command
	    var command = createCreateIndexCommand(self, collectionName, fieldOrSpec, options);
	    // Default command options
	    var commandOptions = {};
	
	    // If we have error conditions set handle them
	    if(_hasWriteConcern(writeConcern) && typeof callback == 'function') {
	      // Set safe option
	      commandOptions['safe'] = writeConcern;
	      // If we have an error option
	      if(typeof writeConcern == 'object') {
	        var keys = Object.keys(writeConcern);
	        for(var i = 0; i < keys.length; i++) {
	          commandOptions[keys[i]] = writeConcern[keys[i]];
	        }
	      }
	
	      // Execute insert command
	      self._executeInsertCommand(command, commandOptions, function(err, result) {
	        if(err != null) return callback(err, null);
	        if(result == null || result.documents == null) return callback(new Error("command failed to return result"));
	
	        result = result && result.documents;
	        if (result[0].err) {
	          callback(utils.toError(result[0]));
	        } else {
	          callback(null, command.documents[0].name);
	        }
	      });
	    } else {
	      // Execute insert command
	      var result = self._executeInsertCommand(command, commandOptions, function() {});
	      // If no callback just return
	      if(!callback) return;
	      // If error return error
	      if(result instanceof Error) {
	        return callback(result);
	      }
	      // Otherwise just return
	      return callback(null, null);
	    }
	  });
	};
	
	var createCreateIndexCommand = function(db, collectionName, fieldOrSpec, options) {
	  var indexParameters = utils.parseIndexOptions(fieldOrSpec);
	  var fieldHash = indexParameters.fieldHash;
	  var keys = indexParameters.keys;
	
	  // Generate the index name
	  var indexName = typeof options.name == 'string'
	    ? options.name
	    : indexParameters.name;
	
	  var selector = {
	    'ns': db.databaseName + "." + collectionName,
	    'key': fieldHash,
	    'name': indexName
	  }
	
	  // Ensure we have a correct finalUnique
	  var finalUnique = options == null || 'object' === typeof options
	    ? false
	    : options;
	
	  // Set up options
	  options = options == null || typeof options == 'boolean'
	    ? {}
	    : options;
	
	  // Add all the options
	  var keysToOmit = Object.keys(selector);
	  for(var optionName in options) {
	    if(keysToOmit.indexOf(optionName) == -1) {
	      selector[optionName] = options[optionName];
	    }
	  }
	
	  if(selector['unique'] == null)
	    selector['unique'] = finalUnique;
	
	  var name = db.databaseName + "." + DbCommand.SYSTEM_INDEX_COLLECTION;
	  var cmd = new InsertCommand(db, name, false);
	  return cmd.add(selector);
	}
	
	var createIndexUsingCreateIndexes = function(self, collectionName, fieldOrSpec, options, callback) {
	  // Build the index
	  var indexParameters = utils.parseIndexOptions(fieldOrSpec);
	  // Generate the index name
	  var indexName = typeof options.name == 'string'
	    ? options.name
	    : indexParameters.name;
	
	  // Set up the index
	  var indexes = [{
	      name: indexName
	    , key: indexParameters.fieldHash
	  }];
	
	  // merge all the options
	  var keysToOmit = Object.keys(indexes[0]);
	  for(var optionName in options) {
	    if(keysToOmit.indexOf(optionName) == -1) {
	      indexes[0][optionName] = options[optionName];
	    }
	  }
	
	  // Create command
	  var command = {createIndexes: collectionName, indexes: indexes};
	  // Build the command
	  self.command(command, options, function(err, result) {
	    if(err) return callback(err, null);
	    if(result.ok == 0) {
	      return callback(utils.toError(result), null);
	    }
	
	    // Return the indexName for backward compatibility
	    callback(null, indexName);
	  });
	}
	
	/**
	 * Ensures that an index exists, if it does not it creates it
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowledgement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **unique** {Boolean, default:false}, creates an unique index.
	 *  - **sparse** {Boolean, default:false}, creates a sparse index.
	 *  - **background** {Boolean, default:false}, creates the index in the background, yielding whenever possible.
	 *  - **min** {Number}, for geospatial indexes set the lower bound for the co-ordinates.
	 *  - **max** {Number}, for geospatial indexes set the high bound for the co-ordinates.
	 *  - **v** {Number}, specify the format version of the indexes.
	 *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
	 *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
	 *
	 * @param {String} collectionName name of the collection to create the index on.
	 * @param {Object} fieldOrSpec fieldOrSpec that defines the index.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from ensureIndex or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.ensureIndex = function(collectionName, fieldOrSpec, options, callback) {
	  var self = this;
	
	  if(typeof callback === 'undefined' && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	
	  // Ensure non empty options
	  options = options || {};
	
	  // Get the error options
	  var writeConcern = _getWriteConcern(this, options);
	  // Make sure we don't try to do a write concern without a callback
	  if(_hasWriteConcern(writeConcern) && callback == null)
	    throw new Error("Cannot use a writeConcern without a provided callback");
	
	  // Create command
	  var command = createCreateIndexCommand(this, collectionName, fieldOrSpec, options);
	  var index_name = command.documents[0].name;
	
	  // Check if the index allready exists
	  this.indexInformation(collectionName, writeConcern, function(err, indexInformation) {
	    if(err != null && err.code != 26) return callback(err, null);
	    // If the index does not exist, create it
	    if(indexInformation == null || !indexInformation[index_name])  {
	      self.createIndex(collectionName, fieldOrSpec, options, callback);
	    } else {
	      if(typeof callback === 'function') return callback(null, index_name);
	    }
	  });
	};
	
	/**
	 * Returns the information available on allocated cursors.
	 *
	 * Options
	 *  - **readPreference** {String}, the preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from cursorInfo or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.cursorInfo = function(options, callback) {
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};
	
	  // cursorInfo command
	  var cmd = {'cursorInfo':1};
	
	  // Execute the command
	  this.command(cmd, options, function(err, result) {
	    if(err) return callback(err, null);
	    callback(null, result);
	  });
	};
	
	/**
	 * Drop an index on a collection.
	 *
	 * @param {String} collectionName the name of the collection where the command will drop an index.
	 * @param {String} indexName name of the index to drop.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from dropIndex or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.dropIndex = function(collectionName, indexName, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  options = args.length ? args.shift() || {} : {};
	
	  // Delete index command
	  var cmd = {'deleteIndexes':collectionName, 'index':indexName};
	
	  // Execute command
	  this.command(cmd, options, function(err, result) {
	    if(callback == null) return;
	    if(err) return callback(err, null);
	    callback(null, result);
	  });
	};
	
	/**
	 * Reindex all indexes on the collection
	 * Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.
	 *
	 * @param {String} collectionName the name of the collection.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from reIndex or null if an error occurred.
	 * @api public
	**/
	Db.prototype.reIndex = function(collectionName, options, callback) {
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }
	
	  // Reindex
	  var cmd = {'reIndex':collectionName};
	
	  // Execute the command
	  this.command(cmd, options, function(err, result) {
	    if(callback == null) return;
	    if(err) return callback(err, null);
	    callback(null, result.ok ? true : false);
	  });
	};
	
	/**
	 * Retrieves this collections index info.
	 *
	 * Options
	 *  - **full** {Boolean, default:false}, returns the full raw index information.
	 *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).
	 *
	 * @param {String} collectionName the name of the collection.
	 * @param {Object} [options] additional options during update.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from indexInformation or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.indexInformation = function(name, options, callback) {
	  if(typeof callback === 'undefined') {
	    if(typeof options === 'undefined') {
	      callback = name;
	      name = null;
	    } else {
	      callback = options;
	    }
	    options = {};
	  }
	
	  // If we specified full information
	  var full = options['full'] == null ? false : options['full'];
	  var self = this;
	
	  // Process all the results from the index command and collection
	  var processResults = function(indexes) {
	    // Contains all the information
	    var info = {};
	    // Process all the indexes
	    for(var i = 0; i < indexes.length; i++) {
	      var index = indexes[i];
	      // Let's unpack the object
	      info[index.name] = [];
	      for(var name in index.key) {
	        info[index.name].push([name, index.key[name]]);
	      }
	    }
	
	    return info;
	  }
	
	  // Get the list of indexes of the specified collection
	  this.collection(name).listIndexes().toArray(function(err, indexes) {
	    if(err) return callback(utils.toError(err));
	    if(full) return callback(null, indexes);
	    callback(null, processResults(indexes));
	  });
	};
	
	/**
	 * Drop a database.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from dropDatabase or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.dropDatabase = function(options, callback) {
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }
	
	  // Reindex
	  var cmd = {'dropDatabase':1};
	
	  // Execute the command
	  this.command(cmd, options, function(err, result) {
	    if(callback == null) return;
	    if(err) return callback(err, null);
	    callback(null, result.ok ? true : false);
	  });
	}
	
	/**
	 * Get all the db statistics.
	 *
	 * Options
	 *  - **scale** {Number}, divide the returned sizes by scale value.
	 *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).
	 *
	 * @param {Objects} [options] options for the stats command
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the results from stats or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.prototype.stats = function stats(options, callback) {
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  // Fetch all commands
	  options = args.length ? args.shift() || {} : {};
	
	  // Build command object
	  var commandObject = {
	    dbStats:true
	  };
	
	  // Check if we have the scale value
	  if(options['scale'] != null) commandObject['scale'] = options['scale'];
	
	  // Execute the command
	  this.command(commandObject, options, callback);
	}
	
	/**
	 * @ignore
	 */
	var bindToCurrentDomain = function(callback) {
	  var domain = process.domain;
	  if(domain == null || callback == null) {
	    return callback;
	  } else {
	    return domain.bind(callback);
	  }
	}
	
	/**
	 * @ignore
	 */
	var __executeQueryCommand = function(self, db_command, options, callback) {
	  // Options unpacking
	  var readPreference = options.readPreference != null ? options.readPreference : 'primary';
	  var onAll = options['onAll'] != null ? options['onAll'] : false;
	  var specifiedConnection = options['connection'] != null ? options['connection'] : null;
	  var raw = typeof options.raw == 'boolean' ? options.raw : false;
	
	  // Correct readPreference preference to default primary if set to false, null or primary
	  if(!(typeof readPreference == 'object') && readPreference._type == 'ReadPreference') {
	    readPreference = (readPreference == null || readPreference == 'primary' || readPreference == false) ? ReadPreference.PRIMARY : readPreference;
	    if(!ReadPreference.isValid(readPreference)) return callback(new Error("Illegal readPreference mode specified, " + JSON.stringify(readPreference)));
	  } else if(typeof readPreference == 'object' && readPreference._type == 'ReadPreference') {
	    if(!readPreference.isValid()) return callback(new Error("Illegal readPreference mode specified, " + JSON.stringify(readPreference)));
	  }
	
	  // If we have a read preference set and we are a mongos pass the read preference on to the mongos instance,
	  if(self.serverConfig.isMongos() && readPreference != null && readPreference != 'primary') {
	    db_command.setMongosReadPreference(readPreference);
	  }
	
	  // If we got a callback object
	  if(typeof callback === 'function' && !onAll) {
	    callback = bindToCurrentDomain(callback);
	    // Override connection if we passed in a specific connection
	    var connection = specifiedConnection != null ? specifiedConnection : null;
	
	    if(connection instanceof Error) return callback(connection, null);
	
	    // Fetch either a reader or writer dependent on the specified readPreference option if no connection
	    // was passed in
	    if(connection == null) {
	      connection = self.serverConfig.checkoutReader(readPreference);
	    }
	
	    if(connection == null) {
	      return callback(new Error("no open connections"));
	    } else if(connection instanceof Error || connection['message'] != null) {
	      return callback(connection);
	    }
	
	    // Exhaust Option
	    var exhaust = options.exhaust || false;
	
	    // Register the handler in the data structure
	    self.serverConfig._registerHandler(db_command, raw, connection, exhaust, callback);
	
	    // Write the message out and handle any errors if there are any
	    connection.write(db_command, function(err) {
	      if(err != null) {
	        // Call the handler with an error
	        if(Array.isArray(db_command))
	          self.serverConfig._callHandler(db_command[0].getRequestId(), null, err);
	        else
	          self.serverConfig._callHandler(db_command.getRequestId(), null, err);
	      }
	    });
	  } else if(typeof callback === 'function' && onAll) {
	    callback = bindToCurrentDomain(callback);
	    var connections = self.serverConfig.allRawConnections();
	    var numberOfEntries = connections.length;
	    // Go through all the connections
	    for(var i = 0; i < connections.length; i++) {
	      // Fetch a connection
	      var connection = connections[i];
	
	      // Ensure we have a valid connection
	      if(connection == null) {
	        return callback(new Error("no open connections"));
	      } else if(connection instanceof Error) {
	        return callback(connection);
	      }
	
	      // Register the handler in the data structure
	      self.serverConfig._registerHandler(db_command, raw, connection, callback);
	
	      // Write the message out
	      connection.write(db_command, function(err) {
	        // Adjust the number of entries we need to process
	        numberOfEntries = numberOfEntries - 1;
	        // Remove listener
	        if(err != null) {
	          // Clean up listener and return error
	          self.serverConfig._removeHandler(db_command.getRequestId());
	        }
	
	        // No more entries to process callback with the error
	        if(numberOfEntries <= 0) {
	          callback(err);
	        }
	      });
	
	      // Update the db_command request id
	      db_command.updateRequestId();
	    }
	  } else {
	    // Fetch either a reader or writer dependent on the specified read option
	    var connection = self.serverConfig.checkoutReader(readPreference);
	    // Override connection if needed
	    connection = specifiedConnection != null ? specifiedConnection : connection;
	    // Ensure we have a valid connection
	    if(connection == null || connection instanceof Error || connection['message'] != null) return null;
	    // Write the message out
	    connection.write(db_command, function(err) {
	      if(err != null) {
	        // Emit the error
	        self.emit("error", err);
	      }
	    });
	  }
	};
	
	/**
	 * Execute db query command (not safe)
	 * @ignore
	 * @api private
	 */
	Db.prototype._executeQueryCommand = function(db_command, options, callback) {
	  var self = this;
	
	  // Unpack the parameters
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  callback = bindToCurrentDomain(callback);
	
	  // fast fail option used for HA, no retry
	  var failFast = options['failFast'] != null
	    ? options['failFast']
	    : false;
	
	  // Check if the user force closed the command
	  if(this._applicationClosed) {
	    var err = new Error("db closed by application");
	    if('function' == typeof callback) {
	      return callback(err, null);
	    } else {
	      throw err;
	    }
	  }
	
	  if(this.serverConfig.isDestroyed())
	    return callback(new Error("Connection was destroyed by application"));
	
	  // Specific connection
	  var connection = options.connection;
	  // Check if the connection is actually live
	  if(connection
	    && (!connection.isConnected || !connection.isConnected())) connection = null;
	
	  // Get the configuration
	  var config = this.serverConfig;
	  var readPreference = options.readPreference;
	  // Allow for the usage of the readPreference model
	  if(readPreference == null) {
	    readPreference = options.readPreference;
	  }
	
	  if(!connection && !config.canRead(readPreference) && !config.canWrite() && config.isAutoReconnect()) {
	
	    if(readPreference == ReadPreference.PRIMARY
	      || readPreference == ReadPreference.PRIMARY_PREFERRED
	      || (readPreference != null && typeof readPreference == 'object' && readPreference.mode)
	      || readPreference == null) {
	
	      // Save the command
	      self.serverConfig._commandsStore.read_from_writer(
	        {   type: 'query'
	          , db_command: db_command
	          , options: options
	          , callback: callback
	          , db: self
	          , executeQueryCommand: __executeQueryCommand
	          , executeInsertCommand: __executeInsertCommand
	        }
	      );
	    } else {
	      self.serverConfig._commandsStore.read(
	        {   type: 'query'
	          , db_command: db_command
	          , options: options
	          , callback: callback
	          , db: self
	          , executeQueryCommand: __executeQueryCommand
	          , executeInsertCommand: __executeInsertCommand
	        }
	      );
	    }
	
	    // If we have blown through the number of items let's
	    if(!self.serverConfig._commandsStore.validateBufferLimit(self.bufferMaxEntries)) {
	      self.close();
	    }
	  } else if(!connection && !config.canRead(readPreference) && !config.canWrite() && !config.isAutoReconnect()) {
	    return callback(new Error("no open connections"), null);
	  } else {
	    if(typeof callback == 'function') {
	      __executeQueryCommand(self, db_command, options, function (err, result, conn) {
	        callback(err, result, conn);
	      });
	    } else {
	      __executeQueryCommand(self, db_command, options);
	    }
	  }
	};
	
	/**
	 * @ignore
	 */
	var __executeInsertCommand = function(self, db_command, options, callback) {
	  // Always checkout a writer for this kind of operations
	  var connection = self.serverConfig.checkoutWriter();
	  // Get safe mode
	  var safe = options['safe'] != null ? options['safe'] : false;
	  var specifiedConnection = options['connection'] != null ? options['connection'] : null;
	  // Override connection if needed
	  connection = specifiedConnection != null ? specifiedConnection : connection;
	  // Validate if we can use this server 2.6 wire protocol
	  if(connection && connection.isCompatible && !connection.isCompatible()) {
	    return callback(utils.toError("driver is incompatible with this server version"), null);
	  }
	
	  // Ensure we have a valid connection
	  if(typeof callback === 'function') {
	    callback = bindToCurrentDomain(callback);
	    // Ensure we have a valid connection
	    if(connection == null) {
	      return callback(new Error("no open connections"));
	    } else if(connection instanceof Error) {
	      return callback(connection);
	    }
	
	    var errorOptions = _getWriteConcern(self, options);
	    if(errorOptions.w > 0 || errorOptions.w == 'majority' || errorOptions.j || errorOptions.journal || errorOptions.fsync) {
	      // db command is now an array of commands (original command + lastError)
	      db_command = [db_command, DbCommand.createGetLastErrorCommand(errorOptions, self)];
	      // Register the handler in the data structure
	      self.serverConfig._registerHandler(db_command[1], false, connection, callback);
	    }
	  }
	
	  // If we have no callback and there is no connection
	  if(connection == null) return null;
	  if(connection instanceof Error && typeof callback == 'function') return callback(connection, null);
	  if(connection instanceof Error) return null;
	  if(connection == null && typeof callback == 'function') return callback(new Error("no primary server found"), null);
	
	  // Write the message out
	  connection.write(db_command, function(err) {
	    // Return the callback if it's not a safe operation and the callback is defined
	    if(typeof callback === 'function' && (safe == null || safe == false)) {
	      // Perform the callback
	      callback(err, null);
	    } else if(typeof callback === 'function') {
	      // Call the handler with an error
	      self.serverConfig._callHandler(db_command[1].getRequestId(), null, err);
	    } else if(typeof callback == 'function' && safe && safe.w == -1) {
	      // Call the handler with no error
	      self.serverConfig._callHandler(db_command[1].getRequestId(), null, null);
	    } else if(!safe || safe.w == -1) {
	      self.emit("error", err);
	    }
	  });
	};
	
	/**
	 * Execute an insert Command
	 * @ignore
	 * @api private
	 */
	Db.prototype._executeInsertCommand = function(db_command, options, callback) {
	  var self = this;
	
	  // Unpack the parameters
	  if(callback == null && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  callback = bindToCurrentDomain(callback);
	  // Ensure options are not null
	  options = options == null ? {} : options;
	
	  // Check if the user force closed the command
	  if(this._applicationClosed) {
	    if(typeof callback == 'function') {
	      return callback(new Error("db closed by application"), null);
	    } else {
	      throw new Error("db closed by application");
	    }
	  }
	
	  if(this.serverConfig.isDestroyed()) return callback(new Error("Connection was destroyed by application"));
	
	  // Specific connection
	  var connection = options.connection;
	  // Check if the connection is actually live
	  if(connection
	    && (!connection.isConnected || !connection.isConnected())) connection = null;
	
	  // Get config
	  var config = self.serverConfig;
	  // Check if we are connected
	  if(!connection && !config.canWrite() && config.isAutoReconnect()) {
	    self.serverConfig._commandsStore.write(
	      {   type:'insert'
	        , 'db_command':db_command
	        , 'options':options
	        , 'callback':callback
	        , db: self
	        , executeQueryCommand: __executeQueryCommand
	        , executeInsertCommand: __executeInsertCommand
	      }
	    );
	
	    // If we have blown through the number of items let's
	    if(!self.serverConfig._commandsStore.validateBufferLimit(self.bufferMaxEntries)) {
	      self.close();
	    }
	  } else if(!connection && !config.canWrite() && !config.isAutoReconnect()) {
	    return callback(new Error("no open connections"), null);
	  } else {
	    __executeInsertCommand(self, db_command, options, callback);
	  }
	};
	
	/**
	 * Update command is the same
	 * @ignore
	 * @api private
	 */
	Db.prototype._executeUpdateCommand = Db.prototype._executeInsertCommand;
	/**
	 * Remove command is the same
	 * @ignore
	 * @api private
	 */
	Db.prototype._executeRemoveCommand = Db.prototype._executeInsertCommand;
	
	/**
	 * Wrap a Mongo error document into an Error instance.
	 * Deprecated. Use utils.toError instead.
	 *
	 * @ignore
	 * @api private
	 * @deprecated
	 */
	Db.prototype.wrap = utils.toError;
	
	/**
	 * Default URL
	 *
	 * @classconstant DEFAULT_URL
	 **/
	Db.DEFAULT_URL = 'mongodb://localhost:27017/default';
	
	/**
	 * Connect to MongoDB using a url as documented at
	 *
	 *  docs.mongodb.org/manual/reference/connection-string/
	 *
	 * Options
	 *  - **uri_decode_auth** {Boolean, default:false} uri decode the user name and password for authentication
	 *  - **db** {Object, default: null} a hash off options to set on the db object, see **Db constructor**
	 *  - **server** {Object, default: null} a hash off options to set on the server objects, see **Server** constructor**
	 *  - **replSet** {Object, default: null} a hash off options to set on the replSet object, see **ReplSet** constructor**
	 *  - **mongos** {Object, default: null} a hash off options to set on the mongos object, see **Mongos** constructor**
	 *
	 * @param {String} url connection url for MongoDB.
	 * @param {Object} [options] optional options for insert command
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occurred, or null otherwise. While the second parameter will contain the db instance or null if an error occurred.
	 * @return {null}
	 * @api public
	 */
	Db.connect = function(url, options, callback) {
	  // Ensure correct mapping of the callback
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }
	
	  // Ensure same behavior as previous version w:0
	  if(url.indexOf("safe") == -1
	    && url.indexOf("w") == -1
	    && url.indexOf("journal") == -1 && url.indexOf("j") == -1
	    && url.indexOf("fsync") == -1) options.w = 1;
	
	  // Avoid circular require problem
	  var MongoClient = __webpack_require__(204).MongoClient;
	  // Attempt to connect
	  MongoClient.connect.call(MongoClient, url, options, callback);
	};
	
	/**
	 * State of the db connection
	 * @ignore
	 */
	Object.defineProperty(Db.prototype, "state", { enumerable: true
	  , get: function () {
	      return this.serverConfig._serverState;
	    }
	});
	
	/**
	 * @ignore
	 */
	var _hasWriteConcern = function(errorOptions) {
	  return errorOptions == true
	    || errorOptions.w > 0
	    || errorOptions.w == 'majority'
	    || errorOptions.j == true
	    || errorOptions.journal == true
	    || errorOptions.fsync == true
	};
	
	/**
	 * @ignore
	 */
	var _setWriteConcernHash = function(options) {
	  var finalOptions = {};
	  if(options.w != null) finalOptions.w = options.w;
	  if(options.journal == true) finalOptions.j = options.journal;
	  if(options.j == true) finalOptions.j = options.j;
	  if(options.fsync == true) finalOptions.fsync = options.fsync;
	  if(options.wtimeout != null) finalOptions.wtimeout = options.wtimeout;
	  return finalOptions;
	};
	
	/**
	 * @ignore
	 */
	var _getWriteConcern = function(self, options) {
	  // Final options
	  var finalOptions = {w:1};
	  // Local options verification
	  if(options.w != null || typeof options.j == 'boolean' || typeof options.journal == 'boolean' || typeof options.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(options);
	  } else if(options.safe != null && typeof options.safe == 'object') {
	    finalOptions = _setWriteConcernHash(options.safe);
	  } else if(typeof options.safe == "boolean") {
	    finalOptions = {w: (options.safe ? 1 : 0)};
	  } else if(self.options.w != null || typeof self.options.j == 'boolean' || typeof self.options.journal == 'boolean' || typeof self.options.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(self.options);
	  } else if(self.safe.w != null || typeof self.safe.j == 'boolean' || typeof self.safe.journal == 'boolean' || typeof self.safe.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(self.safe);
	  } else if(typeof self.safe == "boolean") {
	    finalOptions = {w: (self.safe ? 1 : 0)};
	  }
	
	  // Ensure we don't have an invalid combination of write concerns
	  if(finalOptions.w < 1
	    && (finalOptions.journal == true || finalOptions.j == true || finalOptions.fsync == true)) throw new Error("No acknowledgement using w < 1 cannot be combined with journal:true or fsync:true");
	
	  // Return the options
	  return finalOptions;
	}
	
	/**
	 * Legacy support
	 *
	 * @ignore
	 * @api private
	 */
	exports.connect = Db.connect;
	exports.Db = Db;
	
	/**
	 * Remove all listeners to the db instance.
	 * @ignore
	 * @api private
	 */
	Db.prototype.removeAllEventListeners = function() {
	  this.removeAllListeners("close");
	  this.removeAllListeners("error");
	  this.removeAllListeners("timeout");
	  this.removeAllListeners("parseError");
	  this.removeAllListeners("poolReady");
	  this.removeAllListeners("message");
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Binary = __webpack_require__(150).Binary,
	  ObjectID = __webpack_require__(150).ObjectID;
	
	/**
	 * Class for representing a single chunk in GridFS.
	 *
	 * @class
	 *
	 * @param file {GridStore} The {@link GridStore} object holding this chunk.
	 * @param mongoObject {object} The mongo object representation of this chunk.
	 *
	 * @throws Error when the type of data field for {@link mongoObject} is not
	 *     supported. Currently supported types for data field are instances of
	 *     {@link String}, {@link Array}, {@link Binary} and {@link Binary}
	 *     from the bson module
	 *
	 * @see Chunk#buildMongoObject
	 */
	var Chunk = exports.Chunk = function(file, mongoObject, writeConcern) {
	  if(!(this instanceof Chunk)) return new Chunk(file, mongoObject);
	
	  this.file = file;
	  var self = this;
	  var mongoObjectFinal = mongoObject == null ? {} : mongoObject;
	  this.writeConcern = writeConcern || {w:1};
	  this.objectId = mongoObjectFinal._id == null ? new ObjectID() : mongoObjectFinal._id;
	  this.chunkNumber = mongoObjectFinal.n == null ? 0 : mongoObjectFinal.n;
	  this.data = new Binary();
	
	  if(mongoObjectFinal.data == null) {
	  } else if(typeof mongoObjectFinal.data == "string") {
	    var buffer = new Buffer(mongoObjectFinal.data.length);
	    buffer.write(mongoObjectFinal.data, 'binary', 0);
	    this.data = new Binary(buffer);
	  } else if(Array.isArray(mongoObjectFinal.data)) {
	    var buffer = new Buffer(mongoObjectFinal.data.length);
	    buffer.write(mongoObjectFinal.data.join(''), 'binary', 0);
	    this.data = new Binary(buffer);
	  } else if(mongoObjectFinal.data instanceof Binary || mongoObjectFinal.data._bsontype === 'Binary' || Object.prototype.toString.call(mongoObjectFinal.data) == "[object Binary]") {
	    this.data = mongoObjectFinal.data;
	  } else if(Buffer.isBuffer(mongoObjectFinal.data)) {
	  } else {
	    throw Error("Illegal chunk format");
	  }
	  
	  // Update position
	  this.internalPosition = 0;
	};
	
	/**
	 * Writes a data to this object and advance the read/write head.
	 *
	 * @param data {string} the data to write 
	 * @param callback {function(*, GridStore)} This will be called after executing
	 *     this method. The first parameter will contain null and the second one
	 *     will contain a reference to this object.
	 */
	Chunk.prototype.write = function(data, callback) {
	  this.data.write(data, this.internalPosition);
	  this.internalPosition = this.data.length();
	  if(callback != null) return callback(null, this);
	  return this;
	};
	
	/**
	 * Reads data and advances the read/write head.
	 *
	 * @param length {number} The length of data to read.
	 *
	 * @return {string} The data read if the given length will not exceed the end of
	 *     the chunk. Returns an empty String otherwise.
	 */
	Chunk.prototype.read = function(length) {
	  // Default to full read if no index defined
	  length = length == null || length == 0 ? this.length() : length;
	
	  if(this.length() - this.internalPosition + 1 >= length) {
	    var data = this.data.read(this.internalPosition, length);
	    this.internalPosition = this.internalPosition + length;
	    return data;
	  } else {
	    return '';
	  }
	};
	
	Chunk.prototype.readSlice = function(length) {
	  if ((this.length() - this.internalPosition) >= length) {
	    var data = null;
	    if (this.data.buffer != null) { //Pure BSON
	      data = this.data.buffer.slice(this.internalPosition, this.internalPosition + length);
	    } else { //Native BSON
	      data = new Buffer(length);
	      length = this.data.readInto(data, this.internalPosition);
	    }
	    this.internalPosition = this.internalPosition + length;
	    return data;
	  } else {
	    return null;
	  }
	};
	
	/**
	 * Checks if the read/write head is at the end.
	 *
	 * @return {boolean} Whether the read/write head has reached the end of this
	 *     chunk.
	 */
	Chunk.prototype.eof = function() {
	  return this.internalPosition == this.length() ? true : false;
	};
	
	/**
	 * Reads one character from the data of this chunk and advances the read/write
	 * head.
	 *
	 * @return {string} a single character data read if the the read/write head is
	 *     not at the end of the chunk. Returns an empty String otherwise.
	 */
	Chunk.prototype.getc = function() {
	  return this.read(1);
	};
	
	/**
	 * Clears the contents of the data in this chunk and resets the read/write head
	 * to the initial position.
	 */
	Chunk.prototype.rewind = function() {
	  this.internalPosition = 0;
	  this.data = new Binary();
	};
	
	/**
	 * Saves this chunk to the database. Also overwrites existing entries having the
	 * same id as this chunk.
	 *
	 * @param callback {function(*, GridStore)} This will be called after executing
	 *     this method. The first parameter will contain null and the second one
	 *     will contain a reference to this object.
	 */
	Chunk.prototype.save = function(options, callback) {
	  var self = this;
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }
	
	  self.file.chunkCollection(function(err, collection) {
	    if(err) return callback(err);
	
	    // Merge the options
	    var writeOptions = {};
	    for(var name in options) writeOptions[name] = options[name];
	    for(var name in self.writeConcern) writeOptions[name] = self.writeConcern[name];    
	
	    // collection.remove({'_id':self.objectId}, self.writeConcern, function(err, result) {
	    collection.remove({'_id':self.objectId}, writeOptions, function(err, result) {
	      if(err) return callback(err);
	
	      if(self.data.length() > 0) {
	        self.buildMongoObject(function(mongoObject) {
	          var options = {forceServerObjectId:true};
	          for(var name in self.writeConcern) {
	            options[name] = self.writeConcern[name];
	          }
	
	          collection.insert(mongoObject, writeOptions, function(err, collection) {
	            callback(err, self);
	          });
	        });
	      } else {
	        callback(null, self);
	      }
	    });
	  });
	};
	
	/**
	 * Creates a mongoDB object representation of this chunk.
	 *
	 * @param callback {function(Object)} This will be called after executing this 
	 *     method. The object will be passed to the first parameter and will have
	 *     the structure:
	 *        
	 *        <pre><code>
	 *        {
	 *          '_id' : , // {number} id for this chunk
	 *          'files_id' : , // {number} foreign key to the file collection
	 *          'n' : , // {number} chunk number
	 *          'data' : , // {bson#Binary} the chunk data itself
	 *        }
	 *        </code></pre>
	 *
	 * @see <a href="http://www.mongodb.org/display/DOCS/GridFS+Specification#GridFSSpecification-{{chunks}}">MongoDB GridFS Chunk Object Structure</a>
	 */
	Chunk.prototype.buildMongoObject = function(callback) {
	  var mongoObject = {
	    'files_id': this.file.fileId,
	    'n': this.chunkNumber,
	    'data': this.data};
	  // If we are saving using a specific ObjectId
	  if(this.objectId != null) mongoObject._id = this.objectId;
	
	  callback(mongoObject);
	};
	
	/**
	 * @return {number} the length of the data
	 */
	Chunk.prototype.length = function() {
	  return this.data.length();
	};
	
	/**
	 * The position of the read/write head
	 * @name position
	 * @lends Chunk#
	 * @field
	 */
	Object.defineProperty(Chunk.prototype, "position", { enumerable: true
	  , get: function () {
	      return this.internalPosition;
	    }
	  , set: function(value) {
	      this.internalPosition = value;
	    }
	});
	
	/**
	 * The default chunk size
	 * @constant
	 */
	Chunk.DEFAULT_CHUNK_SIZE = 1024 * 255;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var GridStore = __webpack_require__(202).GridStore,
	  ObjectID = __webpack_require__(150).ObjectID;
	
	/**
	 * A class representation of a simple Grid interface.
	 *
	 * @class Represents the Grid.
	 * @param {Db} db A database instance to interact with.
	 * @param {String} [fsName] optional different root collection for GridFS.
	 * @return {Grid}
	 */
	function Grid(db, fsName) {
	
	  if(!(this instanceof Grid)) return new Grid(db, fsName);
	
	  this.db = db;
	  this.fsName = fsName == null ? GridStore.DEFAULT_ROOT_COLLECTION : fsName;
	}
	
	/**
	 * Puts binary data to the grid
	 *
	 * Options
	 *  - **_id** {Any}, unique id for this file
	 *  - **filename** {String}, name for this file.
	 *  - **root** {String}, root collection to use. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.
	 *  - **content_type** {String}, mime type of the file. Defaults to **{GridStore.DEFAULT_CONTENT_TYPE}**.
	 *  - **chunk_size** {Number}, size for the chunk. Defaults to **{Chunk.DEFAULT_CHUNK_SIZE}**.
	 *  - **metadata** {Object}, arbitrary data the user wants to store.
	 *
	 * @param {Buffer} data buffer with Binary Data.
	 * @param {Object} [options] the options for the files.
	 * @param {Function} callback this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	Grid.prototype.put = function(data, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  options = args.length ? args.shift() : {};
	  // If root is not defined add our default one
	  options['root'] = options['root'] == null ? this.fsName : options['root'];
	
	  // Return if we don't have a buffer object as data
	  if(!(Buffer.isBuffer(data))) return callback(new Error("Data object must be a buffer object"), null);
	  // Get filename if we are using it
	  var filename = options['filename'] || null;
	  // Get id if we are using it
	  var id = options['_id'] || null;
	  // Create gridstore
	  var gridStore = new GridStore(this.db, id, filename, "w", options);
	  gridStore.open(function(err, gridStore) {
	    if(err) return callback(err, null);
	
	    gridStore.write(data, function(err, result) {
	      if(err) return callback(err, null);
	
	      gridStore.close(function(err, result) {
	        if(err) return callback(err, null);
	        callback(null, result);
	      })
	    })
	  })
	}
	
	/**
	 * Get binary data to the grid
	 *
	 * @param {Any} id for file.
	 * @param {Function} callback this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	Grid.prototype.get = function(id, callback) {
	  // Create gridstore
	  var gridStore = new GridStore(this.db, id, null, "r", {root:this.fsName});
	  gridStore.open(function(err, gridStore) {
	    if(err) return callback(err, null);
	
	    // Return the data
	    gridStore.read(function(err, data) {
	      return callback(err, data)
	    });
	  })
	}
	
	/**
	 * Delete file from grid
	 *
	 * @param {Any} id for file.
	 * @param {Function} callback this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	Grid.prototype.delete = function(id, callback) {
	  // Create gridstore
	  GridStore.unlink(this.db, id, {root:this.fsName}, function(err, result) {
	    if(err) return callback(err, false);
	    return callback(null, true);
	  });
	}
	
	exports.Grid = Grid;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview GridFS is a tool for MongoDB to store files to the database.
	 * Because of the restrictions of the object size the database can hold, a
	 * facility to split a file into several chunks is needed. The {@link GridStore}
	 * class offers a simplified api to interact with files while managing the
	 * chunks of split files behind the scenes. More information about GridFS can be
	 * found <a href="http://www.mongodb.org/display/DOCS/GridFS">here</a>.
	 */
	var Chunk = __webpack_require__(200).Chunk,
	  DbCommand = __webpack_require__(175).DbCommand,
	  ObjectID = __webpack_require__(150).ObjectID,
	  Buffer = __webpack_require__(281).Buffer,
	  fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  timers = __webpack_require__(258),
	  util = __webpack_require__(282),
	  inherits = util.inherits,
	  ReadStream = __webpack_require__(203).ReadStream,
	  Stream = __webpack_require__(295);
	
	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(207).processor();
	
	var REFERENCE_BY_FILENAME = 0,
	  REFERENCE_BY_ID = 1;
	
	/**
	 * A class representation of a file stored in GridFS.
	 *
	 * Modes
	 *  - **"r"** - read only. This is the default mode.
	 *  - **"w"** - write in truncate mode. Existing data will be overwriten.
	 *  - **w+"** - write in edit mode (append is not guaranteed for concurrent operations)
	 *
	 * Options
	 *  - **root** {String}, root collection to use. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.
	 *  - **content_type** {String}, mime type of the file. Defaults to **{GridStore.DEFAULT_CONTENT_TYPE}**.
	 *  - **chunk_size** {Number}, size for the chunk. Defaults to **{Chunk.DEFAULT_CHUNK_SIZE}**.
	 *  - **metadata** {Object}, arbitrary data the user wants to store.
	 *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *
	 * @class Represents the GridStore.
	 * @param {Db} db A database instance to interact with.
	 * @param {Any} [id] optional unique id for this file
	 * @param {String} [filename] optional filename for this file, no unique constrain on the field
	 * @param {String} mode set the mode for this file.
	 * @param {Object} options optional properties to specify.
	 * @return {GridStore}
	 */
	var GridStore = function GridStore(db, id, filename, mode, options) {
	  if(!(this instanceof GridStore)) return new GridStore(db, id, filename, mode, options);
	
	  var self = this;
	  this.db = db;
	
	  // Call stream constructor
	  if(typeof Stream == 'function') {
	    Stream.call(this);
	  }
	
	  // Handle options
	  if(typeof options === 'undefined') options = {};
	  // Handle mode
	  if(typeof mode === 'undefined') {
	    mode = filename;
	    filename = undefined;
	  } else if(typeof mode == 'object') {
	    options = mode;
	    mode = filename;
	    filename = undefined;
	  }
	
	  if(id instanceof ObjectID) {
	    this.referenceBy = REFERENCE_BY_ID;
	    this.fileId = id;
	    this.filename = filename;
	  } else if(typeof filename == 'undefined') {
	    this.referenceBy = REFERENCE_BY_FILENAME;
	    this.filename = id;
	    if (mode.indexOf('w') != null) {
	      this.fileId = new ObjectID();
	    }
	  } else {
	    this.referenceBy = REFERENCE_BY_ID;
	    this.fileId = id;
	    this.filename = filename;
	  }
	
	  // Set up the rest
	  this.mode = mode == null ? "r" : mode;
	  this.options = options || {};
	
	  // Set the root if overridden
	  this.root = this.options['root'] == null ? exports.GridStore.DEFAULT_ROOT_COLLECTION : this.options['root'];
	  this.position = 0;
	  this.readPreference = this.options.readPreference || 'primary';
	  this.writeConcern = _getWriteConcern(db, this.options);
	
	  // Set default chunk size
	  this.internalChunkSize = this.options['chunkSize'] == null ? Chunk.DEFAULT_CHUNK_SIZE : this.options['chunkSize'];
	}
	
	/**
	 *  Code for the streaming capabilities of the gridstore object
	 *  Most code from Aaron heckmanns project https://github.com/aheckmann/gridfs-stream
	 *  Modified to work on the gridstore object itself
	 *  @ignore
	 */
	if(typeof Stream == 'function') {
	  GridStore.prototype = { __proto__: Stream.prototype }
	} else {
	  // Node 0.4.X compatibility code
	  GridStore.prototype = { __proto__: Stream.Stream.prototype }
	}
	
	// Move pipe to _pipe
	GridStore.prototype._pipe = GridStore.prototype.pipe;
	
	/**
	 * Opens the file from the database and initialize this object. Also creates a
	 * new one if file does not exist.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain an **{Error}** object and the second parameter will be null if an error occured. Otherwise, the first parameter will be null and the second will contain the reference to this object.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.open = function(callback) {
	  if( this.mode != "w" && this.mode != "w+" && this.mode != "r"){
	    callback(new Error("Illegal mode " + this.mode), null);
	    return;
	  }
	
	  var self = this;
	
	  // Get the write concern
	  var writeConcern = _getWriteConcern(this.db, this.options);
	
	  // If we are writing we need to ensure we have the right indexes for md5's
	  if((self.mode == "w" || self.mode == "w+")) {
	    // Get files collection
	    var collection = self.collection();
	    // Put index on filename
	    collection.ensureIndex([['filename', 1]], writeConcern, function(err, index) {
	      // if(err) return callback(err);
	
	      // Get chunk collection
	      var chunkCollection = self.chunkCollection();
	      // Ensure index on chunk collection
	      chunkCollection.ensureIndex([['files_id', 1], ['n', 1]], writeConcern, function(err, index) {
	        // if(err) return callback(err);
	        _open(self, writeConcern, callback);
	      });
	    });
	  } else {
	    // Open the gridstore
	    _open(self, writeConcern, callback);
	  }
	};
	
	/**
	 * Hidding the _open function
	 * @ignore
	 * @api private
	 */
	var _open = function(self, options, callback) {
	  var collection = self.collection();
	  // Create the query
	  var query = self.referenceBy == REFERENCE_BY_ID ? {_id:self.fileId} : {filename:self.filename};
	  query = null == self.fileId && self.filename == null ? null : query;
	  options.readPreference = self.readPreference;
	
	  // Fetch the chunks
	  if(query != null) {
	    collection.findOne(query, options, function(err, doc) {
	      if(err) return error(err);
	
	      // Check if the collection for the files exists otherwise prepare the new one
	      if(doc != null) {
	        self.fileId = doc._id;
	        // Prefer a new filename over the existing one if this is a write
	        self.filename = ((self.mode == 'r') || (self.filename == undefined)) ? doc.filename : self.filename;
	        self.contentType = doc.contentType;
	        self.internalChunkSize = doc.chunkSize;
	        self.uploadDate = doc.uploadDate;
	        self.aliases = doc.aliases;
	        self.length = doc.length;
	        self.metadata = doc.metadata;
	        self.internalMd5 = doc.md5;
	      } else if (self.mode != 'r') {
	        self.fileId = self.fileId == null ? new ObjectID() : self.fileId;
	        self.contentType = exports.GridStore.DEFAULT_CONTENT_TYPE;
	        self.internalChunkSize = self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;
	        self.length = 0;
	      } else {
	        self.length = 0;
	        var txtId = self.fileId instanceof ObjectID ? self.fileId.toHexString() : self.fileId;
	        return error(new Error((self.referenceBy == REFERENCE_BY_ID ? txtId : self.filename) + " does not exist", self));
	      }
	
	      // Process the mode of the object
	      if(self.mode == "r") {
	        nthChunk(self, 0, options, function(err, chunk) {
	          if(err) return error(err);
	          self.currentChunk = chunk;
	          self.position = 0;
	          callback(null, self);
	        });
	      } else if(self.mode == "w") {
	        // Delete any existing chunks
	        deleteChunks(self, options, function(err, result) {
	          if(err) return error(err);
	          self.currentChunk = new Chunk(self, {'n':0}, self.writeConcern);
	          self.contentType = self.options['content_type'] == null ? self.contentType : self.options['content_type'];
	          self.internalChunkSize = self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];
	          self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];
	          self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];
	          self.position = 0;
	          callback(null, self);
	        });
	      } else if(self.mode == "w+") {
	        nthChunk(self, lastChunkNumber(self), options, function(err, chunk) {
	          if(err) return error(err);
	          // Set the current chunk
	          self.currentChunk = chunk == null ? new Chunk(self, {'n':0}, self.writeConcern) : chunk;
	          self.currentChunk.position = self.currentChunk.data.length();
	          self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];
	          self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];
	          self.position = self.length;
	          callback(null, self);
	        });
	      }
	    });
	  } else {
	    // Write only mode
	    self.fileId = null == self.fileId ? new ObjectID() : self.fileId;
	    self.contentType = exports.GridStore.DEFAULT_CONTENT_TYPE;
	    self.internalChunkSize = self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;
	    self.length = 0;
	
	    var collection2 = self.chunkCollection();
	    // No file exists set up write mode
	    if(self.mode == "w") {
	      // Delete any existing chunks
	      deleteChunks(self, options, function(err, result) {
	        if(err) return error(err);
	        self.currentChunk = new Chunk(self, {'n':0}, self.writeConcern);
	        self.contentType = self.options['content_type'] == null ? self.contentType : self.options['content_type'];
	        self.internalChunkSize = self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];
	        self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];
	        self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];
	        self.position = 0;
	        callback(null, self);
	      });
	    } else if(self.mode == "w+") {
	      nthChunk(self, lastChunkNumber(self), options, function(err, chunk) {
	        if(err) return error(err);
	        // Set the current chunk
	        self.currentChunk = chunk == null ? new Chunk(self, {'n':0}, self.writeConcern) : chunk;
	        self.currentChunk.position = self.currentChunk.data.length();
	        self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];
	        self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];
	        self.position = self.length;
	        callback(null, self);
	      });
	    }
	  }
	
	  // only pass error to callback once
	  function error (err) {
	    if(error.err) return;
	    callback(error.err = err);
	  }
	};
	
	/**
	 * Stores a file from the file system to the GridFS database.
	 *
	 * @param {String|Buffer|FileHandle} file the file to store.
	 * @param {Function} callback this will be called after this method is executed. The first parameter will be null and the the second will contain the reference to this object.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.writeFile = function (file, callback) {
	  var self = this;
	  if (typeof file === 'string') {
	    fs.open(file, 'r', function (err, fd) {
	      if(err) return callback(err);
	      self.writeFile(fd, callback);
	    });
	    return;
	  }
	
	  self.open(function (err, self) {
	    if(err) return callback(err, self);
	
	    fs.fstat(file, function (err, stats) {
	      if(err) return callback(err, self);
	
	      var offset = 0;
	      var index = 0;
	      var numberOfChunksLeft = Math.min(stats.size / self.chunkSize);
	
	      // Write a chunk
	      var writeChunk = function() {
	        fs.read(file, self.chunkSize, offset, 'binary', function(err, data, bytesRead) {
	          if(err) return callback(err, self);
	
	          offset = offset + bytesRead;
	
	          // Create a new chunk for the data
	          var chunk = new Chunk(self, {n:index++}, self.writeConcern);
	          chunk.write(data, function(err, chunk) {
	            if(err) return callback(err, self);
	
	            chunk.save({}, function(err, result) {
	              if(err) return callback(err, self);
	
	              self.position = self.position + data.length;
	
	              // Point to current chunk
	              self.currentChunk = chunk;
	
	              if(offset >= stats.size) {
	                fs.close(file);
	                self.close(function(err, result) {
	                  if(err) return callback(err, self);
	                  return callback(null, self);
	                });
	              } else {
	                return processor(writeChunk);
	              }
	            });
	          });
	        });
	      }
	
	      // Process the first write
	      processor(writeChunk);
	    });
	  });
	};
	
	/**
	 * Writes some data. This method will work properly only if initialized with mode
	 * "w" or "w+".
	 *
	 * @param string {string} The data to write.
	 * @param close {boolean=false} opt_argument Closes this file after writing if
	 *     true.
	 * @param callback {function(*, GridStore)} This will be called after executing
	 *     this method. The first parameter will contain null and the second one
	 *     will contain a reference to this object.
	 *
	 * @ignore
	 * @api private
	 */
	var writeBuffer = function(self, buffer, close, callback) {
	  if(typeof close === "function") { callback = close; close = null; }
	  var finalClose = typeof close == 'boolean' ? close : false;
	
	  if(self.mode[0] != "w") {
	    callback(new Error((self.referenceBy == REFERENCE_BY_ID ? self.toHexString() : self.filename) + " not opened for writing"), null);
	  } else {
	    if(self.currentChunk.position + buffer.length >= self.chunkSize) {
	      // Write out the current Chunk and then keep writing until we have less data left than a chunkSize left
	      // to a new chunk (recursively)
	      var previousChunkNumber = self.currentChunk.chunkNumber;
	      var leftOverDataSize = self.chunkSize - self.currentChunk.position;
	      var firstChunkData = buffer.slice(0, leftOverDataSize);
	      var leftOverData = buffer.slice(leftOverDataSize);
	      // A list of chunks to write out
	      var chunksToWrite = [self.currentChunk.write(firstChunkData)];
	      // If we have more data left than the chunk size let's keep writing new chunks
	      while(leftOverData.length >= self.chunkSize) {
	        // Create a new chunk and write to it
	        var newChunk = new Chunk(self, {'n': (previousChunkNumber + 1)}, self.writeConcern);
	        var firstChunkData = leftOverData.slice(0, self.chunkSize);
	        leftOverData = leftOverData.slice(self.chunkSize);
	        // Update chunk number
	        previousChunkNumber = previousChunkNumber + 1;
	        // Write data
	        newChunk.write(firstChunkData);
	        // Push chunk to save list
	        chunksToWrite.push(newChunk);
	      }
	
	      // Set current chunk with remaining data
	      self.currentChunk = new Chunk(self, {'n': (previousChunkNumber + 1)}, self.writeConcern);
	      // If we have left over data write it
	      if(leftOverData.length > 0) self.currentChunk.write(leftOverData);
	
	      // Update the position for the gridstore
	      self.position = self.position + buffer.length;
	      // Total number of chunks to write
	      var numberOfChunksToWrite = chunksToWrite.length;
	
	      for(var i = 0; i < chunksToWrite.length; i++) {
	        chunksToWrite[i].save({}, function(err, result) {
	          if(err) return callback(err);
	
	          numberOfChunksToWrite = numberOfChunksToWrite - 1;
	
	          if(numberOfChunksToWrite <= 0) {
	            // We care closing the file before returning
	            if(finalClose) {
	              return self.close(function(err, result) {
	                callback(err, self);
	              });
	            }
	
	            // Return normally
	            return callback(null, self);
	          }
	        });
	      }
	    } else {
	      // Update the position for the gridstore
	      self.position = self.position + buffer.length;
	      // We have less data than the chunk size just write it and callback
	      self.currentChunk.write(buffer);
	      // We care closing the file before returning
	      if(finalClose) {
	        return self.close(function(err, result) {
	          callback(err, self);
	        });
	      }
	      // Return normally
	      return callback(null, self);
	    }
	  }
	};
	
	/**
	 * Creates a mongoDB object representation of this object.
	 *
	 * @param callback {function(object)} This will be called after executing this
	 *     method. The object will be passed to the first parameter and will have
	 *     the structure:
	 *
	 *        <pre><code>
	 *        {
	 *          '_id' : , // {number} id for this file
	 *          'filename' : , // {string} name for this file
	 *          'contentType' : , // {string} mime type for this file
	 *          'length' : , // {number} size of this file?
	 *          'chunksize' : , // {number} chunk size used by this file
	 *          'uploadDate' : , // {Date}
	 *          'aliases' : , // {array of string}
	 *          'metadata' : , // {string}
	 *        }
	 *        </code></pre>
	 *
	 * @ignore
	 * @api private
	 */
	var buildMongoObject = function(self, callback) {
	  // Calcuate the length
	  var mongoObject = {
	    '_id': self.fileId,
	    'filename': self.filename,
	    'contentType': self.contentType,
	    'length': self.position ? self.position : 0,
	    'chunkSize': self.chunkSize,
	    'uploadDate': self.uploadDate,
	    'aliases': self.aliases,
	    'metadata': self.metadata
	  };
	
	  var md5Command = {filemd5:self.fileId, root:self.root};
	  self.db.command(md5Command, function(err, results) {
	    if(err) return callback(err);
	
	    mongoObject.md5 = results.md5;
	    callback(null, mongoObject);
	  });
	};
	
	/**
	 * Saves this file to the database. This will overwrite the old entry if it
	 * already exists. This will work properly only if mode was initialized to
	 * "w" or "w+".
	 *
	 * @param {Function} callback this will be called after executing this method. Passes an **{Error}** object to the first parameter and null to the second if an error occured. Otherwise, passes null to the first and a reference to this object to the second.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.close = function(callback) {
	  var self = this;
	
	  if(self.mode[0] == "w") {
	    // Set up options
	    var options = self.writeConcern;
	
	    if(self.currentChunk != null && self.currentChunk.position > 0) {
	      self.currentChunk.save({}, function(err, chunk) {
	        if(err && typeof callback == 'function') return callback(err);
	
	        self.collection(function(err, files) {
	          if(err && typeof callback == 'function') return callback(err);
	
	          // Build the mongo object
	          if(self.uploadDate != null) {
	            files.remove({'_id':self.fileId}, self.writeConcern, function(err, collection) {
	              if(err && typeof callback == 'function') return callback(err);
	
	              buildMongoObject(self, function(err, mongoObject) {
	                if(err) {
	                  if(typeof callback == 'function') return callback(err); else throw err;
	                }
	
	                files.save(mongoObject, options, function(err) {
	                  if(typeof callback == 'function')
	                    callback(err, mongoObject);
	                });
	              });
	            });
	          } else {
	            self.uploadDate = new Date();
	            buildMongoObject(self, function(err, mongoObject) {
	              if(err) {
	                if(typeof callback == 'function') return callback(err); else throw err;
	              }
	
	              files.save(mongoObject, options, function(err) {
	                if(typeof callback == 'function')
	                  callback(err, mongoObject);
	              });
	            });
	          }
	        });
	      });
	    } else {
	      self.collection(function(err, files) {
	        if(err && typeof callback == 'function') return callback(err);
	
	        self.uploadDate = new Date();
	        buildMongoObject(self, function(err, mongoObject) {
	          if(err) {
	            if(typeof callback == 'function') return callback(err); else throw err;
	          }
	
	          files.save(mongoObject, options, function(err) {
	            if(typeof callback == 'function')
	              callback(err, mongoObject);
	          });
	        });
	      });
	    }
	  } else if(self.mode[0] == "r") {
	    if(typeof callback == 'function')
	      callback(null, null);
	  } else {
	    if(typeof callback == 'function')
	      callback(new Error("Illegal mode " + self.mode), null);
	  }
	};
	
	/**
	 * Gets the nth chunk of this file.
	 *
	 * @param chunkNumber {number} The nth chunk to retrieve.
	 * @param callback {function(*, Chunk|object)} This will be called after
	 *     executing this method. null will be passed to the first parameter while
	 *     a new {@link Chunk} instance will be passed to the second parameter if
	 *     the chunk was found or an empty object {} if not.
	 *
	 * @ignore
	 * @api private
	 */
	var nthChunk = function(self, chunkNumber, options, callback) {
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }
	
	  options = options || self.writeConcern;
	  options.readPreference = self.readPreference;
	  // Get the nth chunk
	  self.chunkCollection().findOne({'files_id':self.fileId, 'n':chunkNumber}, options, function(err, chunk) {
	    if(err) return callback(err);
	
	    var finalChunk = chunk == null ? {} : chunk;
	    callback(null, new Chunk(self, finalChunk, self.writeConcern));
	  });
	};
	
	/**
	 *
	 * @ignore
	 * @api private
	 */
	GridStore.prototype._nthChunk = function(chunkNumber, callback) {
	  nthChunk(this, chunkNumber, callback);
	}
	
	/**
	 * @return {Number} The last chunk number of this file.
	 *
	 * @ignore
	 * @api private
	 */
	var lastChunkNumber = function(self) {
	  return Math.floor((self.length ? self.length - 1 : 0)/self.chunkSize);
	};
	
	/**
	 * Retrieve this file's chunks collection.
	 *
	 * @param {Function} callback this will be called after executing this method. An exception object will be passed to the first parameter when an error occured or null otherwise. A new **{Collection}** object will be passed to the second parameter if no error occured.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.chunkCollection = function(callback) {
	  if(typeof callback == 'function')
	    return this.db.collection((this.root + ".chunks"), callback);
	  return this.db.collection((this.root + ".chunks"));
	};
	
	/**
	 * Deletes all the chunks of this file in the database.
	 *
	 * @param callback {function(*, boolean)} This will be called after this method
	 *     executes. Passes null to the first and true to the second argument.
	 *
	 * @ignore
	 * @api private
	 */
	var deleteChunks = function(self, options, callback) {
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }
	
	  options = options || self.writeConcern;
	
	  if(self.fileId != null) {
	    self.chunkCollection().remove({'files_id':self.fileId}, options, function(err, result) {
	      if(err) return callback(err, false);
	      callback(null, true);
	    });
	  } else {
	    callback(null, true);
	  }
	};
	
	/**
	 * Deletes all the chunks of this file in the database.
	 *
	 * @param {Function} callback this will be called after this method executes. Passes null to the first and true to the second argument.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.unlink = function(callback) {
	  var self = this;
	  deleteChunks(this, function(err) {
	    if(err!==null) {
	      err.message = "at deleteChunks: " + err.message;
	      return callback(err);
	    }
	
	    self.collection(function(err, collection) {
	      if(err!==null) {
	        err.message = "at collection: " + err.message;
	        return callback(err);
	      }
	
	      collection.remove({'_id':self.fileId}, self.writeConcern, function(err) {
	        callback(err, self);
	      });
	    });
	  });
	};
	
	/**
	 * Retrieves the file collection associated with this object.
	 *
	 * @param {Function} callback this will be called after executing this method. An exception object will be passed to the first parameter when an error occured or null otherwise. A new **{Collection}** object will be passed to the second parameter if no error occured.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.collection = function(callback) {
	  if(typeof callback == 'function')
	    this.db.collection(this.root + ".files", callback);
	  return this.db.collection(this.root + ".files");
	};
	
	/**
	 * Reads the data of this file.
	 *
	 * @param {String} [separator] the character to be recognized as the newline separator.
	 * @param {Function} callback This will be called after this method is executed. The first parameter will be null and the second parameter will contain an array of strings representing the entire data, each element representing a line including the separator character.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.readlines = function(separator, callback) {
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  separator = args.length ? args.shift() : "\n";
	
	  this.read(function(err, data) {
	    if(err) return callback(err);
	
	    var items = data.toString().split(separator);
	    items = items.length > 0 ? items.splice(0, items.length - 1) : [];
	    for(var i = 0; i < items.length; i++) {
	      items[i] = items[i] + separator;
	    }
	
	    callback(null, items);
	  });
	};
	
	/**
	 * Deletes all the chunks of this file in the database if mode was set to "w" or
	 * "w+" and resets the read/write head to the initial position.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.rewind = function(callback) {
	  var self = this;
	
	  if(this.currentChunk.chunkNumber != 0) {
	    if(this.mode[0] == "w") {
	      deleteChunks(self, function(err, gridStore) {
	        if(err) return callback(err);
	        self.currentChunk = new Chunk(self, {'n': 0}, self.writeConcern);
	        self.position = 0;
	        callback(null, self);
	      });
	    } else {
	      self.currentChunk(0, function(err, chunk) {
	        if(err) return callback(err);
	        self.currentChunk = chunk;
	        self.currentChunk.rewind();
	        self.position = 0;
	        callback(null, self);
	      });
	    }
	  } else {
	    self.currentChunk.rewind();
	    self.position = 0;
	    callback(null, self);
	  }
	};
	
	/**
	 * Retrieves the contents of this file and advances the read/write head. Works with Buffers only.
	 *
	 * There are 3 signatures for this method:
	 *
	 * (callback)
	 * (length, callback)
	 * (length, buffer, callback)
	 *
	 * @param {Number} [length] the number of characters to read. Reads all the characters from the read/write head to the EOF if not specified.
	 * @param {String|Buffer} [buffer] a string to hold temporary data. This is used for storing the string data read so far when recursively calling this method.
	 * @param {Function} callback this will be called after this method is executed. null will be passed to the first parameter and a string containing the contents of the buffer concatenated with the contents read from this file will be passed to the second.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.read = function(length, buffer, callback) {
	  var self = this;
	
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  length = args.length ? args.shift() : null;
	  buffer = args.length ? args.shift() : null;
	
	  // The data is a c-terminated string and thus the length - 1
	  var finalLength = length == null ? self.length - self.position : length;
	  var finalBuffer = buffer == null ? new Buffer(finalLength) : buffer;
	  // Add a index to buffer to keep track of writing position or apply current index
	  finalBuffer._index = buffer != null && buffer._index != null ? buffer._index : 0;
	
	  if((self.currentChunk.length() - self.currentChunk.position + finalBuffer._index) >= finalLength) {
	    var slice = self.currentChunk.readSlice(finalLength - finalBuffer._index);
	    // Copy content to final buffer
	    slice.copy(finalBuffer, finalBuffer._index);
	    // Update internal position
	    self.position = self.position + finalBuffer.length;
	    // Check if we don't have a file at all
	    if(finalLength == 0 && finalBuffer.length == 0) return callback(new Error("File does not exist"), null);
	    // Else return data
	    callback(null, finalBuffer);
	  } else {
	    var slice = self.currentChunk.readSlice(self.currentChunk.length() - self.currentChunk.position);
	    // Copy content to final buffer
	    slice.copy(finalBuffer, finalBuffer._index);
	    // Update index position
	    finalBuffer._index += slice.length;
	
	    // Load next chunk and read more
	    nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {
	      if(err) return callback(err);
	
	      if(chunk.length() > 0) {
	        self.currentChunk = chunk;
	        self.read(length, finalBuffer, callback);
	      } else {
	        if (finalBuffer._index > 0) {
	          callback(null, finalBuffer)
	        } else {
	          callback(new Error("no chunks found for file, possibly corrupt"), null);
	        }
	      }
	    });
	  }
	}
	
	/**
	 * Retrieves the position of the read/write head of this file.
	 *
	 * @param {Function} callback This gets called after this method terminates. null is passed to the first parameter and the position is passed to the second.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.tell = function(callback) {
	  callback(null, this.position);
	};
	
	/**
	 * Moves the read/write head to a new location.
	 *
	 * There are 3 signatures for this method
	 *
	 * Seek Location Modes
	 *  - **GridStore.IO_SEEK_SET**, **(default)** set the position from the start of the file.
	 *  - **GridStore.IO_SEEK_CUR**, set the position from the current position in the file.
	 *  - **GridStore.IO_SEEK_END**, set the position from the end of the file.
	 *
	 * @param {Number} [position] the position to seek to
	 * @param {Number} [seekLocation] seek mode. Use one of the Seek Location modes.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.seek = function(position, seekLocation, callback) {
	  var self = this;
	
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  seekLocation = args.length ? args.shift() : null;
	
	  var seekLocationFinal = seekLocation == null ? exports.GridStore.IO_SEEK_SET : seekLocation;
	  var finalPosition = position;
	  var targetPosition = 0;
	
	  // Calculate the position
	  if(seekLocationFinal == exports.GridStore.IO_SEEK_CUR) {
	    targetPosition = self.position + finalPosition;
	  } else if(seekLocationFinal == exports.GridStore.IO_SEEK_END) {
	    targetPosition = self.length + finalPosition;
	  } else {
	    targetPosition = finalPosition;
	  }
	
	  // Get the chunk
	  var newChunkNumber = Math.floor(targetPosition/self.chunkSize);
	  if(newChunkNumber != self.currentChunk.chunkNumber) {
	    var seekChunk = function() {
	      nthChunk(self, newChunkNumber, function(err, chunk) {
	        self.currentChunk = chunk;
	        self.position = targetPosition;
	        self.currentChunk.position = (self.position % self.chunkSize);
	        callback(err, self);
	      });
	    };
	
	    if(self.mode[0] == 'w') {
	      self.currentChunk.save({}, function(err) {
	        if(err) return callback(err);
	        seekChunk();
	      });
	    } else {
	      seekChunk();
	    }
	  } else {
	    self.position = targetPosition;
	    self.currentChunk.position = (self.position % self.chunkSize);
	    callback(null, self);
	  }
	};
	
	/**
	 * Verify if the file is at EOF.
	 *
	 * @return {Boolean} true if the read/write head is at the end of this file.
	 * @api public
	 */
	GridStore.prototype.eof = function() {
	  return this.position == this.length ? true : false;
	};
	
	/**
	 * Retrieves a single character from this file.
	 *
	 * @param {Function} callback this gets called after this method is executed. Passes null to the first parameter and the character read to the second or null to the second if the read/write head is at the end of the file.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.getc = function(callback) {
	  var self = this;
	
	  if(self.eof()) {
	    callback(null, null);
	  } else if(self.currentChunk.eof()) {
	    nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {
	      self.currentChunk = chunk;
	      self.position = self.position + 1;
	      callback(err, self.currentChunk.getc());
	    });
	  } else {
	    self.position = self.position + 1;
	    callback(null, self.currentChunk.getc());
	  }
	};
	
	/**
	 * Writes a string to the file with a newline character appended at the end if
	 * the given string does not have one.
	 *
	 * @param {String} string the string to write.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.puts = function(string, callback) {
	  var finalString = string.match(/\n$/) == null ? string + "\n" : string;
	  this.write(finalString, callback);
	};
	
	/**
	 * Returns read stream based on this GridStore file
	 *
	 * Events
	 *  - **data** {function(item) {}} the data event triggers when a document is ready.
	 *  - **end** {function() {}} the end event triggers when there is no more documents available.
	 *  - **close** {function() {}} the close event triggers when the stream is closed.
	 *  - **error** {function(err) {}} the error event triggers if an error happens.
	 *
	 * @param {Boolean} autoclose if true current GridStore will be closed when EOF and 'close' event will be fired
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.stream = function(autoclose) {
	  return new ReadStream(autoclose, this);
	};
	
	/**
	* The collection to be used for holding the files and chunks collection.
	*
	* @classconstant DEFAULT_ROOT_COLLECTION
	**/
	GridStore.DEFAULT_ROOT_COLLECTION = 'fs';
	
	/**
	* Default file mime type
	*
	* @classconstant DEFAULT_CONTENT_TYPE
	**/
	GridStore.DEFAULT_CONTENT_TYPE = 'binary/octet-stream';
	
	/**
	* Seek mode where the given length is absolute.
	*
	* @classconstant IO_SEEK_SET
	**/
	GridStore.IO_SEEK_SET = 0;
	
	/**
	* Seek mode where the given length is an offset to the current read/write head.
	*
	* @classconstant IO_SEEK_CUR
	**/
	GridStore.IO_SEEK_CUR = 1;
	
	/**
	* Seek mode where the given length is an offset to the end of the file.
	*
	* @classconstant IO_SEEK_END
	**/
	GridStore.IO_SEEK_END = 2;
	
	/**
	 * Checks if a file exists in the database.
	 *
	 * Options
	 *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *
	 * @param {Db} db the database to query.
	 * @param {String} name the name of the file to look for.
	 * @param {String} [rootCollection] the root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.
	 * @param {Function} callback this will be called after this method executes. Passes null to the first and passes true to the second if the file exists and false otherwise.
	 * @return {null}
	 * @api public
	 */
	GridStore.exist = function(db, fileIdObject, rootCollection, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  rootCollection = args.length ? args.shift() : null;
	  options = args.length ? args.shift() : {};
	
	  // Establish read preference
	  var readPreference = options.readPreference || 'primary';
	  // Fetch collection
	  var rootCollectionFinal = rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;
	  db.collection(rootCollectionFinal + ".files", function(err, collection) {
	    if(err) return callback(err);
	
	    // Build query
	    var query = (typeof fileIdObject == 'string' || Object.prototype.toString.call(fileIdObject) == '[object RegExp]' )
	      ? {'filename':fileIdObject}
	      : {'_id':fileIdObject};    // Attempt to locate file
	
	    collection.findOne(query, {readPreference:readPreference}, function(err, item) {
	      if(err) return callback(err);
	
	      callback(null, item == null ? false : true);
	    });
	  });
	};
	
	/**
	 * Gets the list of files stored in the GridFS.
	 *
	 * @param {Db} db the database to query.
	 * @param {String} [rootCollection] the root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.
	 * @param {Function} callback this will be called after this method executes. Passes null to the first and passes an array of strings containing the names of the files.
	 * @return {null}
	 * @api public
	 */
	GridStore.list = function(db, rootCollection, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  rootCollection = args.length ? args.shift() : null;
	  options = args.length ? args.shift() : {};
	
	  // Ensure we have correct values
	  if(rootCollection != null && typeof rootCollection == 'object') {
	    options = rootCollection;
	    rootCollection = null;
	  }
	
	  // Establish read preference
	  var readPreference = options.readPreference || 'primary';
	  // Check if we are returning by id not filename
	  var byId = options['id'] != null ? options['id'] : false;
	  // Fetch item
	  var rootCollectionFinal = rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;
	  var items = [];
	  db.collection((rootCollectionFinal + ".files"), function(err, collection) {
	    if(err) return callback(err);
	
	    collection.find({}, {readPreference:readPreference}, function(err, cursor) {
	      if(err) return callback(err);
	
	      cursor.each(function(err, item) {
	        if(item != null) {
	          items.push(byId ? item._id : item.filename);
	        } else {
	          callback(err, items);
	        }
	      });
	    });
	  });
	};
	
	/**
	 * Reads the contents of a file.
	 *
	 * This method has the following signatures
	 *
	 * (db, name, callback)
	 * (db, name, length, callback)
	 * (db, name, length, offset, callback)
	 * (db, name, length, offset, options, callback)
	 *
	 * @param {Db} db the database to query.
	 * @param {String} name the name of the file.
	 * @param {Number} [length] the size of data to read.
	 * @param {Number} [offset] the offset from the head of the file of which to start reading from.
	 * @param {Object} [options] the options for the file.
	 * @param {Function} callback this will be called after this method executes. A string with an error message will be passed to the first parameter when the length and offset combination exceeds the length of the file while an Error object will be passed if other forms of error occured, otherwise, a string is passed. The second parameter will contain the data read if successful or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	GridStore.read = function(db, name, length, offset, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  length = args.length ? args.shift() : null;
	  offset = args.length ? args.shift() : null;
	  options = args.length ? args.shift() : null;
	
	  new GridStore(db, name, "r", options).open(function(err, gridStore) {
	    if(err) return callback(err);
	    // Make sure we are not reading out of bounds
	    if(offset && offset >= gridStore.length) return callback("offset larger than size of file", null);
	    if(length && length > gridStore.length) return callback("length is larger than the size of the file", null);
	    if(offset && length && (offset + length) > gridStore.length) return callback("offset and length is larger than the size of the file", null);
	
	    if(offset != null) {
	      gridStore.seek(offset, function(err, gridStore) {
	        if(err) return callback(err);
	        gridStore.read(length, callback);
	      });
	    } else {
	      gridStore.read(length, callback);
	    }
	  });
	};
	
	/**
	 * Reads the data of this file.
	 *
	 * @param {Db} db the database to query.
	 * @param {String} name the name of the file.
	 * @param {String} [separator] the character to be recognized as the newline separator.
	 * @param {Object} [options] file options.
	 * @param {Function} callback this will be called after this method is executed. The first parameter will be null and the second parameter will contain an array of strings representing the entire data, each element representing a line including the separator character.
	 * @return {null}
	 * @api public
	 */
	GridStore.readlines = function(db, name, separator, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  separator = args.length ? args.shift() : null;
	  options = args.length ? args.shift() : null;
	
	  var finalSeperator = separator == null ? "\n" : separator;
	  new GridStore(db, name, "r", options).open(function(err, gridStore) {
	    if(err) return callback(err);
	    gridStore.readlines(finalSeperator, callback);
	  });
	};
	
	/**
	 * Deletes the chunks and metadata information of a file from GridFS.
	 *
	 * @param {Db} db the database to interact with.
	 * @param {String|Array} names the name/names of the files to delete.
	 * @param {Object} [options] the options for the files.
	 * @callback {Function} this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	GridStore.unlink = function(db, names, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  options = args.length ? args.shift() : {};
	
	  // Get the write concern
	  var writeConcern = _getWriteConcern(db, options);
	
	  // List of names
	  if(names.constructor == Array) {
	    var tc = 0;
	    for(var i = 0; i < names.length; i++) {
	      ++tc;
	      GridStore.unlink(db, names[i], options, function(result) {
	        if(--tc == 0) {
	            callback(null, self);
	        }
	      });
	    }
	  } else {
	    new GridStore(db, names, "w", options).open(function(err, gridStore) {
	      if(err) return callback(err);
	      deleteChunks(gridStore, function(err, result) {
	        if(err) return callback(err);
	        gridStore.collection(function(err, collection) {
	          if(err) return callback(err);
	          collection.remove({'_id':gridStore.fileId}, writeConcern, function(err, result) {
	            callback(err, self);
	          });
	        });
	      });
	    });
	  }
	};
	
	/**
	 * Returns the current chunksize of the file.
	 *
	 * @field chunkSize
	 * @type {Number}
	 * @getter
	 * @setter
	 * @property return number of bytes in the current chunkSize.
	 */
	Object.defineProperty(GridStore.prototype, "chunkSize", { enumerable: true
	 , get: function () {
	     return this.internalChunkSize;
	   }
	 , set: function(value) {
	     if(!(this.mode[0] == "w" && this.position == 0 && this.uploadDate == null)) {
	       this.internalChunkSize = this.internalChunkSize;
	     } else {
	       this.internalChunkSize = value;
	     }
	   }
	});
	
	/**
	 * The md5 checksum for this file.
	 *
	 * @field md5
	 * @type {Number}
	 * @getter
	 * @setter
	 * @property return this files md5 checksum.
	 */
	Object.defineProperty(GridStore.prototype, "md5", { enumerable: true
	 , get: function () {
	     return this.internalMd5;
	   }
	});
	
	/**
	 *  GridStore Streaming methods
	 *  Handles the correct return of the writeable stream status
	 *  @ignore
	 */
	Object.defineProperty(GridStore.prototype, "writable", { enumerable: true
	 , get: function () {
	    if(this._writeable == null) {
	      this._writeable = this.mode != null && this.mode.indexOf("w") != -1;
	    }
	    // Return the _writeable
	    return this._writeable;
	  }
	 , set: function(value) {
	    this._writeable = value;
	  }
	});
	
	/**
	 *  Handles the correct return of the readable stream status
	 *  @ignore
	 */
	Object.defineProperty(GridStore.prototype, "readable", { enumerable: true
	 , get: function () {
	    if(this._readable == null) {
	      this._readable = this.mode != null && this.mode.indexOf("r") != -1;
	    }
	    return this._readable;
	  }
	 , set: function(value) {
	    this._readable = value;
	  }
	});
	
	GridStore.prototype.paused;
	
	/**
	 *  Handles the correct setting of encoding for the stream
	 *  @ignore
	 */
	GridStore.prototype.setEncoding = fs.ReadStream.prototype.setEncoding;
	
	/**
	 *  Handles the end events
	 *  @ignore
	 */
	GridStore.prototype.end = function end(data) {
	  var self = this;
	  // allow queued data to write before closing
	  if(!this.writable) return;
	  this.writable = false;
	
	  if(data) {
	    this._q.push(data);
	  }
	
	  this.on('drain', function () {
	    self.close(function (err) {
	      if (err) return _error(self, err);
	      self.emit('close');
	    });
	  });
	
	  _flush(self);
	}
	
	/**
	 *  Handles the normal writes to gridstore
	 *  @ignore
	 */
	var _writeNormal = function(self, data, close, callback) {
	  // If we have a buffer write it using the writeBuffer method
	  if(Buffer.isBuffer(data)) {
	    return writeBuffer(self, data, close, callback);
	  } else {
	    return writeBuffer(self, new Buffer(data, 'binary'), close, callback);
	  }
	}
	
	/**
	 * Writes some data. This method will work properly only if initialized with mode "w" or "w+".
	 *
	 * @param {String|Buffer} data the data to write.
	 * @param {Boolean} [close] closes this file after writing if set to true.
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
	 * @return {null}
	 * @api public
	 */
	GridStore.prototype.write = function write(data, close, callback) {
	  // If it's a normal write delegate the call
	  if(typeof close == 'function' || typeof callback == 'function') {
	    return _writeNormal(this, data, close, callback);
	  }
	
	  // Otherwise it's a stream write
	  var self = this;
	  if (!this.writable) {
	    throw new Error('GridWriteStream is not writable');
	  }
	
	  // queue data until we open.
	  if(!this._opened) {
	    // Set up a queue to save data until gridstore object is ready
	    this._q = [];
	    _openStream(self);
	    this._q.push(data);
	    return false;
	  }
	
	  // Push data to queue
	  this._q.push(data);
	  _flush(this);
	  // Return write successful
	  return true;
	}
	
	/**
	 *  Handles the destroy part of a stream
	 *  @ignore
	 */
	GridStore.prototype.destroy = function destroy() {
	  // close and do not emit any more events. queued data is not sent.
	  if(!this.writable) return;
	  this.readable = false;
	  if(this.writable) {
	    this.writable = false;
	    this._q.length = 0;
	    this.emit('close');
	  }
	}
	
	/**
	 *  Handles the destroySoon part of a stream
	 *  @ignore
	 */
	GridStore.prototype.destroySoon = function destroySoon() {
	  // as soon as write queue is drained, destroy.
	  // may call destroy immediately if no data is queued.
	  if(!this._q.length) {
	    return this.destroy();
	  }
	  this._destroying = true;
	}
	
	/**
	 *  Handles the pipe part of the stream
	 *  @ignore
	 */
	GridStore.prototype.pipe = function(destination, options) {
	  var self = this;
	  // Open the gridstore
	  this.open(function(err, result) {
	    if(err) _errorRead(self, err);
	    if(!self.readable) return;
	    // Set up the pipe
	    self._pipe(destination, options);
	    // Emit the stream is open
	    self.emit('open');
	    // Read from the stream
	    _read(self);
	  });
	  return destination;
	}
	
	/**
	 *  Internal module methods
	 *  @ignore
	 */
	var _read = function _read(self) {
	  if (!self.readable || self.paused || self.reading) {
	    return;
	  }
	
	  self.reading = true;
	  var stream = self._stream = self.stream();
	  stream.paused = self.paused;
	
	  stream.on('data', function (data) {
	    if (self._decoder) {
	      var str = self._decoder.write(data);
	      if (str.length) self.emit('data', str);
	    } else {
	      self.emit('data', data);
	    }
	  });
	
	  stream.on('end', function (data) {
	    self.emit('end', data);
	  });
	
	  stream.on('error', function (data) {
	    _errorRead(self, data);
	  });
	
	  stream.on('close', function (data) {
	    self.emit('close', data);
	  });
	
	  self.pause = function () {
	    // native doesn't always pause.
	    // bypass its pause() method to hack it
	    self.paused = stream.paused = true;
	  }
	
	  self.resume = function () {
	    if(!self.paused) return;
	
	    self.paused = false;
	    stream.resume();
	    self.readable = stream.readable;
	  }
	
	  self.destroy = function () {
	    self.readable = false;
	    stream.destroy();
	  }
	}
	
	/**
	 * pause
	 * @ignore
	 */
	GridStore.prototype.pause = function pause () {
	  // Overridden when the GridStore opens.
	  this.paused = true;
	}
	
	/**
	 * resume
	 * @ignore
	 */
	GridStore.prototype.resume = function resume () {
	  // Overridden when the GridStore opens.
	  this.paused = false;
	}
	
	/**
	 *  Internal module methods
	 *  @ignore
	 */
	var _flush = function _flush(self, _force) {
	  if (!self._opened) return;
	  if (!_force && self._flushing) return;
	  self._flushing = true;
	
	  // write the entire q to gridfs
	  if (!self._q.length) {
	    self._flushing = false;
	    self.emit('drain');
	
	    if(self._destroying) {
	      self.destroy();
	    }
	    return;
	  }
	
	  self.write(self._q.shift(), function (err, store) {
	    if (err) return _error(self, err);
	    self.emit('progress', store.position);
	    _flush(self, true);
	  });
	}
	
	var _openStream = function _openStream (self) {
	  if(self._opening == true) return;
	  self._opening = true;
	
	  // Open the store
	  self.open(function (err, gridstore) {
	    if (err) return _error(self, err);
	    self._opened = true;
	    self.emit('open');
	    _flush(self);
	  });
	}
	
	var _error = function _error(self, err) {
	  self.destroy();
	  self.emit('error', err);
	}
	
	var _errorRead = function _errorRead (self, err) {
	  self.readable = false;
	  self.emit('error', err);
	}
	
	/**
	 * @ignore
	 */
	var _hasWriteConcern = function(errorOptions) {
	  return errorOptions == true
	    || errorOptions.w > 0
	    || errorOptions.w == 'majority'
	    || errorOptions.j == true
	    || errorOptions.journal == true
	    || errorOptions.fsync == true
	}
	
	/**
	 * @ignore
	 */
	var _setWriteConcernHash = function(options) {
	  var finalOptions = {};
	  if(options.w != null) finalOptions.w = options.w;
	  if(options.journal == true) finalOptions.j = options.journal;
	  if(options.j == true) finalOptions.j = options.j;
	  if(options.fsync == true) finalOptions.fsync = options.fsync;
	  if(options.wtimeout != null) finalOptions.wtimeout = options.wtimeout;
	  return finalOptions;
	}
	
	/**
	 * @ignore
	 */
	var _getWriteConcern = function(self, options) {
	  // Final options
	  var finalOptions = {w:1};
	  options = options || {};
	
	  // Local options verification
	  if(options.w != null || typeof options.j == 'boolean' || typeof options.journal == 'boolean' || typeof options.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(options);
	  } else if(options.safe != null && typeof options.safe == 'object') {
	    finalOptions = _setWriteConcernHash(options.safe);
	  } else if(typeof options.safe == "boolean") {
	    finalOptions = {w: (options.safe ? 1 : 0)};
	  } else if(self.options.w != null || typeof self.options.j == 'boolean' || typeof self.options.journal == 'boolean' || typeof self.options.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(self.options);
	  } else if(self.safe.w != null || typeof self.safe.j == 'boolean' || typeof self.safe.journal == 'boolean' || typeof self.safe.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(self.safe);
	  } else if(typeof self.safe == "boolean") {
	    finalOptions = {w: (self.safe ? 1 : 0)};
	  }
	
	  // Ensure we don't have an invalid combination of write concerns
	  if(finalOptions.w < 1
	    && (finalOptions.journal == true || finalOptions.j == true || finalOptions.fsync == true)) throw new Error("No acknowledgement using w < 1 cannot be combined with journal:true or fsync:true");
	
	  // Return the options
	  return finalOptions;
	}
	
	/**
	 * @ignore
	 * @api private
	 */
	exports.GridStore = GridStore;


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Stream = __webpack_require__(295).Stream,
	  timers = __webpack_require__(258),
	  util = __webpack_require__(282);
	
	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(207).processor();
	
	/**
	 * ReadStream
	 *
	 * Returns a stream interface for the **file**.
	 *
	 * Events
	 *  - **data** {function(item) {}} the data event triggers when a document is ready.
	 *  - **end** {function() {}} the end event triggers when there is no more documents available.
	 *  - **close** {function() {}} the close event triggers when the stream is closed.
	 *  - **error** {function(err) {}} the error event triggers if an error happens.
	 *
	 * @class Represents a GridFS File Stream.
	 * @param {Boolean} autoclose automatically close file when the stream reaches the end.
	 * @param {GridStore} cursor a cursor object that the stream wraps.
	 * @return {ReadStream}
	 */
	function ReadStream(autoclose, gstore) {
	  if (!(this instanceof ReadStream)) return new ReadStream(autoclose, gstore);
	  Stream.call(this);
	
	  this.autoclose = !!autoclose;
	  this.gstore = gstore;
	
	  this.finalLength = gstore.length - gstore.position;
	  this.completedLength = 0;
	  this.currentChunkNumber = gstore.currentChunk.chunkNumber;
	
	  this.paused = false;
	  this.readable = true;
	  this.pendingChunk = null;
	  this.executing = false;  
	  this.destroyed = false;
	
	  // Calculate the number of chunks
	  this.numberOfChunks = Math.ceil(gstore.length/gstore.chunkSize);
	
	  // This seek start position inside the current chunk
	  this.seekStartPosition = gstore.position - (this.currentChunkNumber * gstore.chunkSize);
	  
	  var self = this;
	  processor(function() {
	    self._execute();
	  });
	};
	
	/**
	 * Inherit from Stream
	 * @ignore
	 * @api private
	 */
	ReadStream.prototype.__proto__ = Stream.prototype;
	
	/**
	 * Flag stating whether or not this stream is readable.
	 */
	ReadStream.prototype.readable;
	
	/**
	 * Flag stating whether or not this stream is paused.
	 */
	ReadStream.prototype.paused;
	
	/**
	 * @ignore
	 * @api private
	 */
	ReadStream.prototype._execute = function() {
	  if(this.paused === true || this.readable === false) {
	    return;
	  }
	
	  var gstore = this.gstore;
	  var self = this;
	  // Set that we are executing
	  this.executing = true;
	
	  var last = false;
	  var toRead = 0;
	
	  if(gstore.currentChunk.chunkNumber >= (this.numberOfChunks - 1)) {
	    self.executing = false;    
	    last = true;    
	  }
	
	  // Data setup
	  var data = null;
	
	  // Read a slice (with seek set if none)
	  if(this.seekStartPosition > 0 && (gstore.currentChunk.length() - this.seekStartPosition) > 0) {
	    data = gstore.currentChunk.readSlice(gstore.currentChunk.length() - this.seekStartPosition);
	    this.seekStartPosition = 0;
	  } else {
	    data = gstore.currentChunk.readSlice(gstore.currentChunk.length());
	  }
	
	  var processNext = function() {
	    if(last === true) {
	      self.readable = false;
	      self.emit("end");
	      
	      if(self.autoclose === true) {
	        if(gstore.mode[0] == "w") {
	          gstore.close(function(err, doc) {
	            if (err) {
	              self.emit("error", err);
	              return;
	            }
	            self.readable = false;  
	            self.destroyed = true;        
	            self.emit("close", doc);
	          });
	        } else {
	          self.readable = false;
	          self.destroyed = true;        
	          self.emit("close");
	        }
	      }
	    } else {
	      gstore._nthChunk(gstore.currentChunk.chunkNumber + 1, function(err, chunk) {
	        if(err) {
	          self.readable = false;
	          if(self.listeners("error").length > 0)
	            self.emit("error", err);
	          self.executing = false;
	          return;
	        }
	
	        self.pendingChunk = chunk;
	        if(self.paused === true) {
	          self.executing = false;
	          return;
	        }
	
	        gstore.currentChunk = self.pendingChunk;
	        self._execute();        
	      });
	    }    
	  }
	
	  // Return the data
	  if(data != null && gstore.currentChunk.chunkNumber == self.currentChunkNumber) {
	    self.currentChunkNumber = self.currentChunkNumber + 1;
	    self.completedLength += data.length;
	    self.pendingChunk = null;
	    // Send the data
	    process.nextTick(function() {
	      self.emit("data", data); 
	      processNext();           
	    })
	  } else {
	    processNext();
	  }
	};
	
	/**
	 * Pauses this stream, then no farther events will be fired.
	 *
	 * @ignore
	 * @api public
	 */
	ReadStream.prototype.pause = function() {
	  if(!this.executing) {
	    this.paused = true;    
	  }
	};
	
	/**
	 * Destroys the stream, then no farther events will be fired.
	 *
	 * @ignore
	 * @api public
	 */
	ReadStream.prototype.destroy = function() {
	  if(this.destroyed) return;
	  this.destroyed = true;
	  this.readable = false;
	  // Emit close event
	  this.emit("close");
	};
	
	/**
	 * Resumes this stream.
	 *
	 * @ignore
	 * @api public
	 */
	ReadStream.prototype.resume = function() {
	  if(this.paused === false || !this.readable) {
	    return;
	  }
	    
	  this.paused = false;
	  var self = this;
	  processor(function() {
	    self._execute();
	  });
	};
	
	exports.ReadStream = ReadStream;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Db = __webpack_require__(199).Db
	  , Server = __webpack_require__(194).Server
	  , Mongos = __webpack_require__(186).Mongos
	  , ReplSet = __webpack_require__(190).ReplSet
	  , ReadPreference = __webpack_require__(187).ReadPreference
	  , inherits = __webpack_require__(282).inherits
	  , EventEmitter = __webpack_require__(298).EventEmitter
	  , parse = __webpack_require__(196).parse;
	
	/**
	 * Create a new MongoClient instance.
	 *
	 * Options
	 *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
	 *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
	 *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
	 *  - **j**, (Boolean, default:false) write waits for journal sync before returning
	 *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 *  - **native_parser** {Boolean, default:false}, use c++ bson parser.
	 *  - **forceServerObjectId** {Boolean, default:false}, force server to create _id fields instead of client.
	 *  - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.
	 *  - **serializeFunctions** {Boolean, default:false}, serialize functions.
	 *  - **raw** {Boolean, default:false}, peform operations using raw bson buffers.
	 *  - **recordQueryStats** {Boolean, default:false}, record query statistics during execution.
	 *  - **retryMiliSeconds** {Number, default:5000}, number of miliseconds between retries.
	 *  - **numberOfRetries** {Number, default:5}, number of retries off connection.
	 *  - **bufferMaxEntries** {Boolean, default: -1}, sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited
	 *
	 * @class Represents a MongoClient
	 * @param {Object} serverConfig server config object.
	 * @param {Object} [options] additional options for the collection.
	 */
	function MongoClient(serverConfig, options) {
	  if(serverConfig != null) {
	    options = options ? options : {};
	    // If no write concern is set set the default to w:1
	    if('w' in options === false) {
	      options.w = 1;
	    }
	    
	    // The internal db instance we are wrapping
	    this._db = new Db('test', serverConfig, options);    
	  }
	}
	
	/**
	 * @ignore
	 */
	inherits(MongoClient, EventEmitter);
	
	/**
	 * Connect to MongoDB using a url as documented at
	 *
	 *  docs.mongodb.org/manual/reference/connection-string/
	 *
	 * Options
	 *  - **uri_decode_auth** {Boolean, default:false} uri decode the user name and password for authentication
	 *  - **db** {Object, default: null} a hash off options to set on the db object, see **Db constructor**
	 *  - **server** {Object, default: null} a hash off options to set on the server objects, see **Server** constructor**
	 *  - **replSet** {Object, default: null} a hash off options to set on the replSet object, see **ReplSet** constructor**
	 *  - **mongos** {Object, default: null} a hash off options to set on the mongos object, see **Mongos** constructor**
	 *
	 * @param {String} url connection url for MongoDB.
	 * @param {Object} [options] optional options for insert command
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the initialized db object or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	MongoClient.prototype.connect = function(url, options, callback) {
	  var self = this;
	
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }
	
	  MongoClient.connect(url, options, function(err, db) {
	    if(err) return callback(err, db);
	    // Store internal db instance reference
	    self._db = db;
	    // Emit open and perform callback
	    self.emit("open", err, db);
	    callback(err, db);
	  });
	}
	
	/**
	 * Initialize the database connection.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the connected mongoclient or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	MongoClient.prototype.open = function(callback) {
	  // Self reference
	  var self = this;
	  // Open the db
	  this._db.open(function(err, db) {
	    if(err) return callback(err, null);
	    // Emit open event
	    self.emit("open", err, db);
	    // Callback
	    callback(null, self);
	  })
	}
	
	/**
	 * Close the current db connection, including all the child db instances. Emits close event and calls optional callback.
	 *
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the close method or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	MongoClient.prototype.close = function(callback) {
	  this._db.close(callback);
	}
	
	/**
	 * Create a new Db instance sharing the current socket connections.
	 *
	 * @param {String} dbName the name of the database we want to use.
	 * @return {Db} a db instance using the new database.
	 * @api public
	 */
	MongoClient.prototype.db = function(dbName) {
	  return this._db.db(dbName);
	}
	
	/**
	 * Connect to MongoDB using a url as documented at
	 *
	 *  docs.mongodb.org/manual/reference/connection-string/
	 *
	 * Options
	 *  - **uri_decode_auth** {Boolean, default:false} uri decode the user name and password for authentication
	 *  - **db** {Object, default: null} a hash off options to set on the db object, see **Db constructor**
	 *  - **server** {Object, default: null} a hash off options to set on the server objects, see **Server** constructor**
	 *  - **replSet** {Object, default: null} a hash off options to set on the replSet object, see **ReplSet** constructor**
	 *  - **mongos** {Object, default: null} a hash off options to set on the mongos object, see **Mongos** constructor**
	 *
	 * @param {String} url connection url for MongoDB.
	 * @param {Object} [options] optional options for insert command
	 * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the initialized db object or null if an error occured.
	 * @return {null}
	 * @api public
	 */
	MongoClient.connect = function(url, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = typeof args[args.length - 1] == 'function' ? args.pop() : null;
	  options = args.length ? args.shift() : null;
	  options = options || {};
	
	  // Set default empty server options  
	  var serverOptions = options.server || {};
	  var mongosOptions = options.mongos || {};
	  var replSetServersOptions = options.replSet || options.replSetServers || {};
	  var dbOptions = options.db || {};
	
	  // If callback is null throw an exception
	  if(callback == null) 
	    throw new Error("no callback function provided");
	
	  // Parse the string
	  var object = parse(url, options);
	
	  // Merge in any options for db in options object
	  if(dbOptions) {
	    for(var name in dbOptions) object.db_options[name] = dbOptions[name];
	  }
	
	  // Added the url to the options
	  object.db_options.url = url;
	
	  // Merge in any options for server in options object
	  if(serverOptions) {
	    for(var name in serverOptions) object.server_options[name] = serverOptions[name];
	  }
	
	  // Merge in any replicaset server options
	  if(replSetServersOptions) {
	    for(var name in replSetServersOptions) object.rs_options[name] = replSetServersOptions[name];    
	  }
	
	  // Merge in any replicaset server options
	  if(mongosOptions) {
	    for(var name in mongosOptions) object.mongos_options[name] = mongosOptions[name];    
	  }
	
	  // We need to ensure that the list of servers are only either direct members or mongos
	  // they cannot be a mix of monogs and mongod's
	  var totalNumberOfServers = object.servers.length;
	  var totalNumberOfMongosServers = 0;
	  var totalNumberOfMongodServers = 0;
	  var serverConfig = null;
	  var errorServers = {};
	
	  // Failure modes
	  if(object.servers.length == 0) throw new Error("connection string must contain at least one seed host");
	
	  // If we have no db setting for the native parser try to set the c++ one first
	  object.db_options.native_parser = _setNativeParser(object.db_options);
	  // If no auto_reconnect is set, set it to true as default for single servers
	  if(typeof object.server_options.auto_reconnect != 'boolean') {
	    object.server_options.auto_reconnect = true;
	  }
	
	  // Establish the correct socketTimeout
	  var connectTimeoutMS = 30000;
	  var socketTimeoutMS = 0;
	
	  // We have a server connection timeout setting
	  if(object.server_options && object.server_options.socketOptions && object.server_options.socketOptions.connectTimeoutMS) {
	    connectTimeoutMS = object.server_options.socketOptions.connectTimeoutMS;
	  }
	
	  // We have a rs options set for connection timeout, override any server ones
	  if(object.rs_options && object.rs_options.socketOptions && object.rs_options.socketOptions.connectTimeoutMS) {
	    connectTimeoutMS = object.rs_options.socketOptions.connectTimeoutMS;
	  }
	
	  // If we have no socket settings set the default values
	  if(object.rs_options.socketOptions.connectTimeoutMS == null) {
	    object.rs_options.socketOptions.connectTimeoutMS = connectTimeoutMS;
	  }
	
	  if(object.rs_options.socketOptions.socketTimeoutMS == null) {
	    object.rs_options.socketOptions.socketTimeoutMS = socketTimeoutMS;
	  }
	
	  if(object.server_options.socketOptions.connectTimeoutMS == null) {
	    object.server_options.socketOptions.connectTimeoutMS = connectTimeoutMS;
	  }
	
	  if(object.server_options.socketOptions.socketTimeoutMS == null) {
	    object.server_options.socketOptions.socketTimeoutMS = socketTimeoutMS;
	  }
	
	  // If we have more than a server, it could be replicaset or mongos list
	  // need to verify that it's one or the other and fail if it's a mix
	  // Connect to all servers and run ismaster
	  for(var i = 0; i < object.servers.length; i++) {
	    // Set up socket options
	    var _server_options = {
	        poolSize:1
	      , socketOptions: {
	          connectTimeoutMS: connectTimeoutMS 
	        , socketTimeoutMS: socketTimeoutMS
	      }
	      , auto_reconnect:false};
	
	    // Ensure we have ssl setup for the servers
	    if(object.rs_options.ssl) {
	      _server_options.ssl = object.rs_options.ssl;
	      _server_options.sslValidate = object.rs_options.sslValidate;
	      _server_options.sslCA = object.rs_options.sslCA;
	      _server_options.sslCert = object.rs_options.sslCert;
	      _server_options.sslKey = object.rs_options.sslKey;
	      _server_options.sslPass = object.rs_options.sslPass;
	    } else if(object.server_options.ssl) {
	      _server_options.ssl = object.server_options.ssl;
	      _server_options.sslValidate = object.server_options.sslValidate;
	      _server_options.sslCA = object.server_options.sslCA;
	      _server_options.sslCert = object.server_options.sslCert;
	      _server_options.sslKey = object.server_options.sslKey;
	      _server_options.sslPass = object.server_options.sslPass;
	    }
	
	    // Set up the Server object
	    var _server = object.servers[i].domain_socket 
	        ? new Server(object.servers[i].domain_socket, _server_options)
	        : new Server(object.servers[i].host, object.servers[i].port, _server_options);
	
	    var connectFunction = function(__server) { 
	      // Attempt connect
	      new Db(object.dbName, __server, {w:1, native_parser:false}).open(function(err, db) {
	        // Update number of servers
	        totalNumberOfServers = totalNumberOfServers - 1;          
	        // If no error do the correct checks
	        if(!err) {
	          // Close the connection
	          db.close(true);
	          var isMasterDoc = db.serverConfig.isMasterDoc;
	          // Check what type of server we have
	          if(isMasterDoc.setName) totalNumberOfMongodServers++;
	          if(isMasterDoc.msg && isMasterDoc.msg == "isdbgrid") totalNumberOfMongosServers++;
	        } else {
	          errorServers[__server.host + ":" + __server.port] = __server;
	        }
	
	        if(totalNumberOfServers == 0) {
	          // If we have a mix of mongod and mongos, throw an error
	          if(totalNumberOfMongosServers > 0 && totalNumberOfMongodServers > 0) {
	            return process.nextTick(function() {
	              try {
	                callback(new Error("cannot combine a list of replicaset seeds and mongos seeds"));
	              } catch (err) {
	                if(db) db.close();
	                throw err
	              }              
	            })
	          }
	          
	          if(totalNumberOfMongodServers == 0 && object.servers.length == 1) {
	            var obj = object.servers[0];
	            serverConfig = obj.domain_socket ? 
	                new Server(obj.domain_socket, object.server_options)
	              : new Server(obj.host, obj.port, object.server_options);            
	          } else if(totalNumberOfMongodServers > 0 || totalNumberOfMongosServers > 0) {
	            var finalServers = object.servers
	              .filter(function(serverObj) {
	                return errorServers[serverObj.host + ":" + serverObj.port] == null;
	              })
	              .map(function(serverObj) {
	                  return new Server(serverObj.host, serverObj.port, object.server_options);
	              });
	            // Clean out any error servers
	            errorServers = {};
	            // Set up the final configuration
	            if(totalNumberOfMongodServers > 0) {
	              serverConfig = new ReplSet(finalServers, object.rs_options);                
	            } else {
	              serverConfig = new Mongos(finalServers, object.mongos_options);                         
	            }
	          }
	
	          if(serverConfig == null) {
	            return process.nextTick(function() {
	              try {
	                callback(new Error("Could not locate any valid servers in initial seed list"));
	              } catch (err) {
	                if(db) db.close();
	                throw err
	              }
	            });
	          }
	          // Ensure no firing off open event before we are ready
	          serverConfig.emitOpen = false;
	          // Set up all options etc and connect to the database
	          _finishConnecting(serverConfig, object, options, callback)
	        }
	      });        
	    }
	
	    // Wrap the context of the call
	    connectFunction(_server);    
	  }    
	}
	
	var _setNativeParser = function(db_options) {
	  if(typeof db_options.native_parser == 'boolean') return db_options.native_parser;
	
	  try {
	    __webpack_require__(150).BSONNative.BSON;
	    return true;
	  } catch(err) {
	    return false;
	  }
	}
	
	var _finishConnecting = function(serverConfig, object, options, callback) {
	  // Safe settings
	  var safe = {};
	  // Build the safe parameter if needed
	  if(object.db_options.journal) safe.j = object.db_options.journal;
	  if(object.db_options.w) safe.w = object.db_options.w;
	  if(object.db_options.fsync) safe.fsync = object.db_options.fsync;
	  if(object.db_options.wtimeoutMS) safe.wtimeout = object.db_options.wtimeoutMS;
	
	  // If we have a read Preference set
	  if(object.db_options.read_preference) {
	    var readPreference = new ReadPreference(object.db_options.read_preference);
	    // If we have the tags set up
	    if(object.db_options.read_preference_tags)
	      readPreference = new ReadPreference(object.db_options.read_preference, object.db_options.read_preference_tags);
	    // Add the read preference
	    object.db_options.readPreference = readPreference;
	  }
	
	  // No safe mode if no keys
	  if(Object.keys(safe).length == 0) safe = false;
	
	  // Add the safe object
	  object.db_options.safe = safe;
	
	  // Get the socketTimeoutMS
	  var socketTimeoutMS = object.server_options.socketOptions.socketTimeoutMS || 0;
	  var connectTimeoutMS = object.server_options.socketOptions.connectTimeoutMS || 30000;
	
	  // If we have a replset, override with replicaset socket timeout option if available
	  if(serverConfig instanceof ReplSet) {
	    socketTimeoutMS = object.rs_options.socketOptions.socketTimeoutMS || socketTimeoutMS;
	  }
	
	  //
	  // Set socketTimeout to same as connectionTimeout to ensure we don't block on connect and auth
	  // This is a workaround for pre 2.6 servers where auth can hang when indexes are build on secondaries
	  serverConfig.setSocketOptions({socketTimeoutMS: connectTimeoutMS, connectTimeoutMS: connectTimeoutMS});
	
	  // Set up the db options
	  var db = new Db(object.dbName, serverConfig, object.db_options);
	  // Open the db
	  db.open(function(err, db){
	    if(err) {
	      return process.nextTick(function() {
	        try {
	          callback(err, null);
	        } catch (err) {
	          if(db) db.close();
	          throw err
	        }
	      });
	    }
	
	    //
	    // Set socketTimeout to same as connectionTimeout to ensure we don't block on connect and auth
	    // This is a workaround for pre 2.6 servers where auth can hang when indexes are build on secondaries
	    serverConfig.setSocketOptions({socketTimeoutMS: connectTimeoutMS, connectTimeoutMS: connectTimeoutMS});
	
	    // Set the provided write concern or fall back to w:1 as default
	    if(db.options !== null && !db.options.safe && !db.options.journal 
	      && !db.options.w && !db.options.fsync && typeof db.options.w != 'number'
	      && (db.options.safe == false && object.db_options.url.indexOf("safe=") == -1)) {
	        db.options.w = 1;
	    }
	
	    if(err == null && object.auth){
	      // What db to authenticate against
	      var authentication_db = db;
	      if(object.db_options && object.db_options.authSource) {
	        authentication_db = db.db(object.db_options.authSource);
	      }
	
	      // Build options object
	      var options = {};
	      if(object.db_options.authMechanism) options.authMechanism = object.db_options.authMechanism;
	      if(object.db_options.gssapiServiceName) options.gssapiServiceName = object.db_options.gssapiServiceName;
	
	      // Authenticate
	      authentication_db.authenticate(object.auth.user, object.auth.password, options, function(err, success){
	        // Reset the socket timeout
	        serverConfig.setSocketOptions({socketTimeoutMS: socketTimeoutMS, connectTimeoutMS: connectTimeoutMS});
	
	        // Handle the results
	        if(success){
	          process.nextTick(function() {
	            try {
	              callback(null, db);            
	            } catch (err) {
	              if(db) db.close();
	              throw err
	            }
	          });
	        } else {
	          if(db) db.close();
	          process.nextTick(function() {
	            try {
	              callback(err ? err : new Error('Could not authenticate user ' + object.auth[0]), null);
	            } catch (err) {
	              if(db) db.close();
	              throw err
	            }
	          });
	        }
	      });
	    } else {      
	      // Reset the socket timeout
	      serverConfig.setSocketOptions({socketTimeoutMS: socketTimeoutMS, connectTimeoutMS: connectTimeoutMS});
	
	      // Return connection      
	      process.nextTick(function() {
	        try {
	          callback(err, db);            
	        } catch (err) {
	          if(db) db.close();
	          throw err
	        }
	      })
	    }
	  });
	}
	
	exports.MongoClient = MongoClient;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	var Long = __webpack_require__(150).Long
	  , timers = __webpack_require__(258);
	
	// Set processor, setImmediate if 0.10 otherwise nextTick
	var processor = __webpack_require__(207).processor();
	
	/**
	  Reply message from mongo db
	**/
	var MongoReply = exports.MongoReply = function() {
	  this.documents = [];
	  this.index = 0;
	};
	
	MongoReply.prototype.parseHeader = function(binary_reply, bson) {
	  // Unpack the standard header first
	  this.messageLength = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  this.index = this.index + 4;
	  // Fetch the request id for this reply
	  this.requestId = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  this.index = this.index + 4;
	  // Fetch the id of the request that triggered the response
	  this.responseTo = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  // Skip op-code field
	  this.index = this.index + 4 + 4;
	  // Unpack the reply message
	  this.responseFlag = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  this.index = this.index + 4;
	  // Unpack the cursor id (a 64 bit long integer)
	  var low_bits = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  this.index = this.index + 4;
	  var high_bits = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  this.index = this.index + 4;
	  this.cursorId = new Long(low_bits, high_bits);
	  // Unpack the starting from
	  this.startingFrom = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  this.index = this.index + 4;
	  // Unpack the number of objects returned
	  this.numberReturned = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	  this.index = this.index + 4;
	}
	
	MongoReply.prototype.parseBody = function(binary_reply, bson, raw, callback) {
	  raw = raw == null ? false : raw;
	
	  try {
	    // Let's unpack all the bson documents, deserialize them and store them
	    for(var object_index = 0; object_index < this.numberReturned; object_index++) {
	      var _options = {promoteLongs: bson.promoteLongs};
	      
	      // Read the size of the bson object
	      var bsonObjectSize = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;
	      
	      // If we are storing the raw responses to pipe straight through
	      if(raw) {
	        // Deserialize the object and add to the documents array
	        this.documents.push(binary_reply.slice(this.index, this.index + bsonObjectSize));
	      } else {
	        // Deserialize the object and add to the documents array
	        this.documents.push(bson.deserialize(binary_reply.slice(this.index, this.index + bsonObjectSize), _options));
	      }
	      
	      // Adjust binary index to point to next block of binary bson data
	      this.index = this.index + bsonObjectSize;
	    }
	    
	    // No error return
	    callback(null);
	  } catch(err) {
	    return callback(err);
	  }
	}
	
	MongoReply.prototype.is_error = function(){
	  if(this.documents.length == 1) {
	    return this.documents[0].ok == 1 ? false : true;
	  }
	  return false;
	};
	
	MongoReply.prototype.error_message = function() {
	  return this.documents.length == 1 && this.documents[0].ok == 1 ? '' : this.documents[0].errmsg;
	};

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var Cursor = __webpack_require__(197).Cursor
	  , Readable = __webpack_require__(295).Readable
	  , utils = __webpack_require__(207)
	  , inherits = __webpack_require__(282).inherits;
	
	var Scope = function(collection, _selector, _fields, _scope_options) {
	  var self = this;
	
	  // Ensure we have at least an empty cursor options object
	  _scope_options = _scope_options || {};
	  var _write_concern = _scope_options.write_concern || null;
	
	  // Ensure default read preference
	  // if(!_scope_options.readPreference) _scope_options.readPreference = 'primary';
	
	  // Set up the cursor
	  var _cursor = new Cursor(
	        collection.db, collection, _selector
	      , _fields, _scope_options
	    );
	
	  // Write branch options
	  var writeOptions = {
	    insert: function(documents, callback) {
	      // Merge together options
	      var options = _write_concern || {};
	      // Execute insert
	      collection.insert(documents, options, callback);
	    },
	
	    save: function(document, callback) {
	      // Merge together options
	      var save_options = _write_concern || {};
	      // Execute save
	      collection.save(document, save_options, function(err, result) {
	        if(typeof result == 'number' && result == 1) {
	          return callback(null, document);
	        }
	
	        return callback(null, document);
	      });
	    },
	
	    find: function(selector) {
	      _selector = selector;
	      return writeOptions;
	    },
	
	    //
	    // Update is implicit multiple document update
	    update: function(operations, callback) {
	      // Merge together options
	      var update_options = _write_concern || {};
	
	      // Set up options, multi is default operation
	      update_options.multi = _scope_options.multi ? _scope_options.multi : true;
	      if(_scope_options.upsert) update_options.upsert = _scope_options.upsert;
	
	      // Execute options
	      collection.update(_selector, operations, update_options, function(err, result, obj) {
	        callback(err, obj);
	      });
	    },
	  }
	
	  // Set write concern
	  this.withWriteConcern = function(write_concern) {
	    // Save the current write concern to the Scope
	    _scope_options.write_concern = write_concern;
	    _write_concern = write_concern;
	    // Only allow legal options
	    return writeOptions;
	  }
	
	  // Start find
	  this.find = function(selector, options) {
	    // Save the current selector
	    _selector = selector;
	    // Set the cursor
	    _cursor.selector = selector;
	    // Return only legal read options
	    return Cursor.cloneWithOptions(_cursor, _scope_options);
	  }
	}
	
	exports.Scope = Scope;


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {var timers = __webpack_require__(258);
	
	/**
	 * Sort functions, Normalize and prepare sort parameters
	 */
	var formatSortValue = exports.formatSortValue = function(sortDirection) {
	  var value = ("" + sortDirection).toLowerCase();
	
	  switch (value) {
	    case 'ascending':
	    case 'asc':
	    case '1':
	      return 1;
	    case 'descending':
	    case 'desc':
	    case '-1':
	      return -1;
	    default:
	      throw new Error("Illegal sort clause, must be of the form "
	                    + "[['field1', '(ascending|descending)'], "
	                    + "['field2', '(ascending|descending)']]");
	  }
	};
	
	var formattedOrderClause = exports.formattedOrderClause = function(sortValue) {
	  var orderBy = {};
	  if(sortValue == null) return null;
	  if (Array.isArray(sortValue)) {
	    if(sortValue.length === 0) {
	      return null;
	    }
	
	    for(var i = 0; i < sortValue.length; i++) {
	      if(sortValue[i].constructor == String) {
	        orderBy[sortValue[i]] = 1;
	      } else {
	        orderBy[sortValue[i][0]] = formatSortValue(sortValue[i][1]);
	      }      
	    }
	  } else if(sortValue != null && typeof sortValue == 'object') {
	    orderBy = sortValue;
	  } else if (typeof sortValue == 'string') {
	    orderBy[sortValue] = 1;
	  } else {
	    throw new Error("Illegal sort clause, must be of the form " +
	      "[['field1', '(ascending|descending)'], ['field2', '(ascending|descending)']]");
	  }
	
	  return orderBy;
	};
	
	exports.encodeInt = function(value) {
	  var buffer = new Buffer(4);
	  buffer[3] = (value >> 24) & 0xff;      
	  buffer[2] = (value >> 16) & 0xff;
	  buffer[1] = (value >> 8) & 0xff;
	  buffer[0] = value & 0xff;
	  return buffer;
	}
	
	exports.encodeIntInPlace = function(value, buffer, index) {
	  buffer[index + 3] = (value >> 24) & 0xff;			
		buffer[index + 2] = (value >> 16) & 0xff;
		buffer[index + 1] = (value >> 8) & 0xff;
		buffer[index] = value & 0xff;
	}
	
	exports.encodeCString = function(string) {
	  var buf = new Buffer(string, 'utf8');
	  return [buf, new Buffer([0])];
	}
	
	exports.decodeUInt32 = function(array, index) {
	  return array[index] | array[index + 1] << 8 | array[index + 2] << 16 | array[index + 3] << 24;
	}
	
	// Decode the int
	exports.decodeUInt8 = function(array, index) {
	  return array[index];
	}
	
	/**
	 * Context insensitive type checks
	 */
	
	var toString = Object.prototype.toString;
	
	var isObject = exports.isObject = function (arg) {
	  return '[object Object]' == toString.call(arg)
	}
	
	exports.isArray = function (arg) {
	  return Array.isArray(arg) ||
	    'object' == typeof arg && '[object Array]' == toString.call(arg)
	}
	
	exports.isDate = function (arg) {
	  return 'object' == typeof arg && '[object Date]' == toString.call(arg)
	}
	
	exports.isRegExp = function (arg) {
	  return 'object' == typeof arg && '[object RegExp]' == toString.call(arg)
	}
	
	/**
	 * Wrap a Mongo error document in an Error instance
	 * @ignore
	 * @api private
	 */
	var toError = function(error) {
	  if (error instanceof Error) return error;
	
	  var msg = error.err || error.errmsg || error.errMessage || error.$err || error;
	  var e = new Error(msg);
	  e.name = 'MongoError';
	
	  // Get all object keys
	  var keys = typeof error == 'object'
	    ? Object.keys(error)
	    : [];
	
	  for(var i = 0; i < keys.length; i++) {
	    e[keys[i]] = error[keys[i]];
	  }
	
	  return e;
	}
	exports.toError = toError;
	
	/**
	 * Convert a single level object to an array
	 * @ignore
	 * @api private
	 */
	exports.objectToArray = function(object) {
	  var list = [];
	
	  for(var name in object) {
	    list.push(object[name])
	  }
	
	  return list;
	}
	
	/**
	 * Handle single command document return
	 * @ignore
	 * @api private
	 */
	exports.handleSingleCommandResultReturn = function(override_value_true, override_value_false, callback) {
	  return function(err, result, connection) {
	    if(callback == null) return;
	    if(err && typeof callback == 'function') return callback(err, null);
	    if(!result || !result.documents || result.documents.length == 0)
	      if(typeof callback == 'function') return callback(toError("command failed to return results"), null)
	    if(result && result.documents[0].ok == 1) {
	      if(override_value_true) return callback(null, override_value_true)
	      if(typeof callback == 'function') return callback(null, result.documents[0]);
	    }
	
	    // Return the error from the document
	    if(typeof callback == 'function') return callback(toError(result.documents[0]), override_value_false);    
	  }
	}
	
	/**
	 * Return correct processor
	 * @ignore
	 * @api private
	 */
	exports.processor = function() {
	  // Set processor, setImmediate if 0.10 otherwise nextTick
	  process.maxTickDepth = Infinity;
	  // Only use nextTick
	  return process.nextTick;
	}
	
	/**
	 * Allow setting the socketTimeoutMS on all connections
	 * to work around issues such as secondaries blocking due to compaction
	 *
	 * @ignore
	 * @api private
	 */
	exports.setSocketTimeoutProperty = function(self, options) {
	  Object.defineProperty(self, "socketTimeoutMS", {
	      enumerable: true
	    , get: function () { return options.socketTimeoutMS; }
	    , set: function (value) { 
	      // Set the socket timeoutMS value
	      options.socketTimeoutMS = value;
	
	      // Get all the connections
	      var connections = self.allRawConnections();
	      for(var i = 0; i < connections.length; i++) {
	        connections[i].socketTimeoutMS = value;
	      }
	    }
	  });  
	}
	
	/**
	 * Determine if the server supports write commands
	 *
	 * @ignore
	 * @api private
	 */
	exports.hasWriteCommands = function(connection) {
	  return connection != null && connection.serverCapabilities != null && connection.serverCapabilities.hasWriteCommands;
	}
	
	/**
	 * Fetch server capabilities
	 *
	 * @ignore
	 * @api private
	 */
	exports.serverCapabilities = function(connection) {
	  return connection != null && connection.serverCapabilities != null && connection.serverCapabilities.hasWriteCommands;
	}
	
	/**
	 * Create index name based on field spec
	 *
	 * @ignore
	 * @api private
	 */
	exports.parseIndexOptions = function(fieldOrSpec) {
	  var fieldHash = {};
	  var indexes = [];
	  var keys;
	
	  // Get all the fields accordingly
	  if('string' == typeof fieldOrSpec) {
	    // 'type'
	    indexes.push(fieldOrSpec + '_' + 1);
	    fieldHash[fieldOrSpec] = 1;
	  } else if(Array.isArray(fieldOrSpec)) {
	    fieldOrSpec.forEach(function(f) {
	      if('string' == typeof f) {
	        // [{location:'2d'}, 'type']
	        indexes.push(f + '_' + 1);
	        fieldHash[f] = 1;
	      } else if(Array.isArray(f)) {
	        // [['location', '2d'],['type', 1]]
	        indexes.push(f[0] + '_' + (f[1] || 1));
	        fieldHash[f[0]] = f[1] || 1;
	      } else if(isObject(f)) {
	        // [{location:'2d'}, {type:1}]
	        keys = Object.keys(f);
	        keys.forEach(function(k) {
	          indexes.push(k + '_' + f[k]);
	          fieldHash[k] = f[k];
	        });
	      } else {
	        // undefined (ignore)
	      }
	    });
	  } else if(isObject(fieldOrSpec)) {
	    // {location:'2d', type:1}
	    keys = Object.keys(fieldOrSpec);
	    keys.forEach(function(key) {
	      indexes.push(key + '_' + fieldOrSpec[key]);
	      fieldHash[key] = fieldOrSpec[key];
	    });
	  }
	
	  return {
	    name: indexes.join("_"), keys: keys, fieldHash: fieldHash
	  }
	}
	
	exports.decorateCommand = function(command, options, exclude) {
	  for(var name in options) {
	    if(exclude[name] == null) command[name] = options[name];
	  }
	
	  return command;
	}
	
	exports.shallowObjectCopy = function(object) {
	  var c = {};
	  for(var n in object) c[n] = object[n];
	  return c;
	}
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer, __webpack_require__(85)))

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, setImmediate) {/*!
	 * async
	 * https://github.com/caolan/async
	 *
	 * Copyright 2010-2014 Caolan McMahon
	 * Released under the MIT license
	 */
	/*jshint onevar: false, indent:4 */
	/*global setImmediate: false, setTimeout: false, console: false */
	(function () {
	
	    var async = {};
	
	    // global on the server, window in the browser
	    var root, previous_async;
	
	    root = this;
	    if (root != null) {
	      previous_async = root.async;
	    }
	
	    async.noConflict = function () {
	        root.async = previous_async;
	        return async;
	    };
	
	    function only_once(fn) {
	        var called = false;
	        return function() {
	            if (called) throw new Error("Callback was already called.");
	            called = true;
	            fn.apply(root, arguments);
	        }
	    }
	
	    //// cross-browser compatiblity functions ////
	
	    var _toString = Object.prototype.toString;
	
	    var _isArray = Array.isArray || function (obj) {
	        return _toString.call(obj) === '[object Array]';
	    };
	
	    var _each = function (arr, iterator) {
	        if (arr.forEach) {
	            return arr.forEach(iterator);
	        }
	        for (var i = 0; i < arr.length; i += 1) {
	            iterator(arr[i], i, arr);
	        }
	    };
	
	    var _map = function (arr, iterator) {
	        if (arr.map) {
	            return arr.map(iterator);
	        }
	        var results = [];
	        _each(arr, function (x, i, a) {
	            results.push(iterator(x, i, a));
	        });
	        return results;
	    };
	
	    var _reduce = function (arr, iterator, memo) {
	        if (arr.reduce) {
	            return arr.reduce(iterator, memo);
	        }
	        _each(arr, function (x, i, a) {
	            memo = iterator(memo, x, i, a);
	        });
	        return memo;
	    };
	
	    var _keys = function (obj) {
	        if (Object.keys) {
	            return Object.keys(obj);
	        }
	        var keys = [];
	        for (var k in obj) {
	            if (obj.hasOwnProperty(k)) {
	                keys.push(k);
	            }
	        }
	        return keys;
	    };
	
	    //// exported async module functions ////
	
	    //// nextTick implementation with browser-compatible fallback ////
	    if (typeof process === 'undefined' || !(process.nextTick)) {
	        if (typeof setImmediate === 'function') {
	            async.nextTick = function (fn) {
	                // not a direct alias for IE10 compatibility
	                setImmediate(fn);
	            };
	            async.setImmediate = async.nextTick;
	        }
	        else {
	            async.nextTick = function (fn) {
	                setTimeout(fn, 0);
	            };
	            async.setImmediate = async.nextTick;
	        }
	    }
	    else {
	        async.nextTick = process.nextTick;
	        if (typeof setImmediate !== 'undefined') {
	            async.setImmediate = function (fn) {
	              // not a direct alias for IE10 compatibility
	              setImmediate(fn);
	            };
	        }
	        else {
	            async.setImmediate = async.nextTick;
	        }
	    }
	
	    async.each = function (arr, iterator, callback) {
	        callback = callback || function () {};
	        if (!arr.length) {
	            return callback();
	        }
	        var completed = 0;
	        _each(arr, function (x) {
	            iterator(x, only_once(done) );
	        });
	        function done(err) {
	          if (err) {
	              callback(err);
	              callback = function () {};
	          }
	          else {
	              completed += 1;
	              if (completed >= arr.length) {
	                  callback();
	              }
	          }
	        }
	    };
	    async.forEach = async.each;
	
	    async.eachSeries = function (arr, iterator, callback) {
	        callback = callback || function () {};
	        if (!arr.length) {
	            return callback();
	        }
	        var completed = 0;
	        var iterate = function () {
	            iterator(arr[completed], function (err) {
	                if (err) {
	                    callback(err);
	                    callback = function () {};
	                }
	                else {
	                    completed += 1;
	                    if (completed >= arr.length) {
	                        callback();
	                    }
	                    else {
	                        iterate();
	                    }
	                }
	            });
	        };
	        iterate();
	    };
	    async.forEachSeries = async.eachSeries;
	
	    async.eachLimit = function (arr, limit, iterator, callback) {
	        var fn = _eachLimit(limit);
	        fn.apply(null, [arr, iterator, callback]);
	    };
	    async.forEachLimit = async.eachLimit;
	
	    var _eachLimit = function (limit) {
	
	        return function (arr, iterator, callback) {
	            callback = callback || function () {};
	            if (!arr.length || limit <= 0) {
	                return callback();
	            }
	            var completed = 0;
	            var started = 0;
	            var running = 0;
	
	            (function replenish () {
	                if (completed >= arr.length) {
	                    return callback();
	                }
	
	                while (running < limit && started < arr.length) {
	                    started += 1;
	                    running += 1;
	                    iterator(arr[started - 1], function (err) {
	                        if (err) {
	                            callback(err);
	                            callback = function () {};
	                        }
	                        else {
	                            completed += 1;
	                            running -= 1;
	                            if (completed >= arr.length) {
	                                callback();
	                            }
	                            else {
	                                replenish();
	                            }
	                        }
	                    });
	                }
	            })();
	        };
	    };
	
	
	    var doParallel = function (fn) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            return fn.apply(null, [async.each].concat(args));
	        };
	    };
	    var doParallelLimit = function(limit, fn) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            return fn.apply(null, [_eachLimit(limit)].concat(args));
	        };
	    };
	    var doSeries = function (fn) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            return fn.apply(null, [async.eachSeries].concat(args));
	        };
	    };
	
	
	    var _asyncMap = function (eachfn, arr, iterator, callback) {
	        arr = _map(arr, function (x, i) {
	            return {index: i, value: x};
	        });
	        if (!callback) {
	            eachfn(arr, function (x, callback) {
	                iterator(x.value, function (err) {
	                    callback(err);
	                });
	            });
	        } else {
	            var results = [];
	            eachfn(arr, function (x, callback) {
	                iterator(x.value, function (err, v) {
	                    results[x.index] = v;
	                    callback(err);
	                });
	            }, function (err) {
	                callback(err, results);
	            });
	        }
	    };
	    async.map = doParallel(_asyncMap);
	    async.mapSeries = doSeries(_asyncMap);
	    async.mapLimit = function (arr, limit, iterator, callback) {
	        return _mapLimit(limit)(arr, iterator, callback);
	    };
	
	    var _mapLimit = function(limit) {
	        return doParallelLimit(limit, _asyncMap);
	    };
	
	    // reduce only has a series version, as doing reduce in parallel won't
	    // work in many situations.
	    async.reduce = function (arr, memo, iterator, callback) {
	        async.eachSeries(arr, function (x, callback) {
	            iterator(memo, x, function (err, v) {
	                memo = v;
	                callback(err);
	            });
	        }, function (err) {
	            callback(err, memo);
	        });
	    };
	    // inject alias
	    async.inject = async.reduce;
	    // foldl alias
	    async.foldl = async.reduce;
	
	    async.reduceRight = function (arr, memo, iterator, callback) {
	        var reversed = _map(arr, function (x) {
	            return x;
	        }).reverse();
	        async.reduce(reversed, memo, iterator, callback);
	    };
	    // foldr alias
	    async.foldr = async.reduceRight;
	
	    var _filter = function (eachfn, arr, iterator, callback) {
	        var results = [];
	        arr = _map(arr, function (x, i) {
	            return {index: i, value: x};
	        });
	        eachfn(arr, function (x, callback) {
	            iterator(x.value, function (v) {
	                if (v) {
	                    results.push(x);
	                }
	                callback();
	            });
	        }, function (err) {
	            callback(_map(results.sort(function (a, b) {
	                return a.index - b.index;
	            }), function (x) {
	                return x.value;
	            }));
	        });
	    };
	    async.filter = doParallel(_filter);
	    async.filterSeries = doSeries(_filter);
	    // select alias
	    async.select = async.filter;
	    async.selectSeries = async.filterSeries;
	
	    var _reject = function (eachfn, arr, iterator, callback) {
	        var results = [];
	        arr = _map(arr, function (x, i) {
	            return {index: i, value: x};
	        });
	        eachfn(arr, function (x, callback) {
	            iterator(x.value, function (v) {
	                if (!v) {
	                    results.push(x);
	                }
	                callback();
	            });
	        }, function (err) {
	            callback(_map(results.sort(function (a, b) {
	                return a.index - b.index;
	            }), function (x) {
	                return x.value;
	            }));
	        });
	    };
	    async.reject = doParallel(_reject);
	    async.rejectSeries = doSeries(_reject);
	
	    var _detect = function (eachfn, arr, iterator, main_callback) {
	        eachfn(arr, function (x, callback) {
	            iterator(x, function (result) {
	                if (result) {
	                    main_callback(x);
	                    main_callback = function () {};
	                }
	                else {
	                    callback();
	                }
	            });
	        }, function (err) {
	            main_callback();
	        });
	    };
	    async.detect = doParallel(_detect);
	    async.detectSeries = doSeries(_detect);
	
	    async.some = function (arr, iterator, main_callback) {
	        async.each(arr, function (x, callback) {
	            iterator(x, function (v) {
	                if (v) {
	                    main_callback(true);
	                    main_callback = function () {};
	                }
	                callback();
	            });
	        }, function (err) {
	            main_callback(false);
	        });
	    };
	    // any alias
	    async.any = async.some;
	
	    async.every = function (arr, iterator, main_callback) {
	        async.each(arr, function (x, callback) {
	            iterator(x, function (v) {
	                if (!v) {
	                    main_callback(false);
	                    main_callback = function () {};
	                }
	                callback();
	            });
	        }, function (err) {
	            main_callback(true);
	        });
	    };
	    // all alias
	    async.all = async.every;
	
	    async.sortBy = function (arr, iterator, callback) {
	        async.map(arr, function (x, callback) {
	            iterator(x, function (err, criteria) {
	                if (err) {
	                    callback(err);
	                }
	                else {
	                    callback(null, {value: x, criteria: criteria});
	                }
	            });
	        }, function (err, results) {
	            if (err) {
	                return callback(err);
	            }
	            else {
	                var fn = function (left, right) {
	                    var a = left.criteria, b = right.criteria;
	                    return a < b ? -1 : a > b ? 1 : 0;
	                };
	                callback(null, _map(results.sort(fn), function (x) {
	                    return x.value;
	                }));
	            }
	        });
	    };
	
	    async.auto = function (tasks, callback) {
	        callback = callback || function () {};
	        var keys = _keys(tasks);
	        var remainingTasks = keys.length
	        if (!remainingTasks) {
	            return callback();
	        }
	
	        var results = {};
	
	        var listeners = [];
	        var addListener = function (fn) {
	            listeners.unshift(fn);
	        };
	        var removeListener = function (fn) {
	            for (var i = 0; i < listeners.length; i += 1) {
	                if (listeners[i] === fn) {
	                    listeners.splice(i, 1);
	                    return;
	                }
	            }
	        };
	        var taskComplete = function () {
	            remainingTasks--
	            _each(listeners.slice(0), function (fn) {
	                fn();
	            });
	        };
	
	        addListener(function () {
	            if (!remainingTasks) {
	                var theCallback = callback;
	                // prevent final callback from calling itself if it errors
	                callback = function () {};
	
	                theCallback(null, results);
	            }
	        });
	
	        _each(keys, function (k) {
	            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
	            var taskCallback = function (err) {
	                var args = Array.prototype.slice.call(arguments, 1);
	                if (args.length <= 1) {
	                    args = args[0];
	                }
	                if (err) {
	                    var safeResults = {};
	                    _each(_keys(results), function(rkey) {
	                        safeResults[rkey] = results[rkey];
	                    });
	                    safeResults[k] = args;
	                    callback(err, safeResults);
	                    // stop subsequent errors hitting callback multiple times
	                    callback = function () {};
	                }
	                else {
	                    results[k] = args;
	                    async.setImmediate(taskComplete);
	                }
	            };
	            var requires = task.slice(0, Math.abs(task.length - 1)) || [];
	            var ready = function () {
	                return _reduce(requires, function (a, x) {
	                    return (a && results.hasOwnProperty(x));
	                }, true) && !results.hasOwnProperty(k);
	            };
	            if (ready()) {
	                task[task.length - 1](taskCallback, results);
	            }
	            else {
	                var listener = function () {
	                    if (ready()) {
	                        removeListener(listener);
	                        task[task.length - 1](taskCallback, results);
	                    }
	                };
	                addListener(listener);
	            }
	        });
	    };
	
	    async.retry = function(times, task, callback) {
	        var DEFAULT_TIMES = 5;
	        var attempts = [];
	        // Use defaults if times not passed
	        if (typeof times === 'function') {
	            callback = task;
	            task = times;
	            times = DEFAULT_TIMES;
	        }
	        // Make sure times is a number
	        times = parseInt(times, 10) || DEFAULT_TIMES;
	        var wrappedTask = function(wrappedCallback, wrappedResults) {
	            var retryAttempt = function(task, finalAttempt) {
	                return function(seriesCallback) {
	                    task(function(err, result){
	                        seriesCallback(!err || finalAttempt, {err: err, result: result});
	                    }, wrappedResults);
	                };
	            };
	            while (times) {
	                attempts.push(retryAttempt(task, !(times-=1)));
	            }
	            async.series(attempts, function(done, data){
	                data = data[data.length - 1];
	                (wrappedCallback || callback)(data.err, data.result);
	            });
	        }
	        // If a callback is passed, run this as a controll flow
	        return callback ? wrappedTask() : wrappedTask
	    };
	
	    async.waterfall = function (tasks, callback) {
	        callback = callback || function () {};
	        if (!_isArray(tasks)) {
	          var err = new Error('First argument to waterfall must be an array of functions');
	          return callback(err);
	        }
	        if (!tasks.length) {
	            return callback();
	        }
	        var wrapIterator = function (iterator) {
	            return function (err) {
	                if (err) {
	                    callback.apply(null, arguments);
	                    callback = function () {};
	                }
	                else {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    var next = iterator.next();
	                    if (next) {
	                        args.push(wrapIterator(next));
	                    }
	                    else {
	                        args.push(callback);
	                    }
	                    async.setImmediate(function () {
	                        iterator.apply(null, args);
	                    });
	                }
	            };
	        };
	        wrapIterator(async.iterator(tasks))();
	    };
	
	    var _parallel = function(eachfn, tasks, callback) {
	        callback = callback || function () {};
	        if (_isArray(tasks)) {
	            eachfn.map(tasks, function (fn, callback) {
	                if (fn) {
	                    fn(function (err) {
	                        var args = Array.prototype.slice.call(arguments, 1);
	                        if (args.length <= 1) {
	                            args = args[0];
	                        }
	                        callback.call(null, err, args);
	                    });
	                }
	            }, callback);
	        }
	        else {
	            var results = {};
	            eachfn.each(_keys(tasks), function (k, callback) {
	                tasks[k](function (err) {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    if (args.length <= 1) {
	                        args = args[0];
	                    }
	                    results[k] = args;
	                    callback(err);
	                });
	            }, function (err) {
	                callback(err, results);
	            });
	        }
	    };
	
	    async.parallel = function (tasks, callback) {
	        _parallel({ map: async.map, each: async.each }, tasks, callback);
	    };
	
	    async.parallelLimit = function(tasks, limit, callback) {
	        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);
	    };
	
	    async.series = function (tasks, callback) {
	        callback = callback || function () {};
	        if (_isArray(tasks)) {
	            async.mapSeries(tasks, function (fn, callback) {
	                if (fn) {
	                    fn(function (err) {
	                        var args = Array.prototype.slice.call(arguments, 1);
	                        if (args.length <= 1) {
	                            args = args[0];
	                        }
	                        callback.call(null, err, args);
	                    });
	                }
	            }, callback);
	        }
	        else {
	            var results = {};
	            async.eachSeries(_keys(tasks), function (k, callback) {
	                tasks[k](function (err) {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    if (args.length <= 1) {
	                        args = args[0];
	                    }
	                    results[k] = args;
	                    callback(err);
	                });
	            }, function (err) {
	                callback(err, results);
	            });
	        }
	    };
	
	    async.iterator = function (tasks) {
	        var makeCallback = function (index) {
	            var fn = function () {
	                if (tasks.length) {
	                    tasks[index].apply(null, arguments);
	                }
	                return fn.next();
	            };
	            fn.next = function () {
	                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
	            };
	            return fn;
	        };
	        return makeCallback(0);
	    };
	
	    async.apply = function (fn) {
	        var args = Array.prototype.slice.call(arguments, 1);
	        return function () {
	            return fn.apply(
	                null, args.concat(Array.prototype.slice.call(arguments))
	            );
	        };
	    };
	
	    var _concat = function (eachfn, arr, fn, callback) {
	        var r = [];
	        eachfn(arr, function (x, cb) {
	            fn(x, function (err, y) {
	                r = r.concat(y || []);
	                cb(err);
	            });
	        }, function (err) {
	            callback(err, r);
	        });
	    };
	    async.concat = doParallel(_concat);
	    async.concatSeries = doSeries(_concat);
	
	    async.whilst = function (test, iterator, callback) {
	        if (test()) {
	            iterator(function (err) {
	                if (err) {
	                    return callback(err);
	                }
	                async.whilst(test, iterator, callback);
	            });
	        }
	        else {
	            callback();
	        }
	    };
	
	    async.doWhilst = function (iterator, test, callback) {
	        iterator(function (err) {
	            if (err) {
	                return callback(err);
	            }
	            var args = Array.prototype.slice.call(arguments, 1);
	            if (test.apply(null, args)) {
	                async.doWhilst(iterator, test, callback);
	            }
	            else {
	                callback();
	            }
	        });
	    };
	
	    async.until = function (test, iterator, callback) {
	        if (!test()) {
	            iterator(function (err) {
	                if (err) {
	                    return callback(err);
	                }
	                async.until(test, iterator, callback);
	            });
	        }
	        else {
	            callback();
	        }
	    };
	
	    async.doUntil = function (iterator, test, callback) {
	        iterator(function (err) {
	            if (err) {
	                return callback(err);
	            }
	            var args = Array.prototype.slice.call(arguments, 1);
	            if (!test.apply(null, args)) {
	                async.doUntil(iterator, test, callback);
	            }
	            else {
	                callback();
	            }
	        });
	    };
	
	    async.queue = function (worker, concurrency) {
	        if (concurrency === undefined) {
	            concurrency = 1;
	        }
	        function _insert(q, data, pos, callback) {
	          if (!q.started){
	            q.started = true;
	          }
	          if (!_isArray(data)) {
	              data = [data];
	          }
	          if(data.length == 0) {
	             // call drain immediately if there are no tasks
	             return async.setImmediate(function() {
	                 if (q.drain) {
	                     q.drain();
	                 }
	             });
	          }
	          _each(data, function(task) {
	              var item = {
	                  data: task,
	                  callback: typeof callback === 'function' ? callback : null
	              };
	
	              if (pos) {
	                q.tasks.unshift(item);
	              } else {
	                q.tasks.push(item);
	              }
	
	              if (q.saturated && q.tasks.length === q.concurrency) {
	                  q.saturated();
	              }
	              async.setImmediate(q.process);
	          });
	        }
	
	        var workers = 0;
	        var q = {
	            tasks: [],
	            concurrency: concurrency,
	            saturated: null,
	            empty: null,
	            drain: null,
	            started: false,
	            paused: false,
	            push: function (data, callback) {
	              _insert(q, data, false, callback);
	            },
	            kill: function () {
	              q.drain = null;
	              q.tasks = [];
	            },
	            unshift: function (data, callback) {
	              _insert(q, data, true, callback);
	            },
	            process: function () {
	                if (!q.paused && workers < q.concurrency && q.tasks.length) {
	                    var task = q.tasks.shift();
	                    if (q.empty && q.tasks.length === 0) {
	                        q.empty();
	                    }
	                    workers += 1;
	                    var next = function () {
	                        workers -= 1;
	                        if (task.callback) {
	                            task.callback.apply(task, arguments);
	                        }
	                        if (q.drain && q.tasks.length + workers === 0) {
	                            q.drain();
	                        }
	                        q.process();
	                    };
	                    var cb = only_once(next);
	                    worker(task.data, cb);
	                }
	            },
	            length: function () {
	                return q.tasks.length;
	            },
	            running: function () {
	                return workers;
	            },
	            idle: function() {
	                return q.tasks.length + workers === 0;
	            },
	            pause: function () {
	                if (q.paused === true) { return; }
	                q.paused = true;
	                q.process();
	            },
	            resume: function () {
	                if (q.paused === false) { return; }
	                q.paused = false;
	                q.process();
	            }
	        };
	        return q;
	    };
	    
	    async.priorityQueue = function (worker, concurrency) {
	        
	        function _compareTasks(a, b){
	          return a.priority - b.priority;
	        };
	        
	        function _binarySearch(sequence, item, compare) {
	          var beg = -1,
	              end = sequence.length - 1;
	          while (beg < end) {
	            var mid = beg + ((end - beg + 1) >>> 1);
	            if (compare(item, sequence[mid]) >= 0) {
	              beg = mid;
	            } else {
	              end = mid - 1;
	            }
	          }
	          return beg;
	        }
	        
	        function _insert(q, data, priority, callback) {
	          if (!q.started){
	            q.started = true;
	          }
	          if (!_isArray(data)) {
	              data = [data];
	          }
	          if(data.length == 0) {
	             // call drain immediately if there are no tasks
	             return async.setImmediate(function() {
	                 if (q.drain) {
	                     q.drain();
	                 }
	             });
	          }
	          _each(data, function(task) {
	              var item = {
	                  data: task,
	                  priority: priority,
	                  callback: typeof callback === 'function' ? callback : null
	              };
	              
	              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);
	
	              if (q.saturated && q.tasks.length === q.concurrency) {
	                  q.saturated();
	              }
	              async.setImmediate(q.process);
	          });
	        }
	        
	        // Start with a normal queue
	        var q = async.queue(worker, concurrency);
	        
	        // Override push to accept second parameter representing priority
	        q.push = function (data, priority, callback) {
	          _insert(q, data, priority, callback);
	        };
	        
	        // Remove unshift function
	        delete q.unshift;
	
	        return q;
	    };
	
	    async.cargo = function (worker, payload) {
	        var working     = false,
	            tasks       = [];
	
	        var cargo = {
	            tasks: tasks,
	            payload: payload,
	            saturated: null,
	            empty: null,
	            drain: null,
	            drained: true,
	            push: function (data, callback) {
	                if (!_isArray(data)) {
	                    data = [data];
	                }
	                _each(data, function(task) {
	                    tasks.push({
	                        data: task,
	                        callback: typeof callback === 'function' ? callback : null
	                    });
	                    cargo.drained = false;
	                    if (cargo.saturated && tasks.length === payload) {
	                        cargo.saturated();
	                    }
	                });
	                async.setImmediate(cargo.process);
	            },
	            process: function process() {
	                if (working) return;
	                if (tasks.length === 0) {
	                    if(cargo.drain && !cargo.drained) cargo.drain();
	                    cargo.drained = true;
	                    return;
	                }
	
	                var ts = typeof payload === 'number'
	                            ? tasks.splice(0, payload)
	                            : tasks.splice(0, tasks.length);
	
	                var ds = _map(ts, function (task) {
	                    return task.data;
	                });
	
	                if(cargo.empty) cargo.empty();
	                working = true;
	                worker(ds, function () {
	                    working = false;
	
	                    var args = arguments;
	                    _each(ts, function (data) {
	                        if (data.callback) {
	                            data.callback.apply(null, args);
	                        }
	                    });
	
	                    process();
	                });
	            },
	            length: function () {
	                return tasks.length;
	            },
	            running: function () {
	                return working;
	            }
	        };
	        return cargo;
	    };
	
	    var _console_fn = function (name) {
	        return function (fn) {
	            var args = Array.prototype.slice.call(arguments, 1);
	            fn.apply(null, args.concat([function (err) {
	                var args = Array.prototype.slice.call(arguments, 1);
	                if (typeof console !== 'undefined') {
	                    if (err) {
	                        if (console.error) {
	                            console.error(err);
	                        }
	                    }
	                    else if (console[name]) {
	                        _each(args, function (x) {
	                            console[name](x);
	                        });
	                    }
	                }
	            }]));
	        };
	    };
	    async.log = _console_fn('log');
	    async.dir = _console_fn('dir');
	    /*async.info = _console_fn('info');
	    async.warn = _console_fn('warn');
	    async.error = _console_fn('error');*/
	
	    async.memoize = function (fn, hasher) {
	        var memo = {};
	        var queues = {};
	        hasher = hasher || function (x) {
	            return x;
	        };
	        var memoized = function () {
	            var args = Array.prototype.slice.call(arguments);
	            var callback = args.pop();
	            var key = hasher.apply(null, args);
	            if (key in memo) {
	                async.nextTick(function () {
	                    callback.apply(null, memo[key]);
	                });
	            }
	            else if (key in queues) {
	                queues[key].push(callback);
	            }
	            else {
	                queues[key] = [callback];
	                fn.apply(null, args.concat([function () {
	                    memo[key] = arguments;
	                    var q = queues[key];
	                    delete queues[key];
	                    for (var i = 0, l = q.length; i < l; i++) {
	                      q[i].apply(null, arguments);
	                    }
	                }]));
	            }
	        };
	        memoized.memo = memo;
	        memoized.unmemoized = fn;
	        return memoized;
	    };
	
	    async.unmemoize = function (fn) {
	      return function () {
	        return (fn.unmemoized || fn).apply(null, arguments);
	      };
	    };
	
	    async.times = function (count, iterator, callback) {
	        var counter = [];
	        for (var i = 0; i < count; i++) {
	            counter.push(i);
	        }
	        return async.map(counter, iterator, callback);
	    };
	
	    async.timesSeries = function (count, iterator, callback) {
	        var counter = [];
	        for (var i = 0; i < count; i++) {
	            counter.push(i);
	        }
	        return async.mapSeries(counter, iterator, callback);
	    };
	
	    async.seq = function (/* functions... */) {
	        var fns = arguments;
	        return function () {
	            var that = this;
	            var args = Array.prototype.slice.call(arguments);
	            var callback = args.pop();
	            async.reduce(fns, args, function (newargs, fn, cb) {
	                fn.apply(that, newargs.concat([function () {
	                    var err = arguments[0];
	                    var nextargs = Array.prototype.slice.call(arguments, 1);
	                    cb(err, nextargs);
	                }]))
	            },
	            function (err, results) {
	                callback.apply(that, [err].concat(results));
	            });
	        };
	    };
	
	    async.compose = function (/* functions... */) {
	      return async.seq.apply(null, Array.prototype.reverse.call(arguments));
	    };
	
	    var _applyEach = function (eachfn, fns /*args...*/) {
	        var go = function () {
	            var that = this;
	            var args = Array.prototype.slice.call(arguments);
	            var callback = args.pop();
	            return eachfn(fns, function (fn, cb) {
	                fn.apply(that, args.concat([cb]));
	            },
	            callback);
	        };
	        if (arguments.length > 2) {
	            var args = Array.prototype.slice.call(arguments, 2);
	            return go.apply(this, args);
	        }
	        else {
	            return go;
	        }
	    };
	    async.applyEach = doParallel(_applyEach);
	    async.applyEachSeries = doSeries(_applyEach);
	
	    async.forever = function (fn, callback) {
	        function next(err) {
	            if (err) {
	                if (callback) {
	                    return callback(err);
	                }
	                throw err;
	            }
	            fn(next);
	        }
	        next();
	    };
	
	    // Node.js
	    if (typeof module !== 'undefined' && module.exports) {
	        module.exports = async;
	    }
	    // AMD / RequireJS
	    else if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return async;
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	    // included directly via <script> tag
	    else {
	        root.async = async;
	    }
	
	}());
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85), __webpack_require__(258).setImmediate))

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactWithAddons
	 */
	
	/**
	 * This module exists purely in the open source project, and is meant as a way
	 * to create a separate standalone build of React. This build has "addons", or
	 * functionality we've built and think might be useful but doesn't have a good
	 * place to live inside React core.
	 */
	
	"use strict";
	
	var LinkedStateMixin = __webpack_require__(274);
	var React = __webpack_require__(12);
	var ReactComponentWithPureRenderMixin =
	  __webpack_require__(275);
	var ReactCSSTransitionGroup = __webpack_require__(276);
	var ReactTransitionGroup = __webpack_require__(277);
	var ReactUpdates = __webpack_require__(97);
	
	var cx = __webpack_require__(70);
	var cloneWithProps = __webpack_require__(278);
	var update = __webpack_require__(279);
	
	React.addons = {
	  CSSTransitionGroup: ReactCSSTransitionGroup,
	  LinkedStateMixin: LinkedStateMixin,
	  PureRenderMixin: ReactComponentWithPureRenderMixin,
	  TransitionGroup: ReactTransitionGroup,
	
	  batchedUpdates: ReactUpdates.batchedUpdates,
	  classSet: cx,
	  cloneWithProps: cloneWithProps,
	  update: update
	};
	
	if ("production" !== process.env.NODE_ENV) {
	  React.addons.Perf = __webpack_require__(145);
	  React.addons.TestUtils = __webpack_require__(280);
	}
	
	module.exports = React;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(291);


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules
	
	
	// Declare internals
	
	var internals = {};
	
	
	exports.arrayToObject = function (source) {
	
	    var obj = {};
	    for (var i = 0, il = source.length; i < il; ++i) {
	        if (typeof source[i] !== 'undefined') {
	
	            obj[i] = source[i];
	        }
	    }
	
	    return obj;
	};
	
	
	exports.merge = function (target, source) {
	
	    if (!source) {
	        return target;
	    }
	
	    if (typeof source !== 'object') {
	        if (Array.isArray(target)) {
	            target.push(source);
	        }
	        else {
	            target[source] = true;
	        }
	
	        return target;
	    }
	
	    if (typeof target !== 'object') {
	        target = [target].concat(source);
	        return target;
	    }
	
	    if (Array.isArray(target) &&
	        !Array.isArray(source)) {
	
	        target = exports.arrayToObject(target);
	    }
	
	    var keys = Object.keys(source);
	    for (var k = 0, kl = keys.length; k < kl; ++k) {
	        var key = keys[k];
	        var value = source[key];
	
	        if (!target[key]) {
	            target[key] = value;
	        }
	        else {
	            target[key] = exports.merge(target[key], value);
	        }
	    }
	
	    return target;
	};
	
	
	exports.decode = function (str) {
	
	    try {
	        return decodeURIComponent(str.replace(/\+/g, ' '));
	    } catch (e) {
	        return str;
	    }
	};
	
	
	exports.compact = function (obj, refs) {
	
	    if (typeof obj !== 'object' ||
	        obj === null) {
	
	        return obj;
	    }
	
	    refs = refs || [];
	    var lookup = refs.indexOf(obj);
	    if (lookup !== -1) {
	        return refs[lookup];
	    }
	
	    refs.push(obj);
	
	    if (Array.isArray(obj)) {
	        var compacted = [];
	
	        for (var i = 0, il = obj.length; i < il; ++i) {
	            if (typeof obj[i] !== 'undefined') {
	                compacted.push(obj[i]);
	            }
	        }
	
	        return compacted;
	    }
	
	    var keys = Object.keys(obj);
	    for (i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        obj[key] = exports.compact(obj[key], refs);
	    }
	
	    return obj;
	};
	
	
	exports.isRegExp = function (obj) {
	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};
	
	
	exports.isBuffer = function (obj) {
	
	    if (obj === null ||
	        typeof obj === 'undefined') {
	
	        return false;
	    }
	
	    return !!(obj.constructor &&
	        obj.constructor.isBuffer &&
	        obj.constructor.isBuffer(obj));
	};


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */
	
	"use strict";
	
	var emptyObject = {};
	
	if ("production" !== process.env.NODE_ENV) {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */
	
	"use strict";
	
	var PooledClass = __webpack_require__(94);
	
	var assign = __webpack_require__(63);
	var invariant = __webpack_require__(72);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}
	
	assign(CallbackQueue.prototype, {
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        callbacks.length === contexts.length,
	        "Mismatched list of contexts in callback queue"
	      ) : invariant(callbacks.length === contexts.length));
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0, l = callbacks.length; i < l; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function() {
	    this._callbacks = null;
	    this._contexts = null;
	  },
	
	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function() {
	    this.reset();
	  }
	
	});
	
	PooledClass.addPoolingTo(CallbackQueue);
	
	module.exports = CallbackQueue;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */
	
	"use strict";
	
	var invariant = __webpack_require__(72);
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM upates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (!this.wrapperInitData) {
	      this.wrapperInitData = [];
	    } else {
	      this.wrapperInitData.length = 0;
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function() {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} args... Arguments to pass to the method (optional).
	   *                           Helps prevent need to bind in many cases.
	   * @return Return value from `method`.
	   */
	  perform: function(method, scope, a, b, c, d, e, f) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !this.isInTransaction(),
	      'Transaction.perform(...): Cannot initialize a transaction when there ' +
	      'is already an outstanding transaction.'
	    ) : invariant(!this.isInTransaction()));
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {
	          }
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ?
	          wrapper.initialize.call(this) :
	          null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {
	          }
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function(startIndex) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isInTransaction(),
	      'Transaction.closeAll(): Cannot close transaction when none are open.'
	    ) : invariant(this.isInTransaction()));
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR) {
	          wrapper.close && wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {
	          }
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	var Transaction = {
	
	  Mixin: Mixin,
	
	  /**
	   * Token to look for to determine if an error occured.
	   */
	  OBSERVED_ERROR: {}
	
	};
	
	module.exports = Transaction;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */
	
	"use strict";
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexShrink: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  strokeOpacity: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function(prop) {
	  prefixes.forEach(function(prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundImage: true,
	    backgroundPosition: true,
	    backgroundRepeat: true,
	    backgroundColor: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */
	
	"use strict";
	
	var camelize = __webpack_require__(284);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var CSSProperty = __webpack_require__(215);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 ||
	      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */
	
	"use strict";
	
	var hyphenate = __webpack_require__(283);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */
	
	"use strict";
	
	var EventPluginRegistry = __webpack_require__(220);
	var EventPluginUtils = __webpack_require__(44);
	
	var accumulateInto = __webpack_require__(286);
	var forEachAccumulated = __webpack_require__(287);
	var invariant = __webpack_require__(72);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function(event) {
	  if (event) {
	    var executeDispatch = EventPluginUtils.executeDispatch;
	    // Plugins can provide custom behavior when dispatching events.
	    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
	    if (PluginModule && PluginModule.executeDispatch) {
	      executeDispatch = PluginModule.executeDispatch;
	    }
	    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	
	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;
	
	function validateInstanceHandle() {
	  var invalid = !InstanceHandle||
	    !InstanceHandle.traverseTwoPhase ||
	    !InstanceHandle.traverseEnterLeave;
	  if (invalid) {
	    throw new Error('InstanceHandle not injected before use!');
	  }
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,
	
	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	    },
	
	    getInstanceHandle: function() {
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginRegistry.registrationNameModules,
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function(id, registrationName, listener) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !listener || typeof listener === 'function',
	      'Expected %s listener to be a function, instead got type %s',
	      registrationName, typeof listener
	    ) : invariant(!listener || typeof listener === 'function'));
	
	    var bankForRegistrationName =
	      listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	  },
	
	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function(id) {
	    for (var registrationName in listenerBank) {
	      delete listenerBank[registrationName][id];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0, l = plugins.length; i < l; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(
	          topLevelType,
	          topLevelTarget,
	          topLevelTargetID,
	          nativeEvent
	        );
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function() {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !eventQueue,
	      'processEventQueue(): Additional events were enqueued while processing ' +
	      'an event queue. Support for this has not yet been implemented.'
	    ) : invariant(!eventQueue));
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function() {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function() {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var invariant = __webpack_require__(72);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      pluginIndex > -1,
	      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
	      'the plugin ordering, `%s`.',
	      pluginName
	    ) : invariant(pluginIndex > -1));
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      PluginModule.extractEvents,
	      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
	      'method, but `%s` does not.',
	      pluginName
	    ) : invariant(PluginModule.extractEvents));
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        publishEventForPlugin(
	          publishedEvents[eventName],
	          PluginModule,
	          eventName
	        ),
	        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
	        eventName,
	        pluginName
	      ) : invariant(publishEventForPlugin(
	        publishedEvents[eventName],
	        PluginModule,
	        eventName
	      )));
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'event name, `%s`.',
	    eventName
	  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(
	          phasedRegistrationName,
	          PluginModule,
	          eventName
	        );
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(
	      dispatchConfig.registrationName,
	      PluginModule,
	      eventName
	    );
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.registrationNameModules[registrationName],
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'registration name, `%s`.',
	    registrationName
	  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] =
	    PluginModule.eventTypes[eventName].dependencies;
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function(InjectedEventPluginOrder) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !EventPluginOrder,
	      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
	      'once. You are likely trying to load more than one copy of React.'
	    ) : invariant(!EventPluginOrder));
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) ||
	          namesToPlugins[pluginName] !== PluginModule) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !namesToPlugins[pluginName],
	          'EventPluginRegistry: Cannot inject two different event plugins ' +
	          'using the same name, `%s`.',
	          pluginName
	        ) : invariant(!namesToPlugins[pluginName]));
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[
	        dispatchConfig.registrationName
	      ] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[
	        dispatchConfig.phasedRegistrationNames[phase]
	      ];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */
	
	"use strict";
	
	var EventPluginHub = __webpack_require__(219);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue();
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events = EventPluginHub.extractEvents(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent
	    );
	
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */
	
	"use strict";
	
	var getUnboundedScrollPosition = __webpack_require__(244);
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function() {
	    var scrollPosition = getUnboundedScrollPosition(window);
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */
	
	var isNode = __webpack_require__(285);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */
	
	"use strict";
	
	var assign = __webpack_require__(63);
	var invariant = __webpack_require__(72);
	
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags
	var tagToComponentClass = {};
	
	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};
	
	/**
	 * Create an internal class for a specific tag.
	 *
	 * @param {string} tag The tag for which to create an internal instance.
	 * @param {any} props The props passed to the instance constructor.
	 * @return {ReactComponent} component The injected empty component.
	 */
	function createInstanceForTag(tag, props, parentType) {
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      genericComponentClass,
	      'There is no registered component for the tag %s',
	      tag
	    ) : invariant(genericComponentClass));
	    return new genericComponentClass(tag, props);
	  }
	  if (parentType === tag) {
	    // Avoid recursion
	    ("production" !== process.env.NODE_ENV ? invariant(
	      genericComponentClass,
	      'There is no registered component for the tag %s',
	      tag
	    ) : invariant(genericComponentClass));
	    return new genericComponentClass(tag, props);
	  }
	  // Unwrap legacy factories
	  return new componentClass.type(props);
	}
	
	var ReactNativeComponent = {
	  createInstanceForTag: createInstanceForTag,
	  injection: ReactNativeComponentInjection
	};
	
	module.exports = ReactNativeComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule joinClasses
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} classes
	 * @return {string}
	 */
	function joinClasses(className/*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}
	
	module.exports = joinClasses;


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */
	
	/* jslint bitwise:true */
	
	"use strict";
	
	var MOD = 65521;
	
	// This is a clean-room implementation of adler32 designed for detecting
	// if markup is not what we expect it to be. It does not need to be
	// cryptographically strong, only reasonably good at detecting if markup
	// generated on the server is different than that on the client.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  for (var i = 0; i < data.length; i++) {
	    a = (a + data.charCodeAt(i)) % MOD;
	    b = (b + a) % MOD;
	  }
	  return a | (b << 16);
	}
	
	module.exports = adler32;


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPutListenerQueue
	 */
	
	"use strict";
	
	var PooledClass = __webpack_require__(94);
	var ReactBrowserEventEmitter = __webpack_require__(103);
	
	var assign = __webpack_require__(63);
	
	function ReactPutListenerQueue() {
	  this.listenersToPut = [];
	}
	
	assign(ReactPutListenerQueue.prototype, {
	  enqueuePutListener: function(rootNodeID, propKey, propValue) {
	    this.listenersToPut.push({
	      rootNodeID: rootNodeID,
	      propKey: propKey,
	      propValue: propValue
	    });
	  },
	
	  putListeners: function() {
	    for (var i = 0; i < this.listenersToPut.length; i++) {
	      var listenerToPut = this.listenersToPut[i];
	      ReactBrowserEventEmitter.putListener(
	        listenerToPut.rootNodeID,
	        listenerToPut.propKey,
	        listenerToPut.propValue
	      );
	    }
	  },
	
	  reset: function() {
	    this.listenersToPut.length = 0;
	  },
	
	  destructor: function() {
	    this.reset();
	  }
	});
	
	PooledClass.addPoolingTo(ReactPutListenerQueue);
	
	module.exports = ReactPutListenerQueue;


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(93);
	var EventPluginHub = __webpack_require__(219);
	
	var accumulateInto = __webpack_require__(286);
	var forEachAccumulated = __webpack_require__(287);
	
	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName =
	    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (!domID) {
	      throw new Error('Dispatching id must not be null');
	    }
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners =
	      accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We can not perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
	      event.dispatchMarker,
	      accumulateDirectionalDispatches,
	      event
	    );
	  }
	}
	
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners =
	        accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
	    fromID,
	    toID,
	    accumulateDispatches,
	    leave,
	    enter
	  );
	}
	
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticEvent = __webpack_require__(230);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticEvent.augmentClass(
	  SyntheticInputEvent,
	  InputEventInterface
	);
	
	module.exports = SyntheticInputEvent;
	


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var PooledClass = __webpack_require__(94);
	
	var assign = __webpack_require__(63);
	var emptyFunction = __webpack_require__(148);
	var getEventTarget = __webpack_require__(243);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: getEventTarget,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ?
	    nativeEvent.defaultPrevented :
	    nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}
	
	assign(SyntheticEvent.prototype, {
	
	  preventDefault: function() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    event.preventDefault ? event.preventDefault() : event.returnValue = false;
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function() {
	    var event = this.nativeEvent;
	    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function(Class, Interface) {
	  var Super = this;
	
	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);
	
	module.exports = SyntheticEvent;


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */
	
	"use strict";
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  return elem && (
	    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
	    elem.nodeName === 'TEXTAREA'
	  );
	}
	
	module.exports = isTextInputElement;


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticUIEvent = __webpack_require__(254);
	var ViewportMetrics = __webpack_require__(222);
	
	var getEventModifierState = __webpack_require__(288);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function(event) {
	    return event.relatedTarget || (
	      event.fromElement === event.srcElement ?
	        event.toElement :
	        event.fromElement
	    );
	  },
	  // "Proprietary" Interface.
	  pageX: function(event) {
	    return 'pageX' in event ?
	      event.pageX :
	      event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function(event) {
	    return 'pageY' in event ?
	      event.pageY :
	      event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */
	
	/*jslint evil: true */
	
	"use strict";
	
	var CSSPropertyOperations = __webpack_require__(100);
	var DOMChildrenOperations = __webpack_require__(289);
	var DOMPropertyOperations = __webpack_require__(43);
	var ReactMount = __webpack_require__(57);
	var ReactPerf = __webpack_require__(59);
	
	var invariant = __webpack_require__(72);
	var setInnerHTML = __webpack_require__(235);
	
	/**
	 * Errors for properties that should not be updated with `updatePropertyById()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML:
	    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};
	
	/**
	 * Operations used to process updates to DOM nodes. This is made injectable via
	 * `ReactComponent.BackendIDOperations`.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'updatePropertyByID',
	    function(id, name, value) {
	      var node = ReactMount.getNode(id);
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	        'updatePropertyByID(...): %s',
	        INVALID_PROPERTY_ERRORS[name]
	      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	
	      // If we're updating to null or undefined, we should remove the property
	      // from the DOM node instead of inadvertantly setting to a string. This
	      // brings us in line with the same behavior we have on initial render.
	      if (value != null) {
	        DOMPropertyOperations.setValueForProperty(node, name, value);
	      } else {
	        DOMPropertyOperations.deleteValueForProperty(node, name);
	      }
	    }
	  ),
	
	  /**
	   * Updates a DOM node to remove a property. This should only be used to remove
	   * DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A property name to remove, see `DOMProperty`.
	   * @internal
	   */
	  deletePropertyByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'deletePropertyByID',
	    function(id, name, value) {
	      var node = ReactMount.getNode(id);
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	        'updatePropertyByID(...): %s',
	        INVALID_PROPERTY_ERRORS[name]
	      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	      DOMPropertyOperations.deleteValueForProperty(node, name, value);
	    }
	  ),
	
	  /**
	   * Updates a DOM node with new style values. If a value is specified as '',
	   * the corresponding style property will be unset.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {object} styles Mapping from styles to values.
	   * @internal
	   */
	  updateStylesByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'updateStylesByID',
	    function(id, styles) {
	      var node = ReactMount.getNode(id);
	      CSSPropertyOperations.setValueForStyles(node, styles);
	    }
	  ),
	
	  /**
	   * Updates a DOM node's innerHTML.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} html An HTML string.
	   * @internal
	   */
	  updateInnerHTMLByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'updateInnerHTMLByID',
	    function(id, html) {
	      var node = ReactMount.getNode(id);
	      setInnerHTML(node, html);
	    }
	  ),
	
	  /**
	   * Updates a DOM node's text content set by `props.content`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} content Text content.
	   * @internal
	   */
	  updateTextContentByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'updateTextContentByID',
	    function(id, content) {
	      var node = ReactMount.getNode(id);
	      DOMChildrenOperations.updateTextContent(node, content);
	    }
	  ),
	
	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'dangerouslyReplaceNodeWithMarkupByID',
	    function(id, markup) {
	      var node = ReactMount.getNode(id);
	      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	    }
	  ),
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'dangerouslyProcessChildrenUpdates',
	    function(updates, markup) {
	      for (var i = 0; i < updates.length; i++) {
	        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	      }
	      DOMChildrenOperations.processUpdates(updates, markup);
	    }
	  )
	};
	
	module.exports = ReactDOMIDOperations;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var CallbackQueue = __webpack_require__(213);
	var PooledClass = __webpack_require__(94);
	var ReactBrowserEventEmitter = __webpack_require__(103);
	var ReactInputSelection = __webpack_require__(239);
	var ReactPutListenerQueue = __webpack_require__(227);
	var Transaction = __webpack_require__(214);
	
	var assign = __webpack_require__(63);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
	   *   restores the previous value.
	   */
	  close: function(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function() {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },
	
	  close: function() {
	    this.putListenerQueue.putListeners();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  SELECTION_RESTORATION,
	  EVENT_SUPPRESSION,
	  ON_DOM_READY_QUEUEING
	];
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction() {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap proceedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },
	
	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	
	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};
	
	
	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */
	
	"use strict";
	
	var ExecutionEnvironment = __webpack_require__(66);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function(node, html) {
	  node.innerHTML = html;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) ||
	          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        node.innerHTML = '\uFEFF' + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}
	
	module.exports = setInnerHTML;


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusMixin
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var focusNode = __webpack_require__(290);
	
	var AutoFocusMixin = {
	  componentDidMount: function() {
	    if (this.props.autoFocus) {
	      focusNode(this.getDOMNode());
	    }
	  }
	};
	
	module.exports = AutoFocusMixin;


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LocalEventTrapMixin
	 */
	
	"use strict";
	
	var ReactBrowserEventEmitter = __webpack_require__(103);
	
	var accumulateInto = __webpack_require__(286);
	var forEachAccumulated = __webpack_require__(287);
	var invariant = __webpack_require__(72);
	
	function remove(event) {
	  event.remove();
	}
	
	var LocalEventTrapMixin = {
	  trapBubbledEvent:function(topLevelType, handlerBaseName) {
	    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
	    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      this.getDOMNode()
	    );
	    this._localEventListeners =
	      accumulateInto(this._localEventListeners, listener);
	  },
	
	  // trapCapturedEvent would look nearly identical. We don't implement that
	  // method because it isn't currently needed.
	
	  componentWillUnmount:function() {
	    if (this._localEventListeners) {
	      forEachAccumulated(this._localEventListeners, remove);
	    }
	  }
	};
	
	module.exports = LocalEventTrapMixin;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var ReactPropTypes = __webpack_require__(60);
	
	var invariant = __webpack_require__(72);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(input) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checkedLink == null || input.props.valueLink == null,
	    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
	    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
	  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
	}
	function _assertValueLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.value == null && input.props.onChange == null,
	    'Cannot provide a valueLink and a value or onChange event. If you want ' +
	    'to use value or onChange, you probably don\'t want to use valueLink.'
	  ) : invariant(input.props.value == null && input.props.onChange == null));
	}
	
	function _assertCheckedLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checked == null && input.props.onChange == null,
	    'Cannot provide a checkedLink and a checked property or onChange event. ' +
	    'If you want to use checked or onChange, you probably don\'t want to ' +
	    'use checkedLink'
	  ) : invariant(input.props.checked == null && input.props.onChange == null));
	}
	
	/**
	 * @param {SyntheticEvent} e change event to handle
	 */
	function _handleLinkedValueChange(e) {
	  /*jshint validthis:true */
	  this.props.valueLink.requestChange(e.target.value);
	}
	
	/**
	  * @param {SyntheticEvent} e change event to handle
	  */
	function _handleLinkedCheckChange(e) {
	  /*jshint validthis:true */
	  this.props.checkedLink.requestChange(e.target.checked);
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  Mixin: {
	    propTypes: {
	      value: function(props, propName, componentName) {
	        if (!props[propName] ||
	            hasReadOnlyValue[props.type] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return;
	        }
	        return new Error(
	          'You provided a `value` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultValue`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      checked: function(props, propName, componentName) {
	        if (!props[propName] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return;
	        }
	        return new Error(
	          'You provided a `checked` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultChecked`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      onChange: ReactPropTypes.func
	    }
	  },
	
	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return input.props.valueLink.value;
	    }
	    return input.props.value;
	  },
	
	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function(input) {
	    if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return input.props.checkedLink.value;
	    }
	    return input.props.checked;
	  },
	
	  /**
	   * @param {ReactComponent} input Form component
	   * @return {function} change callback either from onChange prop or link.
	   */
	  getOnChange: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return _handleLinkedValueChange;
	    } else if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return _handleLinkedCheckChange;
	    }
	    return input.props.onChange;
	  }
	};
	
	module.exports = LinkedValueUtils;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */
	
	"use strict";
	
	var ReactDOMSelection = __webpack_require__(292);
	
	var containsNode = __webpack_require__(110);
	var focusNode = __webpack_require__(290);
	var getActiveElement = __webpack_require__(245);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function(elem) {
	    return elem && (
	      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
	      elem.nodeName === 'TEXTAREA' ||
	      elem.contentEditable === 'true'
	    );
	  },
	
	  getSelectionInformation: function() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange:
	          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
	          ReactInputSelection.getSelection(focusedElem) :
	          null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem &&
	        isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(
	          priorFocusedElem,
	          priorSelectionRange
	        );
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function(input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || {start: 0, end: 0};
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticEvent = __webpack_require__(230);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticEvent.augmentClass(
	  SyntheticCompositionEvent,
	  CompositionEventInterface
	);
	
	module.exports = SyntheticCompositionEvent;
	


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */
	
	"use strict";
	
	var ExecutionEnvironment = __webpack_require__(66);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ?
	      'textContent' :
	      'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */
	
	var emptyFunction = __webpack_require__(148);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function(target, eventType, callback) {
	    if (!target.addEventListener) {
	      if ("production" !== process.env.NODE_ENV) {
	        console.error(
	          'Attempted to listen to events during the capture phase on a ' +
	          'browser that does not support the capture phase. Your application ' +
	          'will not receive some events.'
	        );
	      }
	      return {
	        remove: emptyFunction
	      };
	    } else {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    }
	  },
	
	  registerDefault: function() {}
	};
	
	module.exports = EventListener;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */
	
	"use strict";
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document body is not yet defined.
	 */
	function getActiveElement() /*?DOMElement*/ {
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}
	
	module.exports = getActiveElement;


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */
	
	"use strict";
	
	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}
	
	module.exports = shallowEqual;


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */
	
	var assign = __webpack_require__(63);
	
	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  'mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  TEXT_CONTENT: 'set textContent',
	  'updatePropertyByID': 'update attribute',
	  'deletePropertyByID': 'delete attribute',
	  'updateStylesByID': 'update styles',
	  'updateInnerHTMLByID': 'set innerHTML',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};
	
	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}
	
	function getDOMSummary(measurements) {
	  var items = [];
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var id;
	
	    for (id in measurement.writes) {
	      measurement.writes[id].forEach(function(write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    }
	  }
	  return items;
	}
	
	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	
	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;
	
	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }
	
	  arr.sort(function(a, b) {
	    return b.exclusive - a.exclusive;
	  });
	
	  return arr;
	}
	
	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	    var cleanComponents;
	
	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }
	
	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }
	
	      var displayName = measurement.displayNames[id];
	
	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;
	
	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };
	
	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }
	
	  arr.sort(function(a, b) {
	    return b.time - a.time;
	  });
	
	  return arr;
	}
	
	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	
	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}
	
	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};
	
	module.exports = ReactDefaultPerfAnalysis;


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */
	
	var performance = __webpack_require__(294);
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!performance || !performance.now) {
	  performance = Date;
	}
	
	var performanceNow = performance.now.bind(performance);
	
	module.exports = performanceNow;


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticEvent = __webpack_require__(230);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function(event) {
	    return (
	      'clipboardData' in event ?
	        event.clipboardData :
	        window.clipboardData
	    );
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;
	


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticUIEvent = __webpack_require__(254);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticUIEvent = __webpack_require__(254);
	
	var getEventCharCode = __webpack_require__(256);
	var getEventKey = __webpack_require__(293);
	var getEventModifierState = __webpack_require__(288);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticMouseEvent = __webpack_require__(232);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticUIEvent = __webpack_require__(254);
	
	var getEventModifierState = __webpack_require__(288);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticEvent = __webpack_require__(230);
	
	var getEventTarget = __webpack_require__(243);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function(event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function(event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticMouseEvent = __webpack_require__(232);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function(event) {
	    return (
	      'deltaX' in event ? event.deltaX :
	      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
	    );
	  },
	  deltaY: function(event) {
	    return (
	      'deltaY' in event ? event.deltaY :
	      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	      'wheelDeltaY' in event ? -event.wheelDeltaY :
	      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	      'wheelDelta' in event ? -event.wheelDelta : 0
	    );
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);
	
		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = Object.keys(Object(from));
	
			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}
	
		return to;
	};


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(85).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);
	
	  immediateIds[id] = true;
	
	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });
	
	  return id;
	};
	
	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).setImmediate, __webpack_require__(258).clearImmediate))

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//     http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	//
	// Copyright 2009 Google Inc. All Rights Reserved
	
	/**
	 * Defines a Long class for representing a 64-bit two's-complement
	 * integer value, which faithfully simulates the behavior of a Java "Long". This
	 * implementation is derived from LongLib in GWT.
	 *
	 * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
	 * values as *signed* integers.  See the from* functions below for more
	 * convenient ways of constructing Longs.
	 *
	 * The internal representation of a Long is the two given signed, 32-bit values.
	 * We use 32-bit pieces because these are the size of integers on which
	 * Javascript performs bit-operations.  For operations like addition and
	 * multiplication, we split each number into 16-bit pieces, which can easily be
	 * multiplied within Javascript's floating-point representation without overflow
	 * or change in sign.
	 *
	 * In the algorithms below, we frequently reduce the negative case to the
	 * positive case by negating the input(s) and then post-processing the result.
	 * Note that we must ALWAYS check specially whether those values are MIN_VALUE
	 * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
	 * a positive number, it overflows back into a negative).  Not handling this
	 * case would often result in infinite recursion.
	 *
	 * @class Represents the BSON Long type.
	 * @param {number} low  the low (signed) 32 bits of the Long.
	 * @param {number} high the high (signed) 32 bits of the Long.
	 * @return {Long}
	 */
	function Long(low, high) {
	  if(!(this instanceof Long)) return new Long(low, high);
	  
	  this._bsontype = 'Long';
	  /**
	   * @type {number}
	   * @ignore
	   */
	  this.low_ = low | 0;  // force into 32 signed bits.
	
	  /**
	   * @type {number}
	   * @ignore
	   */
	  this.high_ = high | 0;  // force into 32 signed bits.
	};
	
	/**
	 * Return the int value.
	 *
	 * @method
	 * @return {number} the value, assuming it is a 32-bit integer.
	 */
	Long.prototype.toInt = function() {
	  return this.low_;
	};
	
	/**
	 * Return the Number value.
	 *
	 * @method
	 * @return {number} the closest floating-point representation to this value.
	 */
	Long.prototype.toNumber = function() {
	  return this.high_ * Long.TWO_PWR_32_DBL_ +
	         this.getLowBitsUnsigned();
	};
	
	/**
	 * Return the JSON value.
	 *
	 * @method
	 * @return {string} the JSON representation.
	 */
	Long.prototype.toJSON = function() {
	  return this.toString();
	}
	
	/**
	 * Return the String value.
	 *
	 * @method
	 * @param {number} [opt_radix] the radix in which the text should be written.
	 * @return {string} the textual representation of this value.
	 */
	Long.prototype.toString = function(opt_radix) {
	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }
	
	  if (this.isZero()) {
	    return '0';
	  }
	
	  if (this.isNegative()) {
	    if (this.equals(Long.MIN_VALUE)) {
	      // We need to change the Long value before it can be negated, so we remove
	      // the bottom-most digit in this base and then recurse to do the rest.
	      var radixLong = Long.fromNumber(radix);
	      var div = this.div(radixLong);
	      var rem = div.multiply(radixLong).subtract(this);
	      return div.toString(radix) + rem.toInt().toString(radix);
	    } else {
	      return '-' + this.negate().toString(radix);
	    }
	  }
	
	  // Do several (6) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = Long.fromNumber(Math.pow(radix, 6));
	
	  var rem = this;
	  var result = '';
	  while (true) {
	    var remDiv = rem.div(radixToPower);
	    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
	    var digits = intval.toString(radix);
	
	    rem = remDiv;
	    if (rem.isZero()) {
	      return digits + result;
	    } else {
	      while (digits.length < 6) {
	        digits = '0' + digits;
	      }
	      result = '' + digits + result;
	    }
	  }
	};
	
	/**
	 * Return the high 32-bits value.
	 *
	 * @method
	 * @return {number} the high 32-bits as a signed value.
	 */
	Long.prototype.getHighBits = function() {
	  return this.high_;
	};
	
	/**
	 * Return the low 32-bits value.
	 *
	 * @method
	 * @return {number} the low 32-bits as a signed value.
	 */
	Long.prototype.getLowBits = function() {
	  return this.low_;
	};
	
	/**
	 * Return the low unsigned 32-bits value.
	 *
	 * @method
	 * @return {number} the low 32-bits as an unsigned value.
	 */
	Long.prototype.getLowBitsUnsigned = function() {
	  return (this.low_ >= 0) ?
	      this.low_ : Long.TWO_PWR_32_DBL_ + this.low_;
	};
	
	/**
	 * Returns the number of bits needed to represent the absolute value of this Long.
	 *
	 * @method
	 * @return {number} Returns the number of bits needed to represent the absolute value of this Long.
	 */
	Long.prototype.getNumBitsAbs = function() {
	  if (this.isNegative()) {
	    if (this.equals(Long.MIN_VALUE)) {
	      return 64;
	    } else {
	      return this.negate().getNumBitsAbs();
	    }
	  } else {
	    var val = this.high_ != 0 ? this.high_ : this.low_;
	    for (var bit = 31; bit > 0; bit--) {
	      if ((val & (1 << bit)) != 0) {
	        break;
	      }
	    }
	    return this.high_ != 0 ? bit + 33 : bit + 1;
	  }
	};
	
	/**
	 * Return whether this value is zero.
	 *
	 * @method
	 * @return {boolean} whether this value is zero.
	 */
	Long.prototype.isZero = function() {
	  return this.high_ == 0 && this.low_ == 0;
	};
	
	/**
	 * Return whether this value is negative.
	 *
	 * @method
	 * @return {boolean} whether this value is negative.
	 */
	Long.prototype.isNegative = function() {
	  return this.high_ < 0;
	};
	
	/**
	 * Return whether this value is odd.
	 *
	 * @method
	 * @return {boolean} whether this value is odd.
	 */
	Long.prototype.isOdd = function() {
	  return (this.low_ & 1) == 1;
	};
	
	/**
	 * Return whether this Long equals the other
	 *
	 * @method
	 * @param {Long} other Long to compare against.
	 * @return {boolean} whether this Long equals the other
	 */
	Long.prototype.equals = function(other) {
	  return (this.high_ == other.high_) && (this.low_ == other.low_);
	};
	
	/**
	 * Return whether this Long does not equal the other.
	 *
	 * @method
	 * @param {Long} other Long to compare against.
	 * @return {boolean} whether this Long does not equal the other.
	 */
	Long.prototype.notEquals = function(other) {
	  return (this.high_ != other.high_) || (this.low_ != other.low_);
	};
	
	/**
	 * Return whether this Long is less than the other.
	 *
	 * @method
	 * @param {Long} other Long to compare against.
	 * @return {boolean} whether this Long is less than the other.
	 */
	Long.prototype.lessThan = function(other) {
	  return this.compare(other) < 0;
	};
	
	/**
	 * Return whether this Long is less than or equal to the other.
	 *
	 * @method
	 * @param {Long} other Long to compare against.
	 * @return {boolean} whether this Long is less than or equal to the other.
	 */
	Long.prototype.lessThanOrEqual = function(other) {
	  return this.compare(other) <= 0;
	};
	
	/**
	 * Return whether this Long is greater than the other.
	 *
	 * @method
	 * @param {Long} other Long to compare against.
	 * @return {boolean} whether this Long is greater than the other.
	 */
	Long.prototype.greaterThan = function(other) {
	  return this.compare(other) > 0;
	};
	
	/**
	 * Return whether this Long is greater than or equal to the other.
	 *
	 * @method
	 * @param {Long} other Long to compare against.
	 * @return {boolean} whether this Long is greater than or equal to the other.
	 */
	Long.prototype.greaterThanOrEqual = function(other) {
	  return this.compare(other) >= 0;
	};
	
	/**
	 * Compares this Long with the given one.
	 *
	 * @method
	 * @param {Long} other Long to compare against.
	 * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.
	 */
	Long.prototype.compare = function(other) {
	  if (this.equals(other)) {
	    return 0;
	  }
	
	  var thisNeg = this.isNegative();
	  var otherNeg = other.isNegative();
	  if (thisNeg && !otherNeg) {
	    return -1;
	  }
	  if (!thisNeg && otherNeg) {
	    return 1;
	  }
	
	  // at this point, the signs are the same, so subtraction will not overflow
	  if (this.subtract(other).isNegative()) {
	    return -1;
	  } else {
	    return 1;
	  }
	};
	
	/**
	 * The negation of this value.
	 *
	 * @method
	 * @return {Long} the negation of this value.
	 */
	Long.prototype.negate = function() {
	  if (this.equals(Long.MIN_VALUE)) {
	    return Long.MIN_VALUE;
	  } else {
	    return this.not().add(Long.ONE);
	  }
	};
	
	/**
	 * Returns the sum of this and the given Long.
	 *
	 * @method
	 * @param {Long} other Long to add to this one.
	 * @return {Long} the sum of this and the given Long.
	 */
	Long.prototype.add = function(other) {
	  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
	
	  var a48 = this.high_ >>> 16;
	  var a32 = this.high_ & 0xFFFF;
	  var a16 = this.low_ >>> 16;
	  var a00 = this.low_ & 0xFFFF;
	
	  var b48 = other.high_ >>> 16;
	  var b32 = other.high_ & 0xFFFF;
	  var b16 = other.low_ >>> 16;
	  var b00 = other.low_ & 0xFFFF;
	
	  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	  c00 += a00 + b00;
	  c16 += c00 >>> 16;
	  c00 &= 0xFFFF;
	  c16 += a16 + b16;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c32 += a32 + b32;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c48 += a48 + b48;
	  c48 &= 0xFFFF;
	  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	};
	
	/**
	 * Returns the difference of this and the given Long.
	 *
	 * @method
	 * @param {Long} other Long to subtract from this.
	 * @return {Long} the difference of this and the given Long.
	 */
	Long.prototype.subtract = function(other) {
	  return this.add(other.negate());
	};
	
	/**
	 * Returns the product of this and the given Long.
	 *
	 * @method
	 * @param {Long} other Long to multiply with this.
	 * @return {Long} the product of this and the other.
	 */
	Long.prototype.multiply = function(other) {
	  if (this.isZero()) {
	    return Long.ZERO;
	  } else if (other.isZero()) {
	    return Long.ZERO;
	  }
	
	  if (this.equals(Long.MIN_VALUE)) {
	    return other.isOdd() ? Long.MIN_VALUE : Long.ZERO;
	  } else if (other.equals(Long.MIN_VALUE)) {
	    return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;
	  }
	
	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().multiply(other.negate());
	    } else {
	      return this.negate().multiply(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.multiply(other.negate()).negate();
	  }
	
	  // If both Longs are small, use float multiplication
	  if (this.lessThan(Long.TWO_PWR_24_) &&
	      other.lessThan(Long.TWO_PWR_24_)) {
	    return Long.fromNumber(this.toNumber() * other.toNumber());
	  }
	
	  // Divide each Long into 4 chunks of 16 bits, and then add up 4x4 products.
	  // We can skip products that would overflow.
	
	  var a48 = this.high_ >>> 16;
	  var a32 = this.high_ & 0xFFFF;
	  var a16 = this.low_ >>> 16;
	  var a00 = this.low_ & 0xFFFF;
	
	  var b48 = other.high_ >>> 16;
	  var b32 = other.high_ & 0xFFFF;
	  var b16 = other.low_ >>> 16;
	  var b00 = other.low_ & 0xFFFF;
	
	  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	  c00 += a00 * b00;
	  c16 += c00 >>> 16;
	  c00 &= 0xFFFF;
	  c16 += a16 * b00;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c16 += a00 * b16;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c32 += a32 * b00;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c32 += a16 * b16;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c32 += a00 * b32;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
	  c48 &= 0xFFFF;
	  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	};
	
	/**
	 * Returns this Long divided by the given one.
	 *
	 * @method
	 * @param {Long} other Long by which to divide.
	 * @return {Long} this Long divided by the given one.
	 */
	Long.prototype.div = function(other) {
	  if (other.isZero()) {
	    throw Error('division by zero');
	  } else if (this.isZero()) {
	    return Long.ZERO;
	  }
	
	  if (this.equals(Long.MIN_VALUE)) {
	    if (other.equals(Long.ONE) ||
	        other.equals(Long.NEG_ONE)) {
	      return Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
	    } else if (other.equals(Long.MIN_VALUE)) {
	      return Long.ONE;
	    } else {
	      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
	      var halfThis = this.shiftRight(1);
	      var approx = halfThis.div(other).shiftLeft(1);
	      if (approx.equals(Long.ZERO)) {
	        return other.isNegative() ? Long.ONE : Long.NEG_ONE;
	      } else {
	        var rem = this.subtract(other.multiply(approx));
	        var result = approx.add(rem.div(other));
	        return result;
	      }
	    }
	  } else if (other.equals(Long.MIN_VALUE)) {
	    return Long.ZERO;
	  }
	
	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().div(other.negate());
	    } else {
	      return this.negate().div(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.div(other.negate()).negate();
	  }
	
	  // Repeat the following until the remainder is less than other:  find a
	  // floating-point that approximates remainder / other *from below*, add this
	  // into the result, and subtract it from the remainder.  It is critical that
	  // the approximate value is less than or equal to the real value so that the
	  // remainder never becomes negative.
	  var res = Long.ZERO;
	  var rem = this;
	  while (rem.greaterThanOrEqual(other)) {
	    // Approximate the result of division. This may be a little greater or
	    // smaller than the actual value.
	    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
	
	    // We will tweak the approximate result by changing it in the 48-th digit or
	    // the smallest non-fractional digit, whichever is larger.
	    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
	    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
	
	    // Decrease the approximation until it is smaller than the remainder.  Note
	    // that if it is too large, the product overflows and is negative.
	    var approxRes = Long.fromNumber(approx);
	    var approxRem = approxRes.multiply(other);
	    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
	      approx -= delta;
	      approxRes = Long.fromNumber(approx);
	      approxRem = approxRes.multiply(other);
	    }
	
	    // We know the answer can't be zero... and actually, zero would cause
	    // infinite recursion since we would make no progress.
	    if (approxRes.isZero()) {
	      approxRes = Long.ONE;
	    }
	
	    res = res.add(approxRes);
	    rem = rem.subtract(approxRem);
	  }
	  return res;
	};
	
	/**
	 * Returns this Long modulo the given one.
	 *
	 * @method
	 * @param {Long} other Long by which to mod.
	 * @return {Long} this Long modulo the given one.
	 */
	Long.prototype.modulo = function(other) {
	  return this.subtract(this.div(other).multiply(other));
	};
	
	/**
	 * The bitwise-NOT of this value.
	 *
	 * @method
	 * @return {Long} the bitwise-NOT of this value.
	 */
	Long.prototype.not = function() {
	  return Long.fromBits(~this.low_, ~this.high_);
	};
	
	/**
	 * Returns the bitwise-AND of this Long and the given one.
	 *
	 * @method
	 * @param {Long} other the Long with which to AND.
	 * @return {Long} the bitwise-AND of this and the other.
	 */
	Long.prototype.and = function(other) {
	  return Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
	};
	
	/**
	 * Returns the bitwise-OR of this Long and the given one.
	 *
	 * @method
	 * @param {Long} other the Long with which to OR.
	 * @return {Long} the bitwise-OR of this and the other.
	 */
	Long.prototype.or = function(other) {
	  return Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
	};
	
	/**
	 * Returns the bitwise-XOR of this Long and the given one.
	 *
	 * @method
	 * @param {Long} other the Long with which to XOR.
	 * @return {Long} the bitwise-XOR of this and the other.
	 */
	Long.prototype.xor = function(other) {
	  return Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
	};
	
	/**
	 * Returns this Long with bits shifted to the left by the given amount.
	 *
	 * @method
	 * @param {number} numBits the number of bits by which to shift.
	 * @return {Long} this shifted to the left by the given amount.
	 */
	Long.prototype.shiftLeft = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var low = this.low_;
	    if (numBits < 32) {
	      var high = this.high_;
	      return Long.fromBits(
	                 low << numBits,
	                 (high << numBits) | (low >>> (32 - numBits)));
	    } else {
	      return Long.fromBits(0, low << (numBits - 32));
	    }
	  }
	};
	
	/**
	 * Returns this Long with bits shifted to the right by the given amount.
	 *
	 * @method
	 * @param {number} numBits the number of bits by which to shift.
	 * @return {Long} this shifted to the right by the given amount.
	 */
	Long.prototype.shiftRight = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var high = this.high_;
	    if (numBits < 32) {
	      var low = this.low_;
	      return Long.fromBits(
	                 (low >>> numBits) | (high << (32 - numBits)),
	                 high >> numBits);
	    } else {
	      return Long.fromBits(
	                 high >> (numBits - 32),
	                 high >= 0 ? 0 : -1);
	    }
	  }
	};
	
	/**
	 * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.
	 *
	 * @method
	 * @param {number} numBits the number of bits by which to shift.
	 * @return {Long} this shifted to the right by the given amount, with zeros placed into the new leading bits.
	 */
	Long.prototype.shiftRightUnsigned = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var high = this.high_;
	    if (numBits < 32) {
	      var low = this.low_;
	      return Long.fromBits(
	                 (low >>> numBits) | (high << (32 - numBits)),
	                 high >>> numBits);
	    } else if (numBits == 32) {
	      return Long.fromBits(high, 0);
	    } else {
	      return Long.fromBits(high >>> (numBits - 32), 0);
	    }
	  }
	};
	
	/**
	 * Returns a Long representing the given (32-bit) integer value.
	 *
	 * @method
	 * @param {number} value the 32-bit integer in question.
	 * @return {Long} the corresponding Long value.
	 */
	Long.fromInt = function(value) {
	  if (-128 <= value && value < 128) {
	    var cachedObj = Long.INT_CACHE_[value];
	    if (cachedObj) {
	      return cachedObj;
	    }
	  }
	
	  var obj = new Long(value | 0, value < 0 ? -1 : 0);
	  if (-128 <= value && value < 128) {
	    Long.INT_CACHE_[value] = obj;
	  }
	  return obj;
	};
	
	/**
	 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
	 *
	 * @method
	 * @param {number} value the number in question.
	 * @return {Long} the corresponding Long value.
	 */
	Long.fromNumber = function(value) {
	  if (isNaN(value) || !isFinite(value)) {
	    return Long.ZERO;
	  } else if (value <= -Long.TWO_PWR_63_DBL_) {
	    return Long.MIN_VALUE;
	  } else if (value + 1 >= Long.TWO_PWR_63_DBL_) {
	    return Long.MAX_VALUE;
	  } else if (value < 0) {
	    return Long.fromNumber(-value).negate();
	  } else {
	    return new Long(
	               (value % Long.TWO_PWR_32_DBL_) | 0,
	               (value / Long.TWO_PWR_32_DBL_) | 0);
	  }
	};
	
	/**
	 * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.
	 *
	 * @method
	 * @param {number} lowBits the low 32-bits.
	 * @param {number} highBits the high 32-bits.
	 * @return {Long} the corresponding Long value.
	 */
	Long.fromBits = function(lowBits, highBits) {
	  return new Long(lowBits, highBits);
	};
	
	/**
	 * Returns a Long representation of the given string, written using the given radix.
	 *
	 * @method
	 * @param {string} str the textual representation of the Long.
	 * @param {number} opt_radix the radix in which the text is written.
	 * @return {Long} the corresponding Long value.
	 */
	Long.fromString = function(str, opt_radix) {
	  if (str.length == 0) {
	    throw Error('number format error: empty string');
	  }
	
	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }
	
	  if (str.charAt(0) == '-') {
	    return Long.fromString(str.substring(1), radix).negate();
	  } else if (str.indexOf('-') >= 0) {
	    throw Error('number format error: interior "-" character: ' + str);
	  }
	
	  // Do several (8) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = Long.fromNumber(Math.pow(radix, 8));
	
	  var result = Long.ZERO;
	  for (var i = 0; i < str.length; i += 8) {
	    var size = Math.min(8, str.length - i);
	    var value = parseInt(str.substring(i, i + size), radix);
	    if (size < 8) {
	      var power = Long.fromNumber(Math.pow(radix, size));
	      result = result.multiply(power).add(Long.fromNumber(value));
	    } else {
	      result = result.multiply(radixToPower);
	      result = result.add(Long.fromNumber(value));
	    }
	  }
	  return result;
	};
	
	// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
	// from* methods on which they depend.
	
	
	/**
	 * A cache of the Long representations of small integer values.
	 * @type {Object}
	 * @ignore
	 */
	Long.INT_CACHE_ = {};
	
	// NOTE: the compiler should inline these constant values below and then remove
	// these variables, so there should be no runtime penalty for these.
	
	/**
	 * Number used repeated below in calculations.  This must appear before the
	 * first call to any from* function below.
	 * @type {number}
	 * @ignore
	 */
	Long.TWO_PWR_16_DBL_ = 1 << 16;
	
	/**
	 * @type {number}
	 * @ignore
	 */
	Long.TWO_PWR_24_DBL_ = 1 << 24;
	
	/**
	 * @type {number}
	 * @ignore
	 */
	Long.TWO_PWR_32_DBL_ = Long.TWO_PWR_16_DBL_ * Long.TWO_PWR_16_DBL_;
	
	/**
	 * @type {number}
	 * @ignore
	 */
	Long.TWO_PWR_31_DBL_ = Long.TWO_PWR_32_DBL_ / 2;
	
	/**
	 * @type {number}
	 * @ignore
	 */
	Long.TWO_PWR_48_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_16_DBL_;
	
	/**
	 * @type {number}
	 * @ignore
	 */
	Long.TWO_PWR_64_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_32_DBL_;
	
	/**
	 * @type {number}
	 * @ignore
	 */
	Long.TWO_PWR_63_DBL_ = Long.TWO_PWR_64_DBL_ / 2;
	
	/** @type {Long} */
	Long.ZERO = Long.fromInt(0);
	
	/** @type {Long} */
	Long.ONE = Long.fromInt(1);
	
	/** @type {Long} */
	Long.NEG_ONE = Long.fromInt(-1);
	
	/** @type {Long} */
	Long.MAX_VALUE =
	    Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
	
	/** @type {Long} */
	Long.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0);
	
	/**
	 * @type {Long}
	 * @ignore
	 */
	Long.TWO_PWR_24_ = Long.fromInt(1 << 24);
	
	/**
	 * Expose.
	 */
	module.exports = Long;
	module.exports.Long = Long;

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * A class representation of the BSON Double type.
	 *
	 * @class Represents a BSON Double type.
	 * @param {number} value the number we want to represent as a double.
	 * @return {Double}
	 */
	function Double(value) {
	  if(!(this instanceof Double)) return new Double(value);
	  
	  this._bsontype = 'Double';
	  this.value = value;
	}
	
	/**
	 * Access the number value.
	 *
	 * @method
	 * @return {number} returns the wrapped double number.
	 */
	Double.prototype.valueOf = function() {
	  return this.value;
	};
	
	/**
	 * @ignore
	 */
	Double.prototype.toJSON = function() {
	  return this.value;
	}
	
	module.exports = Double;
	module.exports.Double = Double;

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//     http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	//
	// Copyright 2009 Google Inc. All Rights Reserved
	
	/**
	 * This type is for INTERNAL use in MongoDB only and should not be used in applications.
	 * The appropriate corresponding type is the JavaScript Date type.
	 * 
	 * Defines a Timestamp class for representing a 64-bit two's-complement
	 * integer value, which faithfully simulates the behavior of a Java "Timestamp". This
	 * implementation is derived from TimestampLib in GWT.
	 *
	 * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
	 * values as *signed* integers.  See the from* functions below for more
	 * convenient ways of constructing Timestamps.
	 *
	 * The internal representation of a Timestamp is the two given signed, 32-bit values.
	 * We use 32-bit pieces because these are the size of integers on which
	 * Javascript performs bit-operations.  For operations like addition and
	 * multiplication, we split each number into 16-bit pieces, which can easily be
	 * multiplied within Javascript's floating-point representation without overflow
	 * or change in sign.
	 *
	 * In the algorithms below, we frequently reduce the negative case to the
	 * positive case by negating the input(s) and then post-processing the result.
	 * Note that we must ALWAYS check specially whether those values are MIN_VALUE
	 * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
	 * a positive number, it overflows back into a negative).  Not handling this
	 * case would often result in infinite recursion.
	 *
	 * @class Represents the BSON Timestamp type.
	 * @param {number} low  the low (signed) 32 bits of the Timestamp.
	 * @param {number} high the high (signed) 32 bits of the Timestamp.
	 */
	function Timestamp(low, high) {
	  if(!(this instanceof Timestamp)) return new Timestamp(low, high);
	  this._bsontype = 'Timestamp';
	  /**
	   * @type {number}
	   * @ignore
	   */
	  this.low_ = low | 0;  // force into 32 signed bits.
	
	  /**
	   * @type {number}
	   * @ignore
	   */
	  this.high_ = high | 0;  // force into 32 signed bits.
	};
	
	/**
	 * Return the int value.
	 *
	 * @return {number} the value, assuming it is a 32-bit integer.
	 */
	Timestamp.prototype.toInt = function() {
	  return this.low_;
	};
	
	/**
	 * Return the Number value.
	 *
	 * @method
	 * @return {number} the closest floating-point representation to this value.
	 */
	Timestamp.prototype.toNumber = function() {
	  return this.high_ * Timestamp.TWO_PWR_32_DBL_ +
	         this.getLowBitsUnsigned();
	};
	
	/**
	 * Return the JSON value.
	 *
	 * @method
	 * @return {string} the JSON representation.
	 */
	Timestamp.prototype.toJSON = function() {
	  return this.toString();
	}
	
	/**
	 * Return the String value.
	 *
	 * @method
	 * @param {number} [opt_radix] the radix in which the text should be written.
	 * @return {string} the textual representation of this value.
	 */
	Timestamp.prototype.toString = function(opt_radix) {
	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }
	
	  if (this.isZero()) {
	    return '0';
	  }
	
	  if (this.isNegative()) {
	    if (this.equals(Timestamp.MIN_VALUE)) {
	      // We need to change the Timestamp value before it can be negated, so we remove
	      // the bottom-most digit in this base and then recurse to do the rest.
	      var radixTimestamp = Timestamp.fromNumber(radix);
	      var div = this.div(radixTimestamp);
	      var rem = div.multiply(radixTimestamp).subtract(this);
	      return div.toString(radix) + rem.toInt().toString(radix);
	    } else {
	      return '-' + this.negate().toString(radix);
	    }
	  }
	
	  // Do several (6) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 6));
	
	  var rem = this;
	  var result = '';
	  while (true) {
	    var remDiv = rem.div(radixToPower);
	    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
	    var digits = intval.toString(radix);
	
	    rem = remDiv;
	    if (rem.isZero()) {
	      return digits + result;
	    } else {
	      while (digits.length < 6) {
	        digits = '0' + digits;
	      }
	      result = '' + digits + result;
	    }
	  }
	};
	
	/**
	 * Return the high 32-bits value.
	 *
	 * @method
	 * @return {number} the high 32-bits as a signed value.
	 */
	Timestamp.prototype.getHighBits = function() {
	  return this.high_;
	};
	
	/**
	 * Return the low 32-bits value.
	 *
	 * @method
	 * @return {number} the low 32-bits as a signed value.
	 */
	Timestamp.prototype.getLowBits = function() {
	  return this.low_;
	};
	
	/**
	 * Return the low unsigned 32-bits value.
	 *
	 * @method
	 * @return {number} the low 32-bits as an unsigned value.
	 */
	Timestamp.prototype.getLowBitsUnsigned = function() {
	  return (this.low_ >= 0) ?
	      this.low_ : Timestamp.TWO_PWR_32_DBL_ + this.low_;
	};
	
	/**
	 * Returns the number of bits needed to represent the absolute value of this Timestamp.
	 *
	 * @method
	 * @return {number} Returns the number of bits needed to represent the absolute value of this Timestamp.
	 */
	Timestamp.prototype.getNumBitsAbs = function() {
	  if (this.isNegative()) {
	    if (this.equals(Timestamp.MIN_VALUE)) {
	      return 64;
	    } else {
	      return this.negate().getNumBitsAbs();
	    }
	  } else {
	    var val = this.high_ != 0 ? this.high_ : this.low_;
	    for (var bit = 31; bit > 0; bit--) {
	      if ((val & (1 << bit)) != 0) {
	        break;
	      }
	    }
	    return this.high_ != 0 ? bit + 33 : bit + 1;
	  }
	};
	
	/**
	 * Return whether this value is zero.
	 *
	 * @method
	 * @return {boolean} whether this value is zero.
	 */
	Timestamp.prototype.isZero = function() {
	  return this.high_ == 0 && this.low_ == 0;
	};
	
	/**
	 * Return whether this value is negative.
	 *
	 * @method
	 * @return {boolean} whether this value is negative.
	 */
	Timestamp.prototype.isNegative = function() {
	  return this.high_ < 0;
	};
	
	/**
	 * Return whether this value is odd.
	 *
	 * @method
	 * @return {boolean} whether this value is odd.
	 */
	Timestamp.prototype.isOdd = function() {
	  return (this.low_ & 1) == 1;
	};
	
	/**
	 * Return whether this Timestamp equals the other
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {boolean} whether this Timestamp equals the other
	 */
	Timestamp.prototype.equals = function(other) {
	  return (this.high_ == other.high_) && (this.low_ == other.low_);
	};
	
	/**
	 * Return whether this Timestamp does not equal the other.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {boolean} whether this Timestamp does not equal the other.
	 */
	Timestamp.prototype.notEquals = function(other) {
	  return (this.high_ != other.high_) || (this.low_ != other.low_);
	};
	
	/**
	 * Return whether this Timestamp is less than the other.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {boolean} whether this Timestamp is less than the other.
	 */
	Timestamp.prototype.lessThan = function(other) {
	  return this.compare(other) < 0;
	};
	
	/**
	 * Return whether this Timestamp is less than or equal to the other.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {boolean} whether this Timestamp is less than or equal to the other.
	 */
	Timestamp.prototype.lessThanOrEqual = function(other) {
	  return this.compare(other) <= 0;
	};
	
	/**
	 * Return whether this Timestamp is greater than the other.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {boolean} whether this Timestamp is greater than the other.
	 */
	Timestamp.prototype.greaterThan = function(other) {
	  return this.compare(other) > 0;
	};
	
	/**
	 * Return whether this Timestamp is greater than or equal to the other.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {boolean} whether this Timestamp is greater than or equal to the other.
	 */
	Timestamp.prototype.greaterThanOrEqual = function(other) {
	  return this.compare(other) >= 0;
	};
	
	/**
	 * Compares this Timestamp with the given one.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.
	 */
	Timestamp.prototype.compare = function(other) {
	  if (this.equals(other)) {
	    return 0;
	  }
	
	  var thisNeg = this.isNegative();
	  var otherNeg = other.isNegative();
	  if (thisNeg && !otherNeg) {
	    return -1;
	  }
	  if (!thisNeg && otherNeg) {
	    return 1;
	  }
	
	  // at this point, the signs are the same, so subtraction will not overflow
	  if (this.subtract(other).isNegative()) {
	    return -1;
	  } else {
	    return 1;
	  }
	};
	
	/**
	 * The negation of this value.
	 *
	 * @method
	 * @return {Timestamp} the negation of this value.
	 */
	Timestamp.prototype.negate = function() {
	  if (this.equals(Timestamp.MIN_VALUE)) {
	    return Timestamp.MIN_VALUE;
	  } else {
	    return this.not().add(Timestamp.ONE);
	  }
	};
	
	/**
	 * Returns the sum of this and the given Timestamp.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to add to this one.
	 * @return {Timestamp} the sum of this and the given Timestamp.
	 */
	Timestamp.prototype.add = function(other) {
	  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
	
	  var a48 = this.high_ >>> 16;
	  var a32 = this.high_ & 0xFFFF;
	  var a16 = this.low_ >>> 16;
	  var a00 = this.low_ & 0xFFFF;
	
	  var b48 = other.high_ >>> 16;
	  var b32 = other.high_ & 0xFFFF;
	  var b16 = other.low_ >>> 16;
	  var b00 = other.low_ & 0xFFFF;
	
	  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	  c00 += a00 + b00;
	  c16 += c00 >>> 16;
	  c00 &= 0xFFFF;
	  c16 += a16 + b16;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c32 += a32 + b32;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c48 += a48 + b48;
	  c48 &= 0xFFFF;
	  return Timestamp.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	};
	
	/**
	 * Returns the difference of this and the given Timestamp.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to subtract from this.
	 * @return {Timestamp} the difference of this and the given Timestamp.
	 */
	Timestamp.prototype.subtract = function(other) {
	  return this.add(other.negate());
	};
	
	/**
	 * Returns the product of this and the given Timestamp.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to multiply with this.
	 * @return {Timestamp} the product of this and the other.
	 */
	Timestamp.prototype.multiply = function(other) {
	  if (this.isZero()) {
	    return Timestamp.ZERO;
	  } else if (other.isZero()) {
	    return Timestamp.ZERO;
	  }
	
	  if (this.equals(Timestamp.MIN_VALUE)) {
	    return other.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;
	  } else if (other.equals(Timestamp.MIN_VALUE)) {
	    return this.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;
	  }
	
	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().multiply(other.negate());
	    } else {
	      return this.negate().multiply(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.multiply(other.negate()).negate();
	  }
	
	  // If both Timestamps are small, use float multiplication
	  if (this.lessThan(Timestamp.TWO_PWR_24_) &&
	      other.lessThan(Timestamp.TWO_PWR_24_)) {
	    return Timestamp.fromNumber(this.toNumber() * other.toNumber());
	  }
	
	  // Divide each Timestamp into 4 chunks of 16 bits, and then add up 4x4 products.
	  // We can skip products that would overflow.
	
	  var a48 = this.high_ >>> 16;
	  var a32 = this.high_ & 0xFFFF;
	  var a16 = this.low_ >>> 16;
	  var a00 = this.low_ & 0xFFFF;
	
	  var b48 = other.high_ >>> 16;
	  var b32 = other.high_ & 0xFFFF;
	  var b16 = other.low_ >>> 16;
	  var b00 = other.low_ & 0xFFFF;
	
	  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	  c00 += a00 * b00;
	  c16 += c00 >>> 16;
	  c00 &= 0xFFFF;
	  c16 += a16 * b00;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c16 += a00 * b16;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c32 += a32 * b00;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c32 += a16 * b16;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c32 += a00 * b32;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
	  c48 &= 0xFFFF;
	  return Timestamp.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	};
	
	/**
	 * Returns this Timestamp divided by the given one.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp by which to divide.
	 * @return {Timestamp} this Timestamp divided by the given one.
	 */
	Timestamp.prototype.div = function(other) {
	  if (other.isZero()) {
	    throw Error('division by zero');
	  } else if (this.isZero()) {
	    return Timestamp.ZERO;
	  }
	
	  if (this.equals(Timestamp.MIN_VALUE)) {
	    if (other.equals(Timestamp.ONE) ||
	        other.equals(Timestamp.NEG_ONE)) {
	      return Timestamp.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
	    } else if (other.equals(Timestamp.MIN_VALUE)) {
	      return Timestamp.ONE;
	    } else {
	      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
	      var halfThis = this.shiftRight(1);
	      var approx = halfThis.div(other).shiftLeft(1);
	      if (approx.equals(Timestamp.ZERO)) {
	        return other.isNegative() ? Timestamp.ONE : Timestamp.NEG_ONE;
	      } else {
	        var rem = this.subtract(other.multiply(approx));
	        var result = approx.add(rem.div(other));
	        return result;
	      }
	    }
	  } else if (other.equals(Timestamp.MIN_VALUE)) {
	    return Timestamp.ZERO;
	  }
	
	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().div(other.negate());
	    } else {
	      return this.negate().div(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.div(other.negate()).negate();
	  }
	
	  // Repeat the following until the remainder is less than other:  find a
	  // floating-point that approximates remainder / other *from below*, add this
	  // into the result, and subtract it from the remainder.  It is critical that
	  // the approximate value is less than or equal to the real value so that the
	  // remainder never becomes negative.
	  var res = Timestamp.ZERO;
	  var rem = this;
	  while (rem.greaterThanOrEqual(other)) {
	    // Approximate the result of division. This may be a little greater or
	    // smaller than the actual value.
	    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
	
	    // We will tweak the approximate result by changing it in the 48-th digit or
	    // the smallest non-fractional digit, whichever is larger.
	    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
	    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
	
	    // Decrease the approximation until it is smaller than the remainder.  Note
	    // that if it is too large, the product overflows and is negative.
	    var approxRes = Timestamp.fromNumber(approx);
	    var approxRem = approxRes.multiply(other);
	    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
	      approx -= delta;
	      approxRes = Timestamp.fromNumber(approx);
	      approxRem = approxRes.multiply(other);
	    }
	
	    // We know the answer can't be zero... and actually, zero would cause
	    // infinite recursion since we would make no progress.
	    if (approxRes.isZero()) {
	      approxRes = Timestamp.ONE;
	    }
	
	    res = res.add(approxRes);
	    rem = rem.subtract(approxRem);
	  }
	  return res;
	};
	
	/**
	 * Returns this Timestamp modulo the given one.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp by which to mod.
	 * @return {Timestamp} this Timestamp modulo the given one.
	 */
	Timestamp.prototype.modulo = function(other) {
	  return this.subtract(this.div(other).multiply(other));
	};
	
	/**
	 * The bitwise-NOT of this value.
	 *
	 * @method
	 * @return {Timestamp} the bitwise-NOT of this value.
	 */
	Timestamp.prototype.not = function() {
	  return Timestamp.fromBits(~this.low_, ~this.high_);
	};
	
	/**
	 * Returns the bitwise-AND of this Timestamp and the given one.
	 *
	 * @method
	 * @param {Timestamp} other the Timestamp with which to AND.
	 * @return {Timestamp} the bitwise-AND of this and the other.
	 */
	Timestamp.prototype.and = function(other) {
	  return Timestamp.fromBits(this.low_ & other.low_, this.high_ & other.high_);
	};
	
	/**
	 * Returns the bitwise-OR of this Timestamp and the given one.
	 *
	 * @method
	 * @param {Timestamp} other the Timestamp with which to OR.
	 * @return {Timestamp} the bitwise-OR of this and the other.
	 */
	Timestamp.prototype.or = function(other) {
	  return Timestamp.fromBits(this.low_ | other.low_, this.high_ | other.high_);
	};
	
	/**
	 * Returns the bitwise-XOR of this Timestamp and the given one.
	 *
	 * @method
	 * @param {Timestamp} other the Timestamp with which to XOR.
	 * @return {Timestamp} the bitwise-XOR of this and the other.
	 */
	Timestamp.prototype.xor = function(other) {
	  return Timestamp.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
	};
	
	/**
	 * Returns this Timestamp with bits shifted to the left by the given amount.
	 *
	 * @method
	 * @param {number} numBits the number of bits by which to shift.
	 * @return {Timestamp} this shifted to the left by the given amount.
	 */
	Timestamp.prototype.shiftLeft = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var low = this.low_;
	    if (numBits < 32) {
	      var high = this.high_;
	      return Timestamp.fromBits(
	                 low << numBits,
	                 (high << numBits) | (low >>> (32 - numBits)));
	    } else {
	      return Timestamp.fromBits(0, low << (numBits - 32));
	    }
	  }
	};
	
	/**
	 * Returns this Timestamp with bits shifted to the right by the given amount.
	 *
	 * @method
	 * @param {number} numBits the number of bits by which to shift.
	 * @return {Timestamp} this shifted to the right by the given amount.
	 */
	Timestamp.prototype.shiftRight = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var high = this.high_;
	    if (numBits < 32) {
	      var low = this.low_;
	      return Timestamp.fromBits(
	                 (low >>> numBits) | (high << (32 - numBits)),
	                 high >> numBits);
	    } else {
	      return Timestamp.fromBits(
	                 high >> (numBits - 32),
	                 high >= 0 ? 0 : -1);
	    }
	  }
	};
	
	/**
	 * Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.
	 *
	 * @method
	 * @param {number} numBits the number of bits by which to shift.
	 * @return {Timestamp} this shifted to the right by the given amount, with zeros placed into the new leading bits.
	 */
	Timestamp.prototype.shiftRightUnsigned = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var high = this.high_;
	    if (numBits < 32) {
	      var low = this.low_;
	      return Timestamp.fromBits(
	                 (low >>> numBits) | (high << (32 - numBits)),
	                 high >>> numBits);
	    } else if (numBits == 32) {
	      return Timestamp.fromBits(high, 0);
	    } else {
	      return Timestamp.fromBits(high >>> (numBits - 32), 0);
	    }
	  }
	};
	
	/**
	 * Returns a Timestamp representing the given (32-bit) integer value.
	 *
	 * @method
	 * @param {number} value the 32-bit integer in question.
	 * @return {Timestamp} the corresponding Timestamp value.
	 */
	Timestamp.fromInt = function(value) {
	  if (-128 <= value && value < 128) {
	    var cachedObj = Timestamp.INT_CACHE_[value];
	    if (cachedObj) {
	      return cachedObj;
	    }
	  }
	
	  var obj = new Timestamp(value | 0, value < 0 ? -1 : 0);
	  if (-128 <= value && value < 128) {
	    Timestamp.INT_CACHE_[value] = obj;
	  }
	  return obj;
	};
	
	/**
	 * Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.
	 *
	 * @method
	 * @param {number} value the number in question.
	 * @return {Timestamp} the corresponding Timestamp value.
	 */
	Timestamp.fromNumber = function(value) {
	  if (isNaN(value) || !isFinite(value)) {
	    return Timestamp.ZERO;
	  } else if (value <= -Timestamp.TWO_PWR_63_DBL_) {
	    return Timestamp.MIN_VALUE;
	  } else if (value + 1 >= Timestamp.TWO_PWR_63_DBL_) {
	    return Timestamp.MAX_VALUE;
	  } else if (value < 0) {
	    return Timestamp.fromNumber(-value).negate();
	  } else {
	    return new Timestamp(
	               (value % Timestamp.TWO_PWR_32_DBL_) | 0,
	               (value / Timestamp.TWO_PWR_32_DBL_) | 0);
	  }
	};
	
	/**
	 * Returns a Timestamp representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.
	 *
	 * @method
	 * @param {number} lowBits the low 32-bits.
	 * @param {number} highBits the high 32-bits.
	 * @return {Timestamp} the corresponding Timestamp value.
	 */
	Timestamp.fromBits = function(lowBits, highBits) {
	  return new Timestamp(lowBits, highBits);
	};
	
	/**
	 * Returns a Timestamp representation of the given string, written using the given radix.
	 *
	 * @method
	 * @param {string} str the textual representation of the Timestamp.
	 * @param {number} opt_radix the radix in which the text is written.
	 * @return {Timestamp} the corresponding Timestamp value.
	 */
	Timestamp.fromString = function(str, opt_radix) {
	  if (str.length == 0) {
	    throw Error('number format error: empty string');
	  }
	
	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }
	
	  if (str.charAt(0) == '-') {
	    return Timestamp.fromString(str.substring(1), radix).negate();
	  } else if (str.indexOf('-') >= 0) {
	    throw Error('number format error: interior "-" character: ' + str);
	  }
	
	  // Do several (8) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 8));
	
	  var result = Timestamp.ZERO;
	  for (var i = 0; i < str.length; i += 8) {
	    var size = Math.min(8, str.length - i);
	    var value = parseInt(str.substring(i, i + size), radix);
	    if (size < 8) {
	      var power = Timestamp.fromNumber(Math.pow(radix, size));
	      result = result.multiply(power).add(Timestamp.fromNumber(value));
	    } else {
	      result = result.multiply(radixToPower);
	      result = result.add(Timestamp.fromNumber(value));
	    }
	  }
	  return result;
	};
	
	// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
	// from* methods on which they depend.
	
	
	/**
	 * A cache of the Timestamp representations of small integer values.
	 * @type {Object}
	 * @ignore
	 */
	Timestamp.INT_CACHE_ = {};
	
	// NOTE: the compiler should inline these constant values below and then remove
	// these variables, so there should be no runtime penalty for these.
	
	/**
	 * Number used repeated below in calculations.  This must appear before the
	 * first call to any from* function below.
	 * @type {number}
	 * @ignore
	 */
	Timestamp.TWO_PWR_16_DBL_ = 1 << 16;
	
	/**
	 * @type {number}
	 * @ignore
	 */
	Timestamp.TWO_PWR_24_DBL_ = 1 << 24;
	
	/**
	 * @type {number}
	 * @ignore
	 */
	Timestamp.TWO_PWR_32_DBL_ = Timestamp.TWO_PWR_16_DBL_ * Timestamp.TWO_PWR_16_DBL_;
	
	/**
	 * @type {number}
	 * @ignore
	 */
	Timestamp.TWO_PWR_31_DBL_ = Timestamp.TWO_PWR_32_DBL_ / 2;
	
	/**
	 * @type {number}
	 * @ignore
	 */
	Timestamp.TWO_PWR_48_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_16_DBL_;
	
	/**
	 * @type {number}
	 * @ignore
	 */
	Timestamp.TWO_PWR_64_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_32_DBL_;
	
	/**
	 * @type {number}
	 * @ignore
	 */
	Timestamp.TWO_PWR_63_DBL_ = Timestamp.TWO_PWR_64_DBL_ / 2;
	
	/** @type {Timestamp} */
	Timestamp.ZERO = Timestamp.fromInt(0);
	
	/** @type {Timestamp} */
	Timestamp.ONE = Timestamp.fromInt(1);
	
	/** @type {Timestamp} */
	Timestamp.NEG_ONE = Timestamp.fromInt(-1);
	
	/** @type {Timestamp} */
	Timestamp.MAX_VALUE =
	    Timestamp.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
	
	/** @type {Timestamp} */
	Timestamp.MIN_VALUE = Timestamp.fromBits(0, 0x80000000 | 0);
	
	/**
	 * @type {Timestamp}
	 * @ignore
	 */
	Timestamp.TWO_PWR_24_ = Timestamp.fromInt(1 << 24);
	
	/**
	 * Expose.
	 */
	module.exports = Timestamp;
	module.exports.Timestamp = Timestamp;

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Module dependencies.
	 * @ignore
	 */
	var BinaryParser = __webpack_require__(269).BinaryParser;
	
	/**
	 * Machine id.
	 *
	 * Create a random 3-byte value (i.e. unique for this
	 * process). Other drivers use a md5 of the machine id here, but
	 * that would mean an asyc call to gethostname, so we don't bother.
	 * @ignore
	 */
	var MACHINE_ID = parseInt(Math.random() * 0xFFFFFF, 10);
	
	// Regular expression that checks for hex value
	var checkForHexRegExp = new RegExp("^[0-9a-fA-F]{24}$");
	
	/**
	* Create a new ObjectID instance
	*
	* @class Represents a BSON ObjectId type.
	* @param {(string|number)} id Can be a 24 byte hex string, 12 byte binary string or a Number.
	* @property {number} generationTime The generation time of this ObjectId instance
	* @return {ObjectID} instance of ObjectID.
	*/
	var ObjectID = function ObjectID(id) {
	  if(!(this instanceof ObjectID)) return new ObjectID(id);
	  if((id instanceof ObjectID)) return id;
	
	  this._bsontype = 'ObjectID';
	  var __id = null;
	  var valid = ObjectID.isValid(id);
	
	  // Throw an error if it's not a valid setup
	  if(!valid && id != null){
	    throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");
	  } else if(valid && typeof id == 'string' && id.length == 24) {
	    return ObjectID.createFromHexString(id);
	  } else if(id == null || typeof id == 'number') {
	    // convert to 12 byte binary string
	    this.id = this.generate(id);
	  } else if(id != null && id.length === 12) {
	    // assume 12 byte string
	    this.id = id;
	  }
	
	  if(ObjectID.cacheHexString) this.__id = this.toHexString();
	};
	
	// Allow usage of ObjectId as well as ObjectID
	var ObjectId = ObjectID;
	
	// Precomputed hex table enables speedy hex string conversion
	var hexTable = [];
	for (var i = 0; i < 256; i++) {
	  hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);
	}
	
	/**
	* Return the ObjectID id as a 24 byte hex string representation
	*
	* @method
	* @return {string} return the 24 byte hex string representation.
	*/
	ObjectID.prototype.toHexString = function() {
	  if(ObjectID.cacheHexString && this.__id) return this.__id;
	
	  var hexString = '';
	
	  for (var i = 0; i < this.id.length; i++) {
	    hexString += hexTable[this.id.charCodeAt(i)];
	  }
	
	  if(ObjectID.cacheHexString) this.__id = hexString;
	  return hexString;
	};
	
	/**
	* Update the ObjectID index used in generating new ObjectID's on the driver
	*
	* @method
	* @return {number} returns next index value.
	* @ignore
	*/
	ObjectID.prototype.get_inc = function() {
	  return ObjectID.index = (ObjectID.index + 1) % 0xFFFFFF;
	};
	
	/**
	* Update the ObjectID index used in generating new ObjectID's on the driver
	*
	* @method
	* @return {number} returns next index value.
	* @ignore
	*/
	ObjectID.prototype.getInc = function() {
	  return this.get_inc();
	};
	
	/**
	* Generate a 12 byte id string used in ObjectID's
	*
	* @method
	* @param {number} [time] optional parameter allowing to pass in a second based timestamp.
	* @return {string} return the 12 byte id binary string.
	*/
	ObjectID.prototype.generate = function(time) {
	  if ('number' != typeof time) {
	    time = parseInt(Date.now()/1000,10);
	  }
	  
	  var time4Bytes = BinaryParser.encodeInt(time, 32, true, true);
	  /* for time-based ObjectID the bytes following the time will be zeroed */
	  var machine3Bytes = BinaryParser.encodeInt(MACHINE_ID, 24, false);
	  var pid2Bytes = BinaryParser.fromShort(typeof process === 'undefined' ? Math.floor(Math.random() * 100000) : process.pid % 0xFFFF);
	  var index3Bytes = BinaryParser.encodeInt(this.get_inc(), 24, false, true);
	
	  return time4Bytes + machine3Bytes + pid2Bytes + index3Bytes;
	};
	
	/**
	* Converts the id into a 24 byte hex string for printing
	*
	* @return {String} return the 24 byte hex string representation.
	* @ignore
	*/
	ObjectID.prototype.toString = function() {
	  return this.toHexString();
	};
	
	/**
	* Converts to a string representation of this Id.
	*
	* @return {String} return the 24 byte hex string representation.
	* @ignore
	*/
	ObjectID.prototype.inspect = ObjectID.prototype.toString;
	
	/**
	* Converts to its JSON representation.
	*
	* @return {String} return the 24 byte hex string representation.
	* @ignore
	*/
	ObjectID.prototype.toJSON = function() {
	  return this.toHexString();
	};
	
	/**
	* Compares the equality of this ObjectID with `otherID`.
	*
	* @method
	* @param {object} otherID ObjectID instance to compare against.
	* @return {boolean} the result of comparing two ObjectID's
	*/
	ObjectID.prototype.equals = function equals (otherID) {
	  if(otherID == null) return false;
	  var id = (otherID instanceof ObjectID || otherID.toHexString)
	    ? otherID.id
	    : ObjectID.createFromHexString(otherID).id;
	
	  return this.id === id;
	}
	
	/**
	* Returns the generation date (accurate up to the second) that this ID was generated.
	*
	* @method
	* @return {date} the generation date
	*/
	ObjectID.prototype.getTimestamp = function() {
	  var timestamp = new Date();
	  timestamp.setTime(Math.floor(BinaryParser.decodeInt(this.id.substring(0,4), 32, true, true)) * 1000);
	  return timestamp;
	}
	
	/**
	* @ignore
	*/
	ObjectID.index = parseInt(Math.random() * 0xFFFFFF, 10);
	
	/**
	* @ignore
	*/
	ObjectID.createPk = function createPk () {
	  return new ObjectID();
	};
	
	/**
	* Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.
	*
	* @method
	* @param {number} time an integer number representing a number of seconds.
	* @return {ObjectID} return the created ObjectID
	*/
	ObjectID.createFromTime = function createFromTime (time) {
	  var id = BinaryParser.encodeInt(time, 32, true, true) +
	           BinaryParser.encodeInt(0, 64, true, true);
	  return new ObjectID(id);
	};
	
	/**
	* Creates an ObjectID from a hex string representation of an ObjectID.
	*
	* @method
	* @param {string} hexString create a ObjectID from a passed in 24 byte hexstring.
	* @return {ObjectID} return the created ObjectID
	*/
	ObjectID.createFromHexString = function createFromHexString (hexString) {
	  // Throw an error if it's not a valid setup
	  if(typeof hexString === 'undefined' || hexString != null && hexString.length != 24)
	    throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");
	
	  var len = hexString.length;
	
	  if(len > 12*2) {
	    throw new Error('Id cannot be longer than 12 bytes');
	  }
	
	  var result = ''
	    , string
	    , number;
	
	  for (var index = 0; index < len; index += 2) {
	    string = hexString.substr(index, 2);
	    number = parseInt(string, 16);
	    result += BinaryParser.fromByte(number);
	  }
	
	  return new ObjectID(result, hexString);
	};
	
	/**
	* Checks if a value is a valid bson ObjectId
	*
	* @method
	* @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.
	*/
	ObjectID.isValid = function isValid(id) {
	  if(id == null) return false;
	
	  if(id != null && 'number' != typeof id && (id.length != 12 && id.length != 24)) {
	    return false;
	  } else {
	    // Check specifically for hex correctness
	    if(typeof id == 'string' && id.length == 24) return checkForHexRegExp.test(id);
	    return true;
	  }
	};
	
	/**
	* @ignore
	*/
	Object.defineProperty(ObjectID.prototype, "generationTime", {
	   enumerable: true
	 , get: function () {
	     return Math.floor(BinaryParser.decodeInt(this.id.substring(0,4), 32, true, true));
	   }
	 , set: function (value) {
	     var value = BinaryParser.encodeInt(value, 32, true, true);
	     this.id = value + this.id.substr(4);
	     // delete this.__id;
	     this.toHexString();
	   }
	});
	
	/**
	 * Expose.
	 */
	module.exports = ObjectID;
	module.exports.ObjectID = ObjectID;
	module.exports.ObjectId = ObjectID;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * A class representation of the BSON Symbol type.
	 *
	 * @class Represents a BSON Symbol type.
	 * @deprecated
	 * @param {string} value the string representing the symbol.
	 * @return {Symbol}
	 */
	function Symbol(value) {
	  if(!(this instanceof Symbol)) return new Symbol(value);
	  this._bsontype = 'Symbol';
	  this.value = value;
	}
	
	/**
	 * Access the wrapped string value.
	 *
	 * @method
	 * @return {String} returns the wrapped string.
	 */
	Symbol.prototype.valueOf = function() {
	  return this.value;
	};
	
	/**
	 * @ignore
	 */
	Symbol.prototype.toString = function() {
	  return this.value;
	}
	
	/**
	 * @ignore
	 */
	Symbol.prototype.inspect = function() {
	  return this.value;
	}
	
	/**
	 * @ignore
	 */
	Symbol.prototype.toJSON = function() {
	  return this.value;
	}
	
	module.exports = Symbol;
	module.exports.Symbol = Symbol;

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * A class representation of the BSON Code type.
	 *
	 * @class Represents a BSON Code and Code with scope type.
	 * @param {(string|function)} code a string or function.
	 * @param {Object} [scope] an optional scope for the function.
	 * @return {Code}
	 */
	var Code = function Code(code, scope) {
	  if(!(this instanceof Code)) return new Code(code, scope);
	  this._bsontype = 'Code';
	  this.code = code;
	  this.scope = scope == null ? {} : scope;
	};
	
	/**
	 * @ignore
	 */
	Code.prototype.toJSON = function() {
	  return {scope:this.scope, code:this.code};
	}
	
	module.exports = Code;
	module.exports.Code = Code;

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * A class representation of the BSON MinKey type.
	 *
	 * @class Represents a BSON MinKey type.
	 * @return {MinKey} A MinKey instance
	 */
	function MinKey() {
	  if(!(this instanceof MinKey)) return new MinKey();
	  
	  this._bsontype = 'MinKey';
	}
	
	module.exports = MinKey;
	module.exports.MinKey = MinKey;

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * A class representation of the BSON MaxKey type.
	 *
	 * @class Represents a BSON MaxKey type.
	 * @return {MaxKey} A MaxKey instance
	 */
	function MaxKey() {
	  if(!(this instanceof MaxKey)) return new MaxKey();
	  
	  this._bsontype = 'MaxKey';  
	}
	
	module.exports = MaxKey;
	module.exports.MaxKey = MaxKey;

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * A class representation of the BSON DBRef type.
	 *
	 * @class Represents a BSON DbRef type.
	 * @param {string} namespace the collection name.
	 * @param {ObjectID} oid the reference ObjectID.
	 * @param {string} [db] optional db name, if omitted the reference is local to the current db.
	 * @return {DBRef}
	 */
	function DBRef(namespace, oid, db) {
	  if(!(this instanceof DBRef)) return new DBRef(namespace, oid, db);
	  
	  this._bsontype = 'DBRef';
	  this.namespace = namespace;
	  this.oid = oid;
	  this.db = db;
	};
	
	/**
	 * @ignore
	 * @api private
	 */
	DBRef.prototype.toJSON = function() {
	  return {
	    '$ref':this.namespace,
	    '$id':this.oid,
	    '$db':this.db == null ? '' : this.db
	  };
	}
	
	module.exports = DBRef;
	module.exports.DBRef = DBRef;

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 * @ignore
	 */
	if(typeof window === 'undefined') { 
	  var Buffer = __webpack_require__(281).Buffer; // TODO just use global Buffer
	}
	
	/**
	 * A class representation of the BSON Binary type.
	 * 
	 * Sub types
	 *  - **BSON.BSON_BINARY_SUBTYPE_DEFAULT**, default BSON type.
	 *  - **BSON.BSON_BINARY_SUBTYPE_FUNCTION**, BSON function type.
	 *  - **BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY**, BSON byte array type.
	 *  - **BSON.BSON_BINARY_SUBTYPE_UUID**, BSON uuid type.
	 *  - **BSON.BSON_BINARY_SUBTYPE_MD5**, BSON md5 type.
	 *  - **BSON.BSON_BINARY_SUBTYPE_USER_DEFINED**, BSON user defined type.
	 *
	 * @class Represents a BSON Binary type.
	 * @param {Buffer} buffer a buffer object containing the binary data.
	 * @param {Number} [subType] the option binary type.
	 * @return {Binary}
	 */
	function Binary(buffer, subType) {
	  if(!(this instanceof Binary)) return new Binary(buffer, subType);
	  
	  this._bsontype = 'Binary';
	
	  if(buffer instanceof Number) {
	    this.sub_type = buffer;
	    this.position = 0;
	  } else {    
	    this.sub_type = subType == null ? BSON_BINARY_SUBTYPE_DEFAULT : subType;
	    this.position = 0;
	  }
	
	  if(buffer != null && !(buffer instanceof Number)) {
	    // Only accept Buffer, Uint8Array or Arrays
	    if(typeof buffer == 'string') {
	      // Different ways of writing the length of the string for the different types
	      if(typeof Buffer != 'undefined') {
	        this.buffer = new Buffer(buffer);
	      } else if(typeof Uint8Array != 'undefined' || (Object.prototype.toString.call(buffer) == '[object Array]')) {
	        this.buffer = writeStringToArray(buffer);
	      } else {
	        throw new Error("only String, Buffer, Uint8Array or Array accepted");
	      }
	    } else {
	      this.buffer = buffer;      
	    }
	    this.position = buffer.length;
	  } else {
	    if(typeof Buffer != 'undefined') {
	      this.buffer =  new Buffer(Binary.BUFFER_SIZE);      
	    } else if(typeof Uint8Array != 'undefined'){
	      this.buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE));
	    } else {
	      this.buffer = new Array(Binary.BUFFER_SIZE);
	    }
	    // Set position to start of buffer
	    this.position = 0;
	  }
	};
	
	/**
	 * Updates this binary with byte_value.
	 *
	 * @method
	 * @param {string} byte_value a single byte we wish to write.
	 */
	Binary.prototype.put = function put(byte_value) {
	  // If it's a string and a has more than one character throw an error
	  if(byte_value['length'] != null && typeof byte_value != 'number' && byte_value.length != 1) throw new Error("only accepts single character String, Uint8Array or Array");
	  if(typeof byte_value != 'number' && byte_value < 0 || byte_value > 255) throw new Error("only accepts number in a valid unsigned byte range 0-255");
	  
	  // Decode the byte value once
	  var decoded_byte = null;
	  if(typeof byte_value == 'string') {
	    decoded_byte = byte_value.charCodeAt(0);      
	  } else if(byte_value['length'] != null) {
	    decoded_byte = byte_value[0];
	  } else {
	    decoded_byte = byte_value;
	  }
	  
	  if(this.buffer.length > this.position) {
	    this.buffer[this.position++] = decoded_byte;
	  } else {
	    if(typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {    
	      // Create additional overflow buffer
	      var buffer = new Buffer(Binary.BUFFER_SIZE + this.buffer.length);
	      // Combine the two buffers together
	      this.buffer.copy(buffer, 0, 0, this.buffer.length);
	      this.buffer = buffer;
	      this.buffer[this.position++] = decoded_byte;
	    } else {
	      var buffer = null;
	      // Create a new buffer (typed or normal array)
	      if(Object.prototype.toString.call(this.buffer) == '[object Uint8Array]') {
	        buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE + this.buffer.length));
	      } else {
	        buffer = new Array(Binary.BUFFER_SIZE + this.buffer.length);
	      }      
	      
	      // We need to copy all the content to the new array
	      for(var i = 0; i < this.buffer.length; i++) {
	        buffer[i] = this.buffer[i];
	      }
	      
	      // Reassign the buffer
	      this.buffer = buffer;
	      // Write the byte
	      this.buffer[this.position++] = decoded_byte;
	    }
	  }
	};
	
	/**
	 * Writes a buffer or string to the binary.
	 *
	 * @method
	 * @param {(Buffer|string)} string a string or buffer to be written to the Binary BSON object.
	 * @param {number} offset specify the binary of where to write the content.
	 * @return {null}
	 */
	Binary.prototype.write = function write(string, offset) {
	  offset = typeof offset == 'number' ? offset : this.position;
	
	  // If the buffer is to small let's extend the buffer
	  if(this.buffer.length < offset + string.length) {
	    var buffer = null;
	    // If we are in node.js
	    if(typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {      
	      buffer = new Buffer(this.buffer.length + string.length);
	      this.buffer.copy(buffer, 0, 0, this.buffer.length);      
	    } else if(Object.prototype.toString.call(this.buffer) == '[object Uint8Array]') {
	      // Create a new buffer
	      buffer = new Uint8Array(new ArrayBuffer(this.buffer.length + string.length))
	      // Copy the content
	      for(var i = 0; i < this.position; i++) {
	        buffer[i] = this.buffer[i];
	      }
	    }
	    
	    // Assign the new buffer
	    this.buffer = buffer;
	  }
	
	  if(typeof Buffer != 'undefined' && Buffer.isBuffer(string) && Buffer.isBuffer(this.buffer)) {
	    string.copy(this.buffer, offset, 0, string.length);
	    this.position = (offset + string.length) > this.position ? (offset + string.length) : this.position;
	    // offset = string.length
	  } else if(typeof Buffer != 'undefined' && typeof string == 'string' && Buffer.isBuffer(this.buffer)) {
	    this.buffer.write(string, 'binary', offset);
	    this.position = (offset + string.length) > this.position ? (offset + string.length) : this.position;
	    // offset = string.length;
	  } else if(Object.prototype.toString.call(string) == '[object Uint8Array]' 
	    || Object.prototype.toString.call(string) == '[object Array]' && typeof string != 'string') {      
	    for(var i = 0; i < string.length; i++) {
	      this.buffer[offset++] = string[i];
	    }    
	
	    this.position = offset > this.position ? offset : this.position;
	  } else if(typeof string == 'string') {
	    for(var i = 0; i < string.length; i++) {
	      this.buffer[offset++] = string.charCodeAt(i);
	    }
	
	    this.position = offset > this.position ? offset : this.position;
	  }
	};
	
	/**
	 * Reads **length** bytes starting at **position**.
	 *
	 * @method
	 * @param {number} position read from the given position in the Binary.
	 * @param {number} length the number of bytes to read.
	 * @return {Buffer}
	 */
	Binary.prototype.read = function read(position, length) {
	  length = length && length > 0
	    ? length
	    : this.position;
	  
	  // Let's return the data based on the type we have
	  if(this.buffer['slice']) {
	    return this.buffer.slice(position, position + length);
	  } else {
	    // Create a buffer to keep the result
	    var buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(length)) : new Array(length);
	    for(var i = 0; i < length; i++) {
	      buffer[i] = this.buffer[position++];
	    }
	  }
	  // Return the buffer
	  return buffer;
	};
	
	/**
	 * Returns the value of this binary as a string.
	 *
	 * @method
	 * @return {string}
	 */
	Binary.prototype.value = function value(asRaw) {
	  asRaw = asRaw == null ? false : asRaw;  
	
	  // Optimize to serialize for the situation where the data == size of buffer
	  if(asRaw && typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer) && this.buffer.length == this.position)
	    return this.buffer;
	  
	  // If it's a node.js buffer object
	  if(typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {
	    return asRaw ? this.buffer.slice(0, this.position) : this.buffer.toString('binary', 0, this.position);
	  } else {
	    if(asRaw) {
	      // we support the slice command use it
	      if(this.buffer['slice'] != null) {
	        return this.buffer.slice(0, this.position);
	      } else {
	        // Create a new buffer to copy content to
	        var newBuffer = Object.prototype.toString.call(this.buffer) == '[object Uint8Array]' ? new Uint8Array(new ArrayBuffer(this.position)) : new Array(this.position);
	        // Copy content
	        for(var i = 0; i < this.position; i++) {
	          newBuffer[i] = this.buffer[i];
	        }
	        // Return the buffer
	        return newBuffer;
	      }
	    } else {
	      return convertArraytoUtf8BinaryString(this.buffer, 0, this.position);
	    }
	  }
	};
	
	/**
	 * Length.
	 *
	 * @method
	 * @return {number} the length of the binary.
	 */
	Binary.prototype.length = function length() {
	  return this.position;
	};
	
	/**
	 * @ignore
	 */
	Binary.prototype.toJSON = function() {
	  return this.buffer != null ? this.buffer.toString('base64') : '';
	}
	
	/**
	 * @ignore
	 */
	Binary.prototype.toString = function(format) {
	  return this.buffer != null ? this.buffer.slice(0, this.position).toString(format) : '';
	}
	
	/**
	 * Binary default subtype
	 * @ignore 
	 */
	var BSON_BINARY_SUBTYPE_DEFAULT = 0;
	
	/**
	 * @ignore
	 */
	var writeStringToArray = function(data) {
	  // Create a buffer
	  var buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(data.length)) : new Array(data.length);
	  // Write the content to the buffer
	  for(var i = 0; i < data.length; i++) {
	    buffer[i] = data.charCodeAt(i);
	  }  
	  // Write the string to the buffer
	  return buffer;
	}
	
	/**
	 * Convert Array ot Uint8Array to Binary String
	 *
	 * @ignore
	 */
	var convertArraytoUtf8BinaryString = function(byteArray, startIndex, endIndex) {
	  var result = "";
	  for(var i = startIndex; i < endIndex; i++) {
	   result = result + String.fromCharCode(byteArray[i]);
	  }
	  return result;  
	};
	
	Binary.BUFFER_SIZE = 256;
	
	/**
	 * Default BSON type
	 *  
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_DEFAULT = 0;
	/**
	 * Function BSON type
	 *  
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_FUNCTION = 1;
	/**
	 * Byte Array BSON type
	 *  
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_BYTE_ARRAY = 2;
	/**
	 * OLD UUID BSON type
	 *  
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_UUID_OLD = 3;
	/**
	 * UUID BSON type
	 *  
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_UUID = 4;
	/**
	 * MD5 BSON type
	 *  
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_MD5 = 5;
	/**
	 * User BSON type
	 *  
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_USER_DEFINED = 128;
	
	/**
	 * Expose.
	 */
	module.exports = Binary;
	module.exports.Binary = Binary;

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Binary Parser.
	 * Jonas Raoni Soares Silva
	 * http://jsfromhell.com/classes/binary-parser [v1.0]
	 */
	var chr = String.fromCharCode;
	
	var maxBits = [];
	for (var i = 0; i < 64; i++) {
		maxBits[i] = Math.pow(2, i);
	}
	
	function BinaryParser (bigEndian, allowExceptions) {
	  if(!(this instanceof BinaryParser)) return new BinaryParser(bigEndian, allowExceptions);
	  
		this.bigEndian = bigEndian;
		this.allowExceptions = allowExceptions;
	};
	
	BinaryParser.warn = function warn (msg) {
		if (this.allowExceptions) {
			throw new Error(msg);
	  }
	
		return 1;
	};
	
	BinaryParser.decodeFloat = function decodeFloat (data, precisionBits, exponentBits) {
		var b = new this.Buffer(this.bigEndian, data);
	
		b.checkBuffer(precisionBits + exponentBits + 1);
	
		var bias = maxBits[exponentBits - 1] - 1
	    , signal = b.readBits(precisionBits + exponentBits, 1)
	    , exponent = b.readBits(precisionBits, exponentBits)
	    , significand = 0
	    , divisor = 2
	    , curByte = b.buffer.length + (-precisionBits >> 3) - 1;
	
		do {
			for (var byteValue = b.buffer[ ++curByte ], startBit = precisionBits % 8 || 8, mask = 1 << startBit; mask >>= 1; ( byteValue & mask ) && ( significand += 1 / divisor ), divisor *= 2 );
		} while (precisionBits -= startBit);
	
		return exponent == ( bias << 1 ) + 1 ? significand ? NaN : signal ? -Infinity : +Infinity : ( 1 + signal * -2 ) * ( exponent || significand ? !exponent ? Math.pow( 2, -bias + 1 ) * significand : Math.pow( 2, exponent - bias ) * ( 1 + significand ) : 0 );
	};
	
	BinaryParser.decodeInt = function decodeInt (data, bits, signed, forceBigEndian) {
	  var b = new this.Buffer(this.bigEndian || forceBigEndian, data)
	      , x = b.readBits(0, bits)
	      , max = maxBits[bits]; //max = Math.pow( 2, bits );
	  
	  return signed && x >= max / 2
	      ? x - max
	      : x;
	};
	
	BinaryParser.encodeFloat = function encodeFloat (data, precisionBits, exponentBits) {
		var bias = maxBits[exponentBits - 1] - 1
	    , minExp = -bias + 1
	    , maxExp = bias
	    , minUnnormExp = minExp - precisionBits
	    , n = parseFloat(data)
	    , status = isNaN(n) || n == -Infinity || n == +Infinity ? n : 0
	    ,	exp = 0
	    , len = 2 * bias + 1 + precisionBits + 3
	    , bin = new Array(len)
	    , signal = (n = status !== 0 ? 0 : n) < 0
	    , intPart = Math.floor(n = Math.abs(n))
	    , floatPart = n - intPart
	    , lastBit
	    , rounded
	    , result
	    , i
	    , j;
	
		for (i = len; i; bin[--i] = 0);
	
		for (i = bias + 2; intPart && i; bin[--i] = intPart % 2, intPart = Math.floor(intPart / 2));
	
		for (i = bias + 1; floatPart > 0 && i; (bin[++i] = ((floatPart *= 2) >= 1) - 0 ) && --floatPart);
	
		for (i = -1; ++i < len && !bin[i];);
	
		if (bin[(lastBit = precisionBits - 1 + (i = (exp = bias + 1 - i) >= minExp && exp <= maxExp ? i + 1 : bias + 1 - (exp = minExp - 1))) + 1]) {
			if (!(rounded = bin[lastBit])) {
				for (j = lastBit + 2; !rounded && j < len; rounded = bin[j++]);
			}
	
			for (j = lastBit + 1; rounded && --j >= 0; (bin[j] = !bin[j] - 0) && (rounded = 0));
		}
	
		for (i = i - 2 < 0 ? -1 : i - 3; ++i < len && !bin[i];);
	
		if ((exp = bias + 1 - i) >= minExp && exp <= maxExp) {
			++i;
	  } else if (exp < minExp) {
			exp != bias + 1 - len && exp < minUnnormExp && this.warn("encodeFloat::float underflow");
			i = bias + 1 - (exp = minExp - 1);
		}
	
		if (intPart || status !== 0) {
			this.warn(intPart ? "encodeFloat::float overflow" : "encodeFloat::" + status);
			exp = maxExp + 1;
			i = bias + 2;
	
			if (status == -Infinity) {
				signal = 1;
	    } else if (isNaN(status)) {
				bin[i] = 1;
	    }
		}
	
		for (n = Math.abs(exp + bias), j = exponentBits + 1, result = ""; --j; result = (n % 2) + result, n = n >>= 1);
	
		for (n = 0, j = 0, i = (result = (signal ? "1" : "0") + result + bin.slice(i, i + precisionBits).join("")).length, r = []; i; j = (j + 1) % 8) {
			n += (1 << j) * result.charAt(--i);
			if (j == 7) {
				r[r.length] = String.fromCharCode(n);
				n = 0;
			}
		}
	
		r[r.length] = n
	    ? String.fromCharCode(n)
	    : "";
	
		return (this.bigEndian ? r.reverse() : r).join("");
	};
	
	BinaryParser.encodeInt = function encodeInt (data, bits, signed, forceBigEndian) {
		var max = maxBits[bits];
	
	  if (data >= max || data < -(max / 2)) {
	    this.warn("encodeInt::overflow");
	    data = 0;
	  }
	
		if (data < 0) {
	    data += max;
	  }
	
		for (var r = []; data; r[r.length] = String.fromCharCode(data % 256), data = Math.floor(data / 256));
	
		for (bits = -(-bits >> 3) - r.length; bits--; r[r.length] = "\0");
	
	  return ((this.bigEndian || forceBigEndian) ? r.reverse() : r).join("");
	};
	
	BinaryParser.toSmall    = function( data ){ return this.decodeInt( data,  8, true  ); };
	BinaryParser.fromSmall  = function( data ){ return this.encodeInt( data,  8, true  ); };
	BinaryParser.toByte     = function( data ){ return this.decodeInt( data,  8, false ); };
	BinaryParser.fromByte   = function( data ){ return this.encodeInt( data,  8, false ); };
	BinaryParser.toShort    = function( data ){ return this.decodeInt( data, 16, true  ); };
	BinaryParser.fromShort  = function( data ){ return this.encodeInt( data, 16, true  ); };
	BinaryParser.toWord     = function( data ){ return this.decodeInt( data, 16, false ); };
	BinaryParser.fromWord   = function( data ){ return this.encodeInt( data, 16, false ); };
	BinaryParser.toInt      = function( data ){ return this.decodeInt( data, 32, true  ); };
	BinaryParser.fromInt    = function( data ){ return this.encodeInt( data, 32, true  ); };
	BinaryParser.toLong     = function( data ){ return this.decodeInt( data, 64, true  ); };
	BinaryParser.fromLong   = function( data ){ return this.encodeInt( data, 64, true  ); };
	BinaryParser.toDWord    = function( data ){ return this.decodeInt( data, 32, false ); };
	BinaryParser.fromDWord  = function( data ){ return this.encodeInt( data, 32, false ); };
	BinaryParser.toQWord    = function( data ){ return this.decodeInt( data, 64, true ); };
	BinaryParser.fromQWord  = function( data ){ return this.encodeInt( data, 64, true ); };
	BinaryParser.toFloat    = function( data ){ return this.decodeFloat( data, 23, 8   ); };
	BinaryParser.fromFloat  = function( data ){ return this.encodeFloat( data, 23, 8   ); };
	BinaryParser.toDouble   = function( data ){ return this.decodeFloat( data, 52, 11  ); };
	BinaryParser.fromDouble = function( data ){ return this.encodeFloat( data, 52, 11  ); };
	
	// Factor out the encode so it can be shared by add_header and push_int32
	BinaryParser.encode_int32 = function encode_int32 (number, asArray) {
	  var a, b, c, d, unsigned;
	  unsigned = (number < 0) ? (number + 0x100000000) : number;
	  a = Math.floor(unsigned / 0xffffff);
	  unsigned &= 0xffffff;
	  b = Math.floor(unsigned / 0xffff);
	  unsigned &= 0xffff;
	  c = Math.floor(unsigned / 0xff);
	  unsigned &= 0xff;
	  d = Math.floor(unsigned);
	  return asArray ? [chr(a), chr(b), chr(c), chr(d)] : chr(a) + chr(b) + chr(c) + chr(d);
	};
	
	BinaryParser.encode_int64 = function encode_int64 (number) {
	  var a, b, c, d, e, f, g, h, unsigned;
	  unsigned = (number < 0) ? (number + 0x10000000000000000) : number;
	  a = Math.floor(unsigned / 0xffffffffffffff);
	  unsigned &= 0xffffffffffffff;
	  b = Math.floor(unsigned / 0xffffffffffff);
	  unsigned &= 0xffffffffffff;
	  c = Math.floor(unsigned / 0xffffffffff);
	  unsigned &= 0xffffffffff;
	  d = Math.floor(unsigned / 0xffffffff);
	  unsigned &= 0xffffffff;
	  e = Math.floor(unsigned / 0xffffff);
	  unsigned &= 0xffffff;
	  f = Math.floor(unsigned / 0xffff);
	  unsigned &= 0xffff;
	  g = Math.floor(unsigned / 0xff);
	  unsigned &= 0xff;
	  h = Math.floor(unsigned);
	  return chr(a) + chr(b) + chr(c) + chr(d) + chr(e) + chr(f) + chr(g) + chr(h);
	};
	
	/**
	 * UTF8 methods
	 */
	
	// Take a raw binary string and return a utf8 string
	BinaryParser.decode_utf8 = function decode_utf8 (binaryStr) {
	  var len = binaryStr.length
	    , decoded = ''
	    , i = 0
	    , c = 0
	    , c1 = 0
	    , c2 = 0
	    , c3;
	
	  while (i < len) {
	    c = binaryStr.charCodeAt(i);
	    if (c < 128) {
	      decoded += String.fromCharCode(c);
	      i++;
	    } else if ((c > 191) && (c < 224)) {
		    c2 = binaryStr.charCodeAt(i+1);
	      decoded += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
	      i += 2;
	    } else {
		    c2 = binaryStr.charCodeAt(i+1);
		    c3 = binaryStr.charCodeAt(i+2);
	      decoded += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
	      i += 3;
	    }
	  }
	
	  return decoded;
	};
	
	// Encode a cstring
	BinaryParser.encode_cstring = function encode_cstring (s) {
	  return unescape(encodeURIComponent(s)) + BinaryParser.fromByte(0);
	};
	
	// Take a utf8 string and return a binary string
	BinaryParser.encode_utf8 = function encode_utf8 (s) {
	  var a = ""
	    , c;
	
	  for (var n = 0, len = s.length; n < len; n++) {
	    c = s.charCodeAt(n);
	
	    if (c < 128) {
		    a += String.fromCharCode(c);
	    } else if ((c > 127) && (c < 2048)) {
		    a += String.fromCharCode((c>>6) | 192) ;
		    a += String.fromCharCode((c&63) | 128);
	    } else {
	      a += String.fromCharCode((c>>12) | 224);
	      a += String.fromCharCode(((c>>6) & 63) | 128);
	      a += String.fromCharCode((c&63) | 128);
	    }
	  }
	
	  return a;
	};
	
	BinaryParser.hprint = function hprint (s) {
	  var number;
	
	  for (var i = 0, len = s.length; i < len; i++) {
	    if (s.charCodeAt(i) < 32) {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(16)
	        : s.charCodeAt(i).toString(16);        
	      process.stdout.write(number + " ")
	    } else {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(16)
	        : s.charCodeAt(i).toString(16);
	        process.stdout.write(number + " ")
	    }
	  }
	  
	  process.stdout.write("\n\n");
	};
	
	BinaryParser.ilprint = function hprint (s) {
	  var number;
	
	  for (var i = 0, len = s.length; i < len; i++) {
	    if (s.charCodeAt(i) < 32) {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(10)
	        : s.charCodeAt(i).toString(10);
	
	      __webpack_require__(282).debug(number+' : ');
	    } else {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(10)
	        : s.charCodeAt(i).toString(10);
	      __webpack_require__(282).debug(number+' : '+ s.charAt(i));
	    }
	  }
	};
	
	BinaryParser.hlprint = function hprint (s) {
	  var number;
	
	  for (var i = 0, len = s.length; i < len; i++) {
	    if (s.charCodeAt(i) < 32) {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(16)
	        : s.charCodeAt(i).toString(16);
	      __webpack_require__(282).debug(number+' : ');
	    } else {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(16)
	        : s.charCodeAt(i).toString(16);
	      __webpack_require__(282).debug(number+' : '+ s.charAt(i));
	    }
	  }
	};
	
	/**
	 * BinaryParser buffer constructor.
	 */
	function BinaryParserBuffer (bigEndian, buffer) {
	  this.bigEndian = bigEndian || 0;
	  this.buffer = [];
	  this.setBuffer(buffer);
	};
	
	BinaryParserBuffer.prototype.setBuffer = function setBuffer (data) {
	  var l, i, b;
	
		if (data) {
	    i = l = data.length;
	    b = this.buffer = new Array(l);
			for (; i; b[l - i] = data.charCodeAt(--i));
			this.bigEndian && b.reverse();
		}
	};
	
	BinaryParserBuffer.prototype.hasNeededBits = function hasNeededBits (neededBits) {
		return this.buffer.length >= -(-neededBits >> 3);
	};
	
	BinaryParserBuffer.prototype.checkBuffer = function checkBuffer (neededBits) {
		if (!this.hasNeededBits(neededBits)) {
			throw new Error("checkBuffer::missing bytes");
	  }
	};
	
	BinaryParserBuffer.prototype.readBits = function readBits (start, length) {
		//shl fix: Henri Torgemane ~1996 (compressed by Jonas Raoni)
	
		function shl (a, b) {
			for (; b--; a = ((a %= 0x7fffffff + 1) & 0x40000000) == 0x40000000 ? a * 2 : (a - 0x40000000) * 2 + 0x7fffffff + 1);
			return a;
		}
	
		if (start < 0 || length <= 0) {
			return 0;
	  }
	
		this.checkBuffer(start + length);
	
	  var offsetLeft
	    , offsetRight = start % 8
	    , curByte = this.buffer.length - ( start >> 3 ) - 1
	    , lastByte = this.buffer.length + ( -( start + length ) >> 3 )
	    , diff = curByte - lastByte
	    , sum = ((this.buffer[ curByte ] >> offsetRight) & ((1 << (diff ? 8 - offsetRight : length)) - 1)) + (diff && (offsetLeft = (start + length) % 8) ? (this.buffer[lastByte++] & ((1 << offsetLeft) - 1)) << (diff-- << 3) - offsetRight : 0);
	
		for(; diff; sum += shl(this.buffer[lastByte++], (diff-- << 3) - offsetRight));
	
		return sum;
	};
	
	/**
	 * Expose.
	 */
	BinaryParser.Buffer = BinaryParserBuffer;
	
	exports.BinaryParser = BinaryParser;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright (c) 2008, Fair Oaks Labs, Inc.
	// All rights reserved.
	// 
	// Redistribution and use in source and binary forms, with or without
	// modification, are permitted provided that the following conditions are met:
	// 
	//  * Redistributions of source code must retain the above copyright notice,
	//    this list of conditions and the following disclaimer.
	// 
	//  * Redistributions in binary form must reproduce the above copyright notice,
	//    this list of conditions and the following disclaimer in the documentation
	//    and/or other materials provided with the distribution.
	// 
	//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors
	//    may be used to endorse or promote products derived from this software
	//    without specific prior written permission.
	// 
	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
	// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	// POSSIBILITY OF SUCH DAMAGE.
	//
	//
	// Modifications to writeIEEE754 to support negative zeroes made by Brian White
	
	var readIEEE754 = function(buffer, offset, endian, mLen, nBytes) {
	  var e, m,
	      bBE = (endian === 'big'),
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      nBits = -7,
	      i = bBE ? 0 : (nBytes - 1),
	      d = bBE ? 1 : -1,
	      s = buffer[offset + i];
	
	  i += d;
	
	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
	
	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
	
	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity);
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	};
	
	var writeIEEE754 = function(buffer, value, offset, endian, mLen, nBytes) {
	  var e, m, c,
	      bBE = (endian === 'big'),
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
	      i = bBE ? (nBytes-1) : 0,
	      d = bBE ? -1 : 1,
	      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
	
	  value = Math.abs(value);
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e+eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
	
	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
	
	  buffer[offset + i - d] |= s * 128;
	};
	
	exports.readIEEE754 = readIEEE754;
	exports.writeIEEE754 = writeIEEE754;

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';
	
	var util = __webpack_require__(282);
	var EventEmitter = __webpack_require__(298).EventEmitter;
	var CHANGE_EVENT = 'change';
	
	/**
	 * @class BaseStore
	 * @extends EventEmitter
	 * @param dispatcher The dispatcher interface
	 * @constructor
	 */
	function BaseStore(dispatcher) {
	    this.dispatcher = dispatcher;
	    this._hasChanged = false;
	    if (this.initialize) {
	        this.initialize();
	    }
	}
	
	util.inherits(BaseStore, EventEmitter);
	
	/**
	 * Convenience method for getting the store context object.
	 * @method getContext
	 * @return {Object} Returns the store context object.
	 */
	BaseStore.prototype.getContext = function getContext() {
	    return this.dispatcher.getContext();
	};
	
	/**
	 * Add a listener for the change event
	 * @method addChangeListener
	 * @param {Function} callback
	 */
	BaseStore.prototype.addChangeListener = function addChangeListener(callback) {
	    this.on(CHANGE_EVENT, callback);
	};
	
	/**
	 * Remove a listener for the change event
	 * @method removeChangeListener
	 * @param {Function} callback
	 */
	BaseStore.prototype.removeChangeListener = function removeChangeListener(callback) {
	    this.removeListener(CHANGE_EVENT, callback);
	};
	
	/**
	 * Determines whether the store should dehydrate or not. By default, only dehydrates
	 * if the store has emitted an update event. If no update has been emitted, it is assumed
	 * that the store is in its default state and therefore does not need to dehydrate.
	 * @method shouldDehydrate
	 * @returns {boolean}
	 */
	BaseStore.prototype.shouldDehydrate = function shouldDehydrate() {
	    return this._hasChanged;
	};
	
	/**
	 * Emit a change event
	 * @method emitChange
	 * @param {*} param=this
	 */
	BaseStore.prototype.emitChange = function emitChange(param) {
	    this._hasChanged = true;
	    this.emit(CHANGE_EVENT, param || this);
	};
	
	module.exports = BaseStore;


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';
	
	var Action = __webpack_require__(300),
	    DEFAULT = 'default';
	
	module.exports = function () {
	    var debug = __webpack_require__(4)('Dispatchr:dispatcher');
	
	    /**
	     * @class Dispatcher
	     * @param {Object} context The context to be used for store instances
	     * @constructor
	     */
	    function Dispatcher (context) {
	        this.storeInstances = {};
	        this.currentAction = null;
	        this.dispatcherInterface = {
	            getContext: function getContext() { return context; },
	            getStore: this.getStore.bind(this),
	            waitFor: this.waitFor.bind(this)
	        };
	    }
	
	    Dispatcher.stores = {};
	    Dispatcher.handlers = {
	        'default': []
	    };
	
	    /**
	     * Registers a store so that it can handle actions.
	     * @method registerStore
	     * @static
	     * @param {Object} store A store class to be registered. The store should have a static
	     *      `name` property so that it can be loaded later.
	     * @throws {Error} if store is invalid
	     * @throws {Error} if store is already registered
	     */
	    Dispatcher.registerStore = function registerStore(store) {
	        if ('function' !== typeof store) {
	            throw new Error('registerStore requires a constructor as first parameter');
	        }
	        var storeName = Dispatcher.getStoreName(store);
	        if (!storeName) {
	            throw new Error('Store is required to have a `storeName` property.');
	        }
	        if (Dispatcher.stores[storeName]) {
	            if (Dispatcher.stores[storeName] === store) {
	                // Store is already registered, nothing to do
	                return;
	            }
	            throw new Error('Store with name `' + storeName + '` has already been registered.');
	        }
	        Dispatcher.stores[storeName] = store;
	        if (store.handlers) {
	            Object.keys(store.handlers).forEach(function storeHandlersEach(action) {
	                var handler = store.handlers[action];
	                Dispatcher._registerHandler(action, storeName, handler);
	            });
	        }
	    };
	
	    /**
	     * Method to discover if a storeName has been registered
	     * @method isRegistered
	     * @static
	     * @param {Object|String} store The store to check
	     * @returns {boolean}
	     */
	    Dispatcher.isRegistered = function isRegistered(store) {
	        var storeName = Dispatcher.getStoreName(store),
	            storeInstance = Dispatcher.stores[storeName];
	
	        if (!storeInstance) {
	            return false;
	        }
	
	        if ('function' === typeof store) {
	            if (store !== storeInstance) {
	                return false;
	            }
	        }
	        return true;
	    };
	
	    /**
	     * Gets a name from a store
	     * @method getStoreName
	     * @static
	     * @param {String|Object} store The store name or class from which to extract
	     *      the name
	     * @returns {String}
	     */
	    Dispatcher.getStoreName = function getStoreName(store) {
	        if ('string' === typeof store) {
	            return store;
	        }
	        return store.storeName;
	    };
	
	    /**
	     * Adds a handler function to be called for the given action
	     * @method registerHandler
	     * @private
	     * @static
	     * @param {String} action Name of the action
	     * @param {String} name Name of the store that handles the action
	     * @param {String|Function} handler The function or name of the method that handles the action
	     * @returns {number}
	     */
	    Dispatcher._registerHandler = function registerHandler(action, name, handler) {
	        Dispatcher.handlers[action] = Dispatcher.handlers[action] || [];
	        Dispatcher.handlers[action].push({
	            name: Dispatcher.getStoreName(name),
	            handler: handler
	        });
	        return Dispatcher.handlers.length - 1;
	    };
	
	    /**
	     * Returns a single store instance and creates one if it doesn't already exist
	     * @method getStore
	     * @param {String} name The name of the instance
	     * @returns {Object} The store instance
	     * @throws {Error} if store is not registered
	     */
	    Dispatcher.prototype.getStore = function getStore(name) {
	        var storeName = Dispatcher.getStoreName(name);
	        if (!this.storeInstances[storeName]) {
	            var Store = Dispatcher.stores[storeName];
	            if (!Store) {
	                throw new Error('Store ' + storeName + ' was not registered.');
	            }
	            this.storeInstances[storeName] = new (Dispatcher.stores[storeName])(this.dispatcherInterface);
	        }
	        return this.storeInstances[storeName];
	    };
	
	    /**
	     * Dispatches a new action or queues it up if one is already in progress
	     * @method dispatch
	     * @param {String} actionName Name of the action to be dispatched
	     * @param {Object} payload Parameters to describe the action
	     * @throws {Error} if store has handler registered that does not exist
	     */
	    Dispatcher.prototype.dispatch = function dispatch(actionName, payload) {
	        if (!actionName) {
	            throw new Error('actionName parameter `' + actionName + '` is invalid.');
	        }
	
	        if (this.currentAction) {
	            throw new Error('Cannot call dispatch while another dispatch is executing. Attempted to execute \'' + actionName + '\' but \'' + this.currentAction.name + '\' is already executing.');
	        }
	        var actionHandlers = Dispatcher.handlers[actionName] || [],
	            defaultHandlers = Dispatcher.handlers[DEFAULT] || [];
	        if (!actionHandlers.length && !defaultHandlers.length) {
	            debug(actionName + ' does not have any registered handlers');
	            return;
	        }
	        debug('dispatching ' + actionName, payload);
	        this.currentAction = new Action(actionName, payload);
	        var self = this,
	            allHandlers = actionHandlers.concat(defaultHandlers),
	            handlerFns = {};
	
	        try {
	            allHandlers.forEach(function actionHandlersEach(store) {
	                if (handlerFns[store.name]) {
	                    // Don't call the default if the store has an explicit action handler
	                    return;
	                }
	                var storeInstance = self.getStore(store.name);
	                if ('function' === typeof store.handler) {
	                    handlerFns[store.name] = store.handler.bind(storeInstance);
	                } else {
	                    if (!storeInstance[store.handler]) {
	                        throw new Error(store.name + ' does not have a method called ' + store.handler);
	                    }
	                    handlerFns[store.name] = storeInstance[store.handler].bind(storeInstance);
	                }
	            });
	            this.currentAction.execute(handlerFns);
	        } catch (e) {
	            throw e;
	        } finally {
	            debug('finished ' + actionName);
	            this.currentAction = null;
	        }
	    };
	
	    /**
	     * Returns a raw data object representation of the current state of the
	     * dispatcher and all store instances. If the store implements a shouldDehdyrate
	     * function, then it will be called and only dehydrate if the method returns `true`
	     * @method dehydrate
	     * @returns {Object} dehydrated dispatcher data
	     */
	    Dispatcher.prototype.dehydrate = function dehydrate() {
	        var self = this,
	            stores = {};
	        Object.keys(self.storeInstances).forEach(function storeInstancesEach(storeName) {
	            var store = self.storeInstances[storeName];
	            if (!store.dehydrate || (store.shouldDehydrate && !store.shouldDehydrate())) {
	                return;
	            }
	            stores[storeName] = store.dehydrate();
	        });
	        return {
	            stores: stores
	        };
	    };
	
	    /**
	     * Takes a raw data object and rehydrates the dispatcher and store instances
	     * @method rehydrate
	     * @param {Object} dispatcherState raw state typically retrieved from `dehydrate`
	     *      method
	     */
	    Dispatcher.prototype.rehydrate = function rehydrate(dispatcherState) {
	        var self = this;
	        if (dispatcherState.stores) {
	            Object.keys(dispatcherState.stores).forEach(function storeStateEach(storeName) {
	                var state = dispatcherState.stores[storeName],
	                    store = self.getStore(storeName);
	                if (store.rehydrate) {
	                    store.rehydrate(state);
	                }
	            });
	        }
	    };
	
	    /**
	     * Waits until all stores have finished handling an action and then calls
	     * the callback
	     * @method waitFor
	     * @param {String|String[]} stores An array of stores as strings to wait for
	     * @param {Function} callback Called after all stores have completed handling their actions
	     * @throws {Error} if there is no action dispatching
	     */
	    Dispatcher.prototype.waitFor = function waitFor(stores, callback) {
	        if (!this.currentAction) {
	            throw new Error('waitFor called even though there is no action dispatching');
	        }
	        this.currentAction.waitFor(stores, callback);
	    };
	
	    return Dispatcher;
	};


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(clearImmediate, process) {(function (global, undefined) {
	    "use strict";
	
	    if (global.setImmediate) {
	        return;
	    }
	
	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var setImmediate;
	
	    function addFromSetImmediateArguments(args) {
	        tasksByHandle[nextHandle] = partiallyApplied.apply(undefined, args);
	        return nextHandle++;
	    }
	
	    // This function accepts the same arguments as setImmediate, but
	    // returns a function that requires no arguments.
	    function partiallyApplied(handler) {
	        var args = [].slice.call(arguments, 1);
	        return function() {
	            if (typeof handler === "function") {
	                handler.apply(undefined, args);
	            } else {
	                (new Function("" + handler))();
	            }
	        };
	    }
	
	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(partiallyApplied(runIfPresent, handle), 0);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    task();
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }
	
	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }
	
	    function installNextTickImplementation() {
	        setImmediate = function() {
	            var handle = addFromSetImmediateArguments(arguments);
	            process.nextTick(partiallyApplied(runIfPresent, handle));
	            return handle;
	        };
	    }
	
	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }
	
	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
	
	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };
	
	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }
	
	        setImmediate = function() {
	            var handle = addFromSetImmediateArguments(arguments);
	            global.postMessage(messagePrefix + handle, "*");
	            return handle;
	        };
	    }
	
	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };
	
	        setImmediate = function() {
	            var handle = addFromSetImmediateArguments(arguments);
	            channel.port2.postMessage(handle);
	            return handle;
	        };
	    }
	
	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        setImmediate = function() {
	            var handle = addFromSetImmediateArguments(arguments);
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	            return handle;
	        };
	    }
	
	    function installSetTimeoutImplementation() {
	        setImmediate = function() {
	            var handle = addFromSetImmediateArguments(arguments);
	            setTimeout(partiallyApplied(runIfPresent, handle), 0);
	            return handle;
	        };
	    }
	
	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;
	
	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();
	
	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();
	
	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();
	
	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();
	
	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }
	
	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(new Function("return this")()));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(258).clearImmediate, __webpack_require__(85)))

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedStateMixin
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var ReactLink = __webpack_require__(302);
	var ReactStateSetters = __webpack_require__(303);
	
	/**
	 * A simple mixin around ReactLink.forState().
	 */
	var LinkedStateMixin = {
	  /**
	   * Create a ReactLink that's linked to part of this component's state. The
	   * ReactLink will have the current value of this.state[key] and will call
	   * setState() when a change is requested.
	   *
	   * @param {string} key state key to update. Note: you may want to use keyOf()
	   * if you're using Google Closure Compiler advanced mode.
	   * @return {ReactLink} ReactLink instance linking to the state.
	   */
	  linkState: function(key) {
	    return new ReactLink(
	      this.state[key],
	      ReactStateSetters.createStateKeySetter(this, key)
	    );
	  }
	};
	
	module.exports = LinkedStateMixin;


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactComponentWithPureRenderMixin
	*/
	
	"use strict";
	
	var shallowEqual = __webpack_require__(246);
	
	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function(nextProps, nextState) {
	    return !shallowEqual(this.props, nextProps) ||
	           !shallowEqual(this.state, nextState);
	  }
	};
	
	module.exports = ReactComponentWithPureRenderMixin;


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroup
	 */
	
	"use strict";
	
	var React = __webpack_require__(12);
	
	var assign = __webpack_require__(63);
	
	var ReactTransitionGroup = React.createFactory(
	  __webpack_require__(277)
	);
	var ReactCSSTransitionGroupChild = React.createFactory(
	  __webpack_require__(304)
	);
	
	var ReactCSSTransitionGroup = React.createClass({
	  displayName: 'ReactCSSTransitionGroup',
	
	  propTypes: {
	    transitionName: React.PropTypes.string.isRequired,
	    transitionEnter: React.PropTypes.bool,
	    transitionLeave: React.PropTypes.bool
	  },
	
	  getDefaultProps: function() {
	    return {
	      transitionEnter: true,
	      transitionLeave: true
	    };
	  },
	
	  _wrapChild: function(child) {
	    // We need to provide this childFactory so that
	    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	    // leave while it is leaving.
	    return ReactCSSTransitionGroupChild(
	      {
	        name: this.props.transitionName,
	        enter: this.props.transitionEnter,
	        leave: this.props.transitionLeave
	      },
	      child
	    );
	  },
	
	  render: function() {
	    return (
	      ReactTransitionGroup(
	        assign({}, this.props, {childFactory: this._wrapChild})
	      )
	    );
	  }
	});
	
	module.exports = ReactCSSTransitionGroup;


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionGroup
	 */
	
	"use strict";
	
	var React = __webpack_require__(12);
	var ReactTransitionChildMapping = __webpack_require__(301);
	
	var assign = __webpack_require__(63);
	var cloneWithProps = __webpack_require__(278);
	var emptyFunction = __webpack_require__(148);
	
	var ReactTransitionGroup = React.createClass({
	  displayName: 'ReactTransitionGroup',
	
	  propTypes: {
	    component: React.PropTypes.any,
	    childFactory: React.PropTypes.func
	  },
	
	  getDefaultProps: function() {
	    return {
	      component: 'span',
	      childFactory: emptyFunction.thatReturnsArgument
	    };
	  },
	
	  getInitialState: function() {
	    return {
	      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
	    };
	  },
	
	  componentWillReceiveProps: function(nextProps) {
	    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(
	      nextProps.children
	    );
	    var prevChildMapping = this.state.children;
	
	    this.setState({
	      children: ReactTransitionChildMapping.mergeChildMappings(
	        prevChildMapping,
	        nextChildMapping
	      )
	    });
	
	    var key;
	
	    for (key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }
	
	    for (key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
	      if (prevChildMapping[key] && !hasNext &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToLeave.push(key);
	      }
	    }
	
	    // If we want to someday check for reordering, we could do it here.
	  },
	
	  componentWillMount: function() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  },
	
	  componentDidUpdate: function() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);
	
	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  },
	
	  performEnter: function(key) {
	    this.currentlyTransitioningKeys[key] = true;
	
	    var component = this.refs[key];
	
	    if (component.componentWillEnter) {
	      component.componentWillEnter(
	        this._handleDoneEntering.bind(this, key)
	      );
	    } else {
	      this._handleDoneEntering(key);
	    }
	  },
	
	  _handleDoneEntering: function(key) {
	    var component = this.refs[key];
	    if (component.componentDidEnter) {
	      component.componentDidEnter();
	    }
	
	    delete this.currentlyTransitioningKeys[key];
	
	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );
	
	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully entered. Remove it.
	      this.performLeave(key);
	    }
	  },
	
	  performLeave: function(key) {
	    this.currentlyTransitioningKeys[key] = true;
	
	    var component = this.refs[key];
	    if (component.componentWillLeave) {
	      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
	    } else {
	      // Note that this is somewhat dangerous b/c it calls setState()
	      // again, effectively mutating the component before all the work
	      // is done.
	      this._handleDoneLeaving(key);
	    }
	  },
	
	  _handleDoneLeaving: function(key) {
	    var component = this.refs[key];
	
	    if (component.componentDidLeave) {
	      component.componentDidLeave();
	    }
	
	    delete this.currentlyTransitioningKeys[key];
	
	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );
	
	    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	      // This entered again before it fully left. Add it again.
	      this.performEnter(key);
	    } else {
	      var newChildren = assign({}, this.state.children);
	      delete newChildren[key];
	      this.setState({children: newChildren});
	    }
	  },
	
	  render: function() {
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = {};
	    for (var key in this.state.children) {
	      var child = this.state.children[key];
	      if (child) {
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender[key] = cloneWithProps(
	          this.props.childFactory(child),
	          {ref: key}
	        );
	      }
	    }
	    return React.createElement(
	      this.props.component,
	      this.props,
	      childrenToRender
	    );
	  }
	});
	
	module.exports = ReactTransitionGroup;


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule cloneWithProps
	 */
	
	"use strict";
	
	var ReactElement = __webpack_require__(50);
	var ReactPropTransferer = __webpack_require__(116);
	
	var keyOf = __webpack_require__(106);
	var warning = __webpack_require__(73);
	
	var CHILDREN_PROP = keyOf({children: null});
	
	/**
	 * Sometimes you want to change the props of a child passed to you. Usually
	 * this is to add a CSS class.
	 *
	 * @param {object} child child component you'd like to clone
	 * @param {object} props props you'd like to modify. They will be merged
	 * as if you used `transferPropsTo()`.
	 * @return {object} a clone of child with props merged in.
	 */
	function cloneWithProps(child, props) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      !child.ref,
	      'You are calling cloneWithProps() on a child with a ref. This is ' +
	      'dangerous because you\'re creating a new child which will not be ' +
	      'added as a ref to its parent.'
	    ) : null);
	  }
	
	  var newProps = ReactPropTransferer.mergeProps(props, child.props);
	
	  // Use `child.props.children` if it is provided.
	  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&
	      child.props.hasOwnProperty(CHILDREN_PROP)) {
	    newProps.children = child.props.children;
	  }
	
	  // The current API doesn't retain _owner and _context, which is why this
	  // doesn't use ReactElement.cloneAndReplaceProps.
	  return ReactElement.createElement(child.type, newProps);
	}
	
	module.exports = cloneWithProps;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule update
	 */
	
	"use strict";
	
	var assign = __webpack_require__(63);
	var keyOf = __webpack_require__(106);
	var invariant = __webpack_require__(72);
	
	function shallowCopy(x) {
	  if (Array.isArray(x)) {
	    return x.concat();
	  } else if (x && typeof x === 'object') {
	    return assign(new x.constructor(), x);
	  } else {
	    return x;
	  }
	}
	
	var COMMAND_PUSH = keyOf({$push: null});
	var COMMAND_UNSHIFT = keyOf({$unshift: null});
	var COMMAND_SPLICE = keyOf({$splice: null});
	var COMMAND_SET = keyOf({$set: null});
	var COMMAND_MERGE = keyOf({$merge: null});
	var COMMAND_APPLY = keyOf({$apply: null});
	
	var ALL_COMMANDS_LIST = [
	  COMMAND_PUSH,
	  COMMAND_UNSHIFT,
	  COMMAND_SPLICE,
	  COMMAND_SET,
	  COMMAND_MERGE,
	  COMMAND_APPLY
	];
	
	var ALL_COMMANDS_SET = {};
	
	ALL_COMMANDS_LIST.forEach(function(command) {
	  ALL_COMMANDS_SET[command] = true;
	});
	
	function invariantArrayCase(value, spec, command) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(value),
	    'update(): expected target of %s to be an array; got %s.',
	    command,
	    value
	  ) : invariant(Array.isArray(value)));
	  var specValue = spec[command];
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(specValue),
	    'update(): expected spec of %s to be an array; got %s. ' +
	    'Did you forget to wrap your parameter in an array?',
	    command,
	    specValue
	  ) : invariant(Array.isArray(specValue)));
	}
	
	function update(value, spec) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec === 'object',
	    'update(): You provided a key path to update() that did not contain one ' +
	    'of %s. Did you forget to include {%s: ...}?',
	    ALL_COMMANDS_LIST.join(', '),
	    COMMAND_SET
	  ) : invariant(typeof spec === 'object'));
	
	  if (spec.hasOwnProperty(COMMAND_SET)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Object.keys(spec).length === 1,
	      'Cannot have more than one key in an object with %s',
	      COMMAND_SET
	    ) : invariant(Object.keys(spec).length === 1));
	
	    return spec[COMMAND_SET];
	  }
	
	  var nextValue = shallowCopy(value);
	
	  if (spec.hasOwnProperty(COMMAND_MERGE)) {
	    var mergeObj = spec[COMMAND_MERGE];
	    ("production" !== process.env.NODE_ENV ? invariant(
	      mergeObj && typeof mergeObj === 'object',
	      'update(): %s expects a spec of type \'object\'; got %s',
	      COMMAND_MERGE,
	      mergeObj
	    ) : invariant(mergeObj && typeof mergeObj === 'object'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      nextValue && typeof nextValue === 'object',
	      'update(): %s expects a target of type \'object\'; got %s',
	      COMMAND_MERGE,
	      nextValue
	    ) : invariant(nextValue && typeof nextValue === 'object'));
	    assign(nextValue, spec[COMMAND_MERGE]);
	  }
	
	  if (spec.hasOwnProperty(COMMAND_PUSH)) {
	    invariantArrayCase(value, spec, COMMAND_PUSH);
	    spec[COMMAND_PUSH].forEach(function(item) {
	      nextValue.push(item);
	    });
	  }
	
	  if (spec.hasOwnProperty(COMMAND_UNSHIFT)) {
	    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
	    spec[COMMAND_UNSHIFT].forEach(function(item) {
	      nextValue.unshift(item);
	    });
	  }
	
	  if (spec.hasOwnProperty(COMMAND_SPLICE)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(value),
	      'Expected %s target to be an array; got %s',
	      COMMAND_SPLICE,
	      value
	    ) : invariant(Array.isArray(value)));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(spec[COMMAND_SPLICE]),
	      'update(): expected spec of %s to be an array of arrays; got %s. ' +
	      'Did you forget to wrap your parameters in an array?',
	      COMMAND_SPLICE,
	      spec[COMMAND_SPLICE]
	    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));
	    spec[COMMAND_SPLICE].forEach(function(args) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        Array.isArray(args),
	        'update(): expected spec of %s to be an array of arrays; got %s. ' +
	        'Did you forget to wrap your parameters in an array?',
	        COMMAND_SPLICE,
	        spec[COMMAND_SPLICE]
	      ) : invariant(Array.isArray(args)));
	      nextValue.splice.apply(nextValue, args);
	    });
	  }
	
	  if (spec.hasOwnProperty(COMMAND_APPLY)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof spec[COMMAND_APPLY] === 'function',
	      'update(): expected spec of %s to be a function; got %s.',
	      COMMAND_APPLY,
	      spec[COMMAND_APPLY]
	    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));
	    nextValue = spec[COMMAND_APPLY](nextValue);
	  }
	
	  for (var k in spec) {
	    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
	      nextValue[k] = update(value[k], spec[k]);
	    }
	  }
	
	  return nextValue;
	}
	
	module.exports = update;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTestUtils
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(93);
	var EventPluginHub = __webpack_require__(219);
	var EventPropagators = __webpack_require__(228);
	var React = __webpack_require__(12);
	var ReactElement = __webpack_require__(50);
	var ReactBrowserEventEmitter = __webpack_require__(103);
	var ReactMount = __webpack_require__(57);
	var ReactTextComponent = __webpack_require__(62);
	var ReactUpdates = __webpack_require__(97);
	var SyntheticEvent = __webpack_require__(230);
	
	var assign = __webpack_require__(63);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	function Event(suffix) {}
	
	/**
	 * @class ReactTestUtils
	 */
	
	/**
	 * Todo: Support the entire DOM.scry query syntax. For now, these simple
	 * utilities will suffice for testing purposes.
	 * @lends ReactTestUtils
	 */
	var ReactTestUtils = {
	  renderIntoDocument: function(instance) {
	    var div = document.createElement('div');
	    // None of our tests actually require attaching the container to the
	    // DOM, and doing so creates a mess that we rely on test isolation to
	    // clean up, so we're going to stop honoring the name of this method
	    // (and probably rename it eventually) if no problems arise.
	    // document.documentElement.appendChild(div);
	    return React.render(instance, div);
	  },
	
	  isElement: function(element) {
	    return ReactElement.isValidElement(element);
	  },
	
	  isElementOfType: function(inst, convenienceConstructor) {
	    return (
	      ReactElement.isValidElement(inst) &&
	      inst.type === convenienceConstructor.type
	    );
	  },
	
	  isDOMComponent: function(inst) {
	    return !!(inst && inst.mountComponent && inst.tagName);
	  },
	
	  isDOMComponentElement: function(inst) {
	    return !!(inst &&
	              ReactElement.isValidElement(inst) &&
	              !!inst.tagName);
	  },
	
	  isCompositeComponent: function(inst) {
	    return typeof inst.render === 'function' &&
	           typeof inst.setState === 'function';
	  },
	
	  isCompositeComponentWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponent(inst) &&
	             (inst.constructor === type.type));
	  },
	
	  isCompositeComponentElement: function(inst) {
	    if (!ReactElement.isValidElement(inst)) {
	      return false;
	    }
	    // We check the prototype of the type that will get mounted, not the
	    // instance itself. This is a future proof way of duck typing.
	    var prototype = inst.type.prototype;
	    return (
	      typeof prototype.render === 'function' &&
	      typeof prototype.setState === 'function'
	    );
	  },
	
	  isCompositeComponentElementWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&
	             (inst.constructor === type));
	  },
	
	  isTextComponent: function(inst) {
	    return inst instanceof ReactTextComponent.type;
	  },
	
	  findAllInRenderedTree: function(inst, test) {
	    if (!inst) {
	      return [];
	    }
	    var ret = test(inst) ? [inst] : [];
	    if (ReactTestUtils.isDOMComponent(inst)) {
	      var renderedChildren = inst._renderedChildren;
	      var key;
	      for (key in renderedChildren) {
	        if (!renderedChildren.hasOwnProperty(key)) {
	          continue;
	        }
	        ret = ret.concat(
	          ReactTestUtils.findAllInRenderedTree(renderedChildren[key], test)
	        );
	      }
	    } else if (ReactTestUtils.isCompositeComponent(inst)) {
	      ret = ret.concat(
	        ReactTestUtils.findAllInRenderedTree(inst._renderedComponent, test)
	      );
	    }
	    return ret;
	  },
	
	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the class name matching `className`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithClass: function(root, className) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      var instClassName = inst.props.className;
	      return ReactTestUtils.isDOMComponent(inst) && (
	        instClassName &&
	        (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1
	      );
	    });
	  },
	
	  /**
	   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithClass: function(root, className) {
	    var all =
	      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for class:' + className);
	    }
	    return all[0];
	  },
	
	
	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the tag name matching `tagName`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithTag: function(root, tagName) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isDOMComponent(inst) &&
	            inst.tagName === tagName.toUpperCase();
	    });
	  },
	
	  /**
	   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithTag: function(root, tagName) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for tag:' + tagName);
	    }
	    return all[0];
	  },
	
	
	  /**
	   * Finds all instances of components with type equal to `componentType`.
	   * @return an array of all the matches.
	   */
	  scryRenderedComponentsWithType: function(root, componentType) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isCompositeComponentWithType(
	        inst,
	        componentType
	      );
	    });
	  },
	
	  /**
	   * Same as `scryRenderedComponentsWithType` but expects there to be one result
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactComponent} The one match.
	   */
	  findRenderedComponentWithType: function(root, componentType) {
	    var all = ReactTestUtils.scryRenderedComponentsWithType(
	      root,
	      componentType
	    );
	    if (all.length !== 1) {
	      throw new Error(
	        'Did not find exactly one match for componentType:' + componentType
	      );
	    }
	    return all[0];
	  },
	
	  /**
	   * Pass a mocked component module to this method to augment it with
	   * useful methods that allow it to be used as a dummy React component.
	   * Instead of rendering as usual, the component will become a simple
	   * <div> containing any provided children.
	   *
	   * @param {object} module the mock function object exported from a
	   *                        module that defines the component to be mocked
	   * @param {?string} mockTagName optional dummy root tag name to return
	   *                              from render method (overrides
	   *                              module.mockTagName if provided)
	   * @return {object} the ReactTestUtils object (for chaining)
	   */
	  mockComponent: function(module, mockTagName) {
	    mockTagName = mockTagName || module.mockTagName || "div";
	
	    var ConvenienceConstructor = React.createClass({displayName: "ConvenienceConstructor",
	      render: function() {
	        return React.createElement(
	          mockTagName,
	          null,
	          this.props.children
	        );
	      }
	    });
	
	    module.mockImplementation(ConvenienceConstructor);
	
	    module.type = ConvenienceConstructor.type;
	    module.isReactLegacyFactory = true;
	
	    return this;
	  },
	
	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on an `Element` node.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`
	   * @param {!Element} node The dom to simulate an event occurring on.
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {
	    fakeNativeEvent.target = node;
	    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(
	      topLevelType,
	      fakeNativeEvent
	    );
	  },
	
	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on the `ReactDOMComponent` `comp`.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.
	   * @param comp {!ReactDOMComponent}
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnDOMComponent: function(
	      topLevelType,
	      comp,
	      fakeNativeEvent) {
	    ReactTestUtils.simulateNativeEventOnNode(
	      topLevelType,
	      comp.getDOMNode(),
	      fakeNativeEvent
	    );
	  },
	
	  nativeTouchData: function(x, y) {
	    return {
	      touches: [
	        {pageX: x, pageY: y}
	      ]
	    };
	  },
	
	  Simulate: null,
	  SimulateNative: {}
	};
	
	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
	 * - ... (All keys from event plugin `eventTypes` objects)
	 */
	function makeSimulator(eventType) {
	  return function(domComponentOrNode, eventData) {
	    var node;
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      node = domComponentOrNode.getDOMNode();
	    } else if (domComponentOrNode.tagName) {
	      node = domComponentOrNode;
	    }
	
	    var fakeNativeEvent = new Event();
	    fakeNativeEvent.target = node;
	    // We don't use SyntheticEvent.getPooled in order to not have to worry about
	    // properly destroying any properties assigned from `eventData` upon release
	    var event = new SyntheticEvent(
	      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],
	      ReactMount.getID(node),
	      fakeNativeEvent
	    );
	    assign(event, eventData);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	
	    ReactUpdates.batchedUpdates(function() {
	      EventPluginHub.enqueueEvents(event);
	      EventPluginHub.processEventQueue();
	    });
	  };
	}
	
	function buildSimulators() {
	  ReactTestUtils.Simulate = {};
	
	  var eventType;
	  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {
	    /**
	     * @param {!Element || ReactDOMComponent} domComponentOrNode
	     * @param {?object} eventData Fake event data to use in SyntheticEvent.
	     */
	    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
	  }
	}
	
	// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
	var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
	EventPluginHub.injection.injectEventPluginOrder = function() {
	  oldInjectEventPluginOrder.apply(this, arguments);
	  buildSimulators();
	};
	var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
	EventPluginHub.injection.injectEventPluginsByName = function() {
	  oldInjectEventPlugins.apply(this, arguments);
	  buildSimulators();
	};
	
	buildSimulators();
	
	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
	 * - ... (All keys from `EventConstants.topLevelTypes`)
	 *
	 * Note: Top level event types are a subset of the entire set of handler types
	 * (which include a broader set of "synthetic" events). For example, onDragDone
	 * is a synthetic event. Except when testing an event plugin or React's event
	 * handling code specifically, you probably want to use ReactTestUtils.Simulate
	 * to dispatch synthetic events.
	 */
	
	function makeNativeSimulator(eventType) {
	  return function(domComponentOrNode, nativeEventData) {
	    var fakeNativeEvent = new Event(eventType);
	    assign(fakeNativeEvent, nativeEventData);
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      ReactTestUtils.simulateNativeEventOnDOMComponent(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    } else if (!!domComponentOrNode.tagName) {
	      // Will allow on actual dom nodes.
	      ReactTestUtils.simulateNativeEventOnNode(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    }
	  };
	}
	
	var eventType;
	for (eventType in topLevelTypes) {
	  // Event type is stored as 'topClick' - we transform that to 'click'
	  var convenienceName = eventType.indexOf('top') === 0 ?
	    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
	  /**
	   * @param {!Element || ReactDOMComponent} domComponentOrNode
	   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
	   */
	  ReactTestUtils.SimulateNative[convenienceName] =
	    makeNativeSimulator(eventType);
	}
	
	module.exports = ReactTestUtils;


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	
	var base64 = __webpack_require__(331)
	var ieee754 = __webpack_require__(321)
	var isArray = __webpack_require__(322)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation
	
	var kMaxLength = 0x3fffffff
	var rootParent = {}
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Note:
	 *
	 * - Implementation must support adding new properties to `Uint8Array` instances.
	 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
	 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *    incorrect length in some situations.
	 *
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
	 * get the Object implementation, which is slower but will work correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = (function () {
	  try {
	    var buf = new ArrayBuffer(0)
	    var arr = new Uint8Array(buf)
	    arr.foo = function () { return 42 }
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	})()
	
	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (subject, encoding) {
	  var self = this
	  if (!(self instanceof Buffer)) return new Buffer(subject, encoding)
	
	  var type = typeof subject
	  var length
	
	  if (type === 'number') {
	    length = +subject
	  } else if (type === 'string') {
	    length = Buffer.byteLength(subject, encoding)
	  } else if (type === 'object' && subject !== null) {
	    // assume object is array-like
	    if (subject.type === 'Buffer' && isArray(subject.data)) subject = subject.data
	    length = +subject.length
	  } else {
	    throw new TypeError('must start with number, buffer, array or string')
	  }
	
	  if (length > kMaxLength) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum size: 0x' +
	      kMaxLength.toString(16) + ' bytes')
	  }
	
	  if (length < 0) length = 0
	  else length >>>= 0 // coerce to uint32
	
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Preferred: Return an augmented `Uint8Array` instance for best performance
	    self = Buffer._augment(new Uint8Array(length)) // eslint-disable-line consistent-this
	  } else {
	    // Fallback: Return THIS instance of Buffer (created by `new`)
	    self.length = length
	    self._isBuffer = true
	  }
	
	  var i
	  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
	    // Speed optimization -- use set if we're copying from a typed array
	    self._set(subject)
	  } else if (isArrayish(subject)) {
	    // Treat array-ish objects as a byte array
	    if (Buffer.isBuffer(subject)) {
	      for (i = 0; i < length; i++) {
	        self[i] = subject.readUInt8(i)
	      }
	    } else {
	      for (i = 0; i < length; i++) {
	        self[i] = ((subject[i] % 256) + 256) % 256
	      }
	    }
	  } else if (type === 'string') {
	    self.write(subject, 0, encoding)
	  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT) {
	    for (i = 0; i < length; i++) {
	      self[i] = 0
	    }
	  }
	
	  if (length > 0 && length <= Buffer.poolSize) self.parent = rootParent
	
	  return self
	}
	
	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)
	
	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, totalLength) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')
	
	  if (list.length === 0) {
	    return new Buffer(0)
	  } else if (list.length === 1) {
	    return list[0]
	  }
	
	  var i
	  if (totalLength === undefined) {
	    totalLength = 0
	    for (i = 0; i < list.length; i++) {
	      totalLength += list[i].length
	    }
	  }
	
	  var buf = new Buffer(totalLength)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}
	
	Buffer.byteLength = function byteLength (str, encoding) {
	  var ret
	  str = str + ''
	  switch (encoding || 'utf8') {
	    case 'ascii':
	    case 'binary':
	    case 'raw':
	      ret = str.length
	      break
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      ret = str.length * 2
	      break
	    case 'hex':
	      ret = str.length >>> 1
	      break
	    case 'utf8':
	    case 'utf-8':
	      ret = utf8ToBytes(str).length
	      break
	    case 'base64':
	      ret = base64ToBytes(str).length
	      break
	    default:
	      ret = str.length
	  }
	  return ret
	}
	
	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined
	
	// toString(encoding, start=0, end=buffer.length)
	Buffer.prototype.toString = function toString (encoding, start, end) {
	  var loweredCase = false
	
	  start = start >>> 0
	  end = end === undefined || end === Infinity ? this.length : end >>> 0
	
	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'binary':
	        return binarySlice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0
	
	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1
	
	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)
	
	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }
	
	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	// `get` will be removed in Node 0.13+
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}
	
	// `set` will be removed in Node 0.13+
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  var charsWritten = blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	  return charsWritten
	}
	
	function asciiWrite (buf, string, offset, length) {
	  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
	  return charsWritten
	}
	
	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
	  return charsWritten
	}
	
	function utf16leWrite (buf, string, offset, length) {
	  var charsWritten = blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	  return charsWritten
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Support both (string, offset, length, encoding)
	  // and the legacy (string, encoding, offset, length)
	  if (isFinite(offset)) {
	    if (!isFinite(length)) {
	      encoding = length
	      length = undefined
	    }
	  } else {  // legacy
	    var swap = encoding
	    encoding = offset
	    offset = length
	    length = swap
	  }
	
	  offset = Number(offset) || 0
	
	  if (length < 0 || offset < 0 || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }
	
	  var remaining = this.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	  encoding = String(encoding || 'utf8').toLowerCase()
	
	  var ret
	  switch (encoding) {
	    case 'hex':
	      ret = hexWrite(this, string, offset, length)
	      break
	    case 'utf8':
	    case 'utf-8':
	      ret = utf8Write(this, string, offset, length)
	      break
	    case 'ascii':
	      ret = asciiWrite(this, string, offset, length)
	      break
	    case 'binary':
	      ret = binaryWrite(this, string, offset, length)
	      break
	    case 'base64':
	      ret = base64Write(this, string, offset, length)
	      break
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      ret = utf16leWrite(this, string, offset, length)
	      break
	    default:
	      throw new TypeError('Unknown encoding: ' + encoding)
	  }
	  return ret
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  var res = ''
	  var tmp = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; i++) {
	    if (buf[i] <= 0x7F) {
	      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
	      tmp = ''
	    } else {
	      tmp += '%' + buf[i].toString(16)
	    }
	  }
	
	  return res + decodeUtf8Char(tmp)
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }
	
	  if (newBuf.length) newBuf.parent = this.parent || this
	
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) >>> 0 & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) >>> 0 & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = value
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = value
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) {
	    checkInt(
	      this, value, offset, byteLength,
	      Math.pow(2, 8 * byteLength - 1) - 1,
	      -Math.pow(2, 8 * byteLength - 1)
	    )
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) {
	    checkInt(
	      this, value, offset, byteLength,
	      Math.pow(2, 8 * byteLength - 1) - 1,
	      -Math.pow(2, 8 * byteLength - 1)
	    )
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = value
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, target_start, start, end) {
	  var self = this // source
	
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (target_start >= target.length) target_start = target.length
	  if (!target_start) target_start = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || self.length === 0) return 0
	
	  // Fatal error conditions
	  if (target_start < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= self.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - target_start < end - start) {
	    end = target.length - target_start + start
	  }
	
	  var len = end - start
	
	  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < len; i++) {
	      target[i + target_start] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), target_start)
	  }
	
	  return len
	}
	
	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length
	
	  if (end < start) throw new RangeError('end < start')
	
	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return
	
	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')
	
	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var BP = Buffer.prototype
	
	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true
	
	  // save reference to original Uint8Array get/set methods before overwriting
	  arr._get = arr.get
	  arr._set = arr.set
	
	  // deprecated, will be removed in node 0.13+
	  arr.get = BP.get
	  arr.set = BP.set
	
	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer
	
	  return arr
	}
	
	var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function isArrayish (subject) {
	  return isArray(subject) || Buffer.isBuffer(subject) ||
	      subject && typeof subject === 'object' &&
	      typeof subject.length === 'number'
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	  var i = 0
	
	  for (; i < length; i++) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (leadSurrogate) {
	        // 2 leads in a row
	        if (codePoint < 0xDC00) {
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          leadSurrogate = codePoint
	          continue
	        } else {
	          // valid surrogate pair
	          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
	          leadSurrogate = null
	        }
	      } else {
	        // no lead yet
	
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else {
	          // valid lead
	          leadSurrogate = codePoint
	          continue
	        }
	      }
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	      leadSurrogate = null
	    }
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x200000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function decodeUtf8Char (str) {
	  try {
	    return decodeURIComponent(str)
	  } catch (err) {
	    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	
	
	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	
	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};
	
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	
	  return hash;
	}
	
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	
	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	
	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = __webpack_require__(315);
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	
	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	
	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	
	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(332);
	
	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(85)))

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function(_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (
	    typeof Node === 'function' ? object instanceof Node :
	      typeof object === 'object' &&
	      typeof object.nodeType === 'number' &&
	      typeof object.nodeName === 'string'
	  ));
	}
	
	module.exports = isNode;


/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */
	
	"use strict";
	
	var invariant = __webpack_require__(72);
	
	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    next != null,
	    'accumulateInto(...): Accumulated items must not be null or undefined.'
	  ) : invariant(next != null));
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);
	
	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }
	
	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }
	
	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */
	
	"use strict";
	
	/**
	 * @param {array} an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};
	
	module.exports = forEachAccumulated;


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  /*jshint validthis:true */
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;


/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var Danger = __webpack_require__(305);
	var ReactMultiChildUpdateTypes = __webpack_require__(146);
	
	var getTextContentAccessor = __webpack_require__(241);
	var invariant = __webpack_require__(72);
	
	/**
	 * The DOM property to use when setting text content.
	 *
	 * @type {string}
	 * @private
	 */
	var textContentAccessor = getTextContentAccessor();
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	  parentNode.insertBefore(
	    childNode,
	    parentNode.childNodes[index] || null
	  );
	}
	
	var updateTextContent;
	if (textContentAccessor === 'textContent') {
	  /**
	   * Sets the text content of `node` to `text`.
	   *
	   * @param {DOMElement} node Node to change
	   * @param {string} text New text content
	   */
	  updateTextContent = function(node, text) {
	    node.textContent = text;
	  };
	} else {
	  /**
	   * Sets the text content of `node` to `text`.
	   *
	   * @param {DOMElement} node Node to change
	   * @param {string} text New text content
	   */
	  updateTextContent = function(node, text) {
	    // In order to preserve newlines correctly, we can't use .innerText to set
	    // the contents (see #1080), so we empty the element then append a text node
	    while (node.firstChild) {
	      node.removeChild(node.firstChild);
	    }
	    if (text) {
	      var doc = node.ownerDocument || document;
	      node.appendChild(doc.createTextNode(text));
	    }
	  };
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,
	
	  updateTextContent: updateTextContent,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;
	
	    for (var i = 0; update = updates[i]; i++) {
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
	          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;
	
	        ("production" !== process.env.NODE_ENV ? invariant(
	          updatedChild,
	          'processUpdates(): Unable to find child %s of element. This ' +
	          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
	          'browser), usually due to forgetting a <tbody> when using tables, ' +
	          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
	          'in an <svg> parent. Try inspecting the child nodes of the element ' +
	          'with React ID `%s`.',
	          updatedIndex,
	          parentID
	        ) : invariant(updatedChild));
	
	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;
	
	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }
	
	    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	
	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }
	
	    for (var k = 0; update = updates[k]; k++) {
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(
	            update.parentNode,
	            renderedMarkup[update.markupIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(
	            update.parentNode,
	            initialChildren[update.parentID][update.fromIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          updateTextContent(
	            update.parentNode,
	            update.textContent
	          );
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }
	
	};
	
	module.exports = DOMChildrenOperations;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */
	
	"use strict";
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch(e) {
	  }
	}
	
	module.exports = focusNode;


/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules
	
	var Stringify = __webpack_require__(306);
	var Parse = __webpack_require__(307);
	
	
	// Declare internals
	
	var internals = {};
	
	
	module.exports = {
	    stringify: Stringify,
	    parse: Parse
	};


/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */
	
	"use strict";
	
	var ExecutionEnvironment = __webpack_require__(66);
	
	var getNodeForCharacterOffset = __webpack_require__(308);
	var getTextContentAccessor = __webpack_require__(241);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(
	    selection.anchorNode,
	    selection.anchorOffset,
	    selection.focusNode,
	    selection.focusOffset
	  );
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(
	    tempRange.startContainer,
	    tempRange.startOffset,
	    tempRange.endContainer,
	    tempRange.endOffset
	  );
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ?
	            start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var getEventCharCode = __webpack_require__(256);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */
	
	"use strict";
	
	var ExecutionEnvironment = __webpack_require__(66);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance =
	    window.performance ||
	    window.msPerformance ||
	    window.webkitPerformance;
	}
	
	module.exports = performance || {};


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Stream;
	
	var EE = __webpack_require__(298).EventEmitter;
	var inherits = __webpack_require__(335);
	
	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(323);
	Stream.Writable = __webpack_require__(324);
	Stream.Duplex = __webpack_require__(325);
	Stream.Transform = __webpack_require__(326);
	Stream.PassThrough = __webpack_require__(327);
	
	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;
	
	
	
	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.
	
	function Stream() {
	  EE.call(this);
	}
	
	Stream.prototype.pipe = function(dest, options) {
	  var source = this;
	
	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }
	
	  source.on('data', ondata);
	
	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }
	
	  dest.on('drain', ondrain);
	
	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }
	
	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    dest.end();
	  }
	
	
	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    if (typeof dest.destroy === 'function') dest.destroy();
	  }
	
	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }
	
	  source.on('error', onerror);
	  dest.on('error', onerror);
	
	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);
	
	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);
	
	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);
	
	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);
	
	    dest.removeListener('close', cleanup);
	  }
	
	  source.on('end', cleanup);
	  source.on('close', cleanup);
	
	  dest.on('close', cleanup);
	
	  dest.emit('pipe', source);
	
	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(309)
	
	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}
	
	exports.createHash = __webpack_require__(310)
	
	exports.createHmac = __webpack_require__(311)
	
	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}
	
	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}
	
	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}
	
	var p = __webpack_require__(312)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync
	
	
	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createCipher'
	, 'createCipheriv'
	, 'createDecipher'
	, 'createDecipheriv'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	// Get the Kerberos library
	module.exports = __webpack_require__(313);
	// Set up the auth processes
	module.exports['processes'] = {
	  MongoAuthProcess: __webpack_require__(314).MongoAuthProcess
	}

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];
	
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    var m;
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (isFunction(emitter._events[type]))
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(295); // hack to fix a circular dependency issue when used with browserify
	exports = module.exports = __webpack_require__(316);
	exports.Stream = Stream;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(317);
	exports.Duplex = __webpack_require__(318);
	exports.Transform = __webpack_require__(319);
	exports.PassThrough = __webpack_require__(320);


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';
	var debug = __webpack_require__(4)('Dispatchr:Action');
	
	function Action(name, payload) {
	    this.name = name;
	    this.payload = payload;
	    this._handlers = null;
	    this._isExecuting = false;
	    this._isCompleted = null;
	}
	
	/**
	 * Gets a name from a store
	 * @method getStoreName
	 * @param {String|Object} store The store name or class from which to extract
	 *      the name
	 * @returns {String}
	 */
	Action.prototype.getStoreName = function getStoreName(store) {
	    if ('string' === typeof store) {
	        return store;
	    }
	    return store.storeName;
	};
	
	/**
	 * Executes all handlers for the action
	 * @method execute
	 * @param {Function[]} handlers A mapping of store names to handler function
	 * @throws {Error} if action has already been executed
	 */
	Action.prototype.execute = function execute(handlers) {
	    if (this._isExecuting) {
	        throw new Error('Action is already dispatched');
	    }
	    var self = this;
	    this._handlers = handlers;
	    this._isExecuting = true;
	    this._isCompleted = {};
	    Object.keys(handlers).forEach(function handlersEach(storeName) {
	        self._callHandler(storeName);
	    });
	};
	
	/**
	 * Calls an individual store's handler function
	 * @method _callHandler
	 * @param {String} storeName
	 * @private
	 * @throws {Error} if handler does not exist for storeName
	 */
	Action.prototype._callHandler = function callHandler(storeName) {
	    var self = this,
	        handlerFn = self._handlers[storeName];
	    if (!handlerFn) {
	        throw new Error(storeName + ' does not have a handler for action ' + self.name);
	    }
	    if (self._isCompleted[storeName]) {
	        return;
	    }
	    self._isCompleted[storeName] = false;
	    debug('executing handler for ' + storeName);
	    handlerFn(self.payload, self.name);
	    self._isCompleted[storeName] = true;
	};
	
	/**
	 * Waits until all stores have finished handling an action and then calls
	 * the callback
	 * @method waitFor
	 * @param {String|String[]|Constructor|Constructor[]} stores An array of stores as strings or constructors to wait for
	 * @param {Function} callback Called after all stores have completed handling their actions
	 * @throws {Error} if the action is not being executed
	 */
	Action.prototype.waitFor = function waitFor(stores, callback) {
	    var self = this;
	    if (!self._isExecuting) {
	        throw new Error('waitFor called even though there is no action being executed!');
	    }
	    if (!Array.isArray(stores)) {
	        stores = [stores];
	    }
	
	    debug('waiting on ' + stores.join(', '));
	    stores.forEach(function storesEach(storeName) {
	        storeName = self.getStoreName(storeName);
	        if (self._handlers[storeName]) {
	            self._callHandler(storeName);
	        }
	    });
	
	    callback();
	};
	
	module.exports = Action;


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactTransitionChildMapping
	 */
	
	"use strict";
	
	var ReactChildren = __webpack_require__(45);
	
	var ReactTransitionChildMapping = {
	  /**
	   * Given `this.props.children`, return an object mapping key to child. Just
	   * simple syntactic sugar around ReactChildren.map().
	   *
	   * @param {*} children `this.props.children`
	   * @return {object} Mapping of key to child
	   */
	  getChildMapping: function(children) {
	    return ReactChildren.map(children, function(child) {
	      return child;
	    });
	  },
	
	  /**
	   * When you're adding or removing children some may be added or removed in the
	   * same render pass. We want to show *both* since we want to simultaneously
	   * animate elements in and out. This function takes a previous set of keys
	   * and a new set of keys and merges them with its best guess of the correct
	   * ordering. In the future we may expose some of the utilities in
	   * ReactMultiChild to make this easy, but for now React itself does not
	   * directly have this concept of the union of prevChildren and nextChildren
	   * so we implement it here.
	   *
	   * @param {object} prev prev children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @param {object} next next children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @return {object} a key set that contains all keys in `prev` and all keys
	   * in `next` in a reasonable order.
	   */
	  mergeChildMappings: function(prev, next) {
	    prev = prev || {};
	    next = next || {};
	
	    function getValueForKey(key) {
	      if (next.hasOwnProperty(key)) {
	        return next[key];
	      } else {
	        return prev[key];
	      }
	    }
	
	    // For each key of `next`, the list of keys to insert before that key in
	    // the combined list
	    var nextKeysPending = {};
	
	    var pendingKeys = [];
	    for (var prevKey in prev) {
	      if (next.hasOwnProperty(prevKey)) {
	        if (pendingKeys.length) {
	          nextKeysPending[prevKey] = pendingKeys;
	          pendingKeys = [];
	        }
	      } else {
	        pendingKeys.push(prevKey);
	      }
	    }
	
	    var i;
	    var childMapping = {};
	    for (var nextKey in next) {
	      if (nextKeysPending.hasOwnProperty(nextKey)) {
	        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	          var pendingNextKey = nextKeysPending[nextKey][i];
	          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(
	            pendingNextKey
	          );
	        }
	      }
	      childMapping[nextKey] = getValueForKey(nextKey);
	    }
	
	    // Finally, add the keys which didn't appear before any key in `next`
	    for (i = 0; i < pendingKeys.length; i++) {
	      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	    }
	
	    return childMapping;
	  }
	};
	
	module.exports = ReactTransitionChildMapping;


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLink
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * ReactLink encapsulates a common pattern in which a component wants to modify
	 * a prop received from its parent. ReactLink allows the parent to pass down a
	 * value coupled with a callback that, when invoked, expresses an intent to
	 * modify that value. For example:
	 *
	 * React.createClass({
	 *   getInitialState: function() {
	 *     return {value: ''};
	 *   },
	 *   render: function() {
	 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
	 *     return <input valueLink={valueLink} />;
	 *   },
	 *   this._handleValueChange: function(newValue) {
	 *     this.setState({value: newValue});
	 *   }
	 * });
	 *
	 * We have provided some sugary mixins to make the creation and
	 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
	 */
	
	var React = __webpack_require__(12);
	
	/**
	 * @param {*} value current value of the link
	 * @param {function} requestChange callback to request a change
	 */
	function ReactLink(value, requestChange) {
	  this.value = value;
	  this.requestChange = requestChange;
	}
	
	/**
	 * Creates a PropType that enforces the ReactLink API and optionally checks the
	 * type of the value being passed inside the link. Example:
	 *
	 * MyComponent.propTypes = {
	 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
	 * }
	 */
	function createLinkTypeChecker(linkType) {
	  var shapes = {
	    value: typeof linkType === 'undefined' ?
	      React.PropTypes.any.isRequired :
	      linkType.isRequired,
	    requestChange: React.PropTypes.func.isRequired
	  };
	  return React.PropTypes.shape(shapes);
	}
	
	ReactLink.PropTypes = {
	  link: createLinkTypeChecker
	};
	
	module.exports = ReactLink;


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactStateSetters
	 */
	
	"use strict";
	
	var ReactStateSetters = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(component, funcReturningState) {
	    return function(a, b, c, d, e, f) {
	      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
	      if (partialState) {
	        component.setState(partialState);
	      }
	    };
	  },
	
	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(component, key) {
	    // Memoize the setters.
	    var cache = component.__keySetters || (component.__keySetters = {});
	    return cache[key] || (cache[key] = createStateKeySetter(component, key));
	  }
	};
	
	function createStateKeySetter(component, key) {
	  // Partial state is allocated outside of the function closure so it can be
	  // reused with every call, avoiding memory allocation when this function
	  // is called.
	  var partialState = {};
	  return function stateKeySetter(value) {
	    partialState[key] = value;
	    component.setState(partialState);
	  };
	}
	
	ReactStateSetters.Mixin = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateSetter(function(xValue) {
	   *     return {x: xValue};
	   *   })(1);
	   *
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(funcReturningState) {
	    return ReactStateSetters.createStateSetter(this, funcReturningState);
	  },
	
	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateKeySetter('x')(1);
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(key) {
	    return ReactStateSetters.createStateKeySetter(this, key);
	  }
	};
	
	module.exports = ReactStateSetters;


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroupChild
	 */
	
	"use strict";
	
	var React = __webpack_require__(12);
	
	var CSSCore = __webpack_require__(329);
	var ReactTransitionEvents = __webpack_require__(330);
	
	var onlyChild = __webpack_require__(65);
	
	// We don't remove the element from the DOM until we receive an animationend or
	// transitionend event. If the user screws up and forgets to add an animation
	// their node will be stuck in the DOM forever, so we detect if an animation
	// does not start and if it doesn't, we just call the end listener immediately.
	var TICK = 17;
	var NO_EVENT_TIMEOUT = 5000;
	
	var noEventListener = null;
	
	
	if ("production" !== process.env.NODE_ENV) {
	  noEventListener = function() {
	    console.warn(
	      'transition(): tried to perform an animation without ' +
	      'an animationend or transitionend event after timeout (' +
	      NO_EVENT_TIMEOUT + 'ms). You should either disable this ' +
	      'transition in JS or add a CSS animation/transition.'
	    );
	  };
	}
	
	var ReactCSSTransitionGroupChild = React.createClass({
	  displayName: 'ReactCSSTransitionGroupChild',
	
	  transition: function(animationType, finishCallback) {
	    var node = this.getDOMNode();
	    var className = this.props.name + '-' + animationType;
	    var activeClassName = className + '-active';
	    var noEventTimeout = null;
	
	    var endListener = function(e) {
	      if (e && e.target !== node) {
	        return;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        clearTimeout(noEventTimeout);
	      }
	
	      CSSCore.removeClass(node, className);
	      CSSCore.removeClass(node, activeClassName);
	
	      ReactTransitionEvents.removeEndEventListener(node, endListener);
	
	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      finishCallback && finishCallback();
	    };
	
	    ReactTransitionEvents.addEndEventListener(node, endListener);
	
	    CSSCore.addClass(node, className);
	
	    // Need to do this to actually trigger a transition.
	    this.queueClass(activeClassName);
	
	    if ("production" !== process.env.NODE_ENV) {
	      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);
	    }
	  },
	
	  queueClass: function(className) {
	    this.classNameQueue.push(className);
	
	    if (!this.timeout) {
	      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
	    }
	  },
	
	  flushClassNameQueue: function() {
	    if (this.isMounted()) {
	      this.classNameQueue.forEach(
	        CSSCore.addClass.bind(CSSCore, this.getDOMNode())
	      );
	    }
	    this.classNameQueue.length = 0;
	    this.timeout = null;
	  },
	
	  componentWillMount: function() {
	    this.classNameQueue = [];
	  },
	
	  componentWillUnmount: function() {
	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	  },
	
	  componentWillEnter: function(done) {
	    if (this.props.enter) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  },
	
	  componentWillLeave: function(done) {
	    if (this.props.leave) {
	      this.transition('leave', done);
	    } else {
	      done();
	    }
	  },
	
	  render: function() {
	    return onlyChild(this.props.children);
	  }
	});
	
	module.exports = ReactCSSTransitionGroupChild;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */
	
	/*jslint evil: true, sub: true */
	
	"use strict";
	
	var ExecutionEnvironment = __webpack_require__(66);
	
	var createNodesFromMarkup = __webpack_require__(333);
	var emptyFunction = __webpack_require__(148);
	var getMarkupWrap = __webpack_require__(334);
	var invariant = __webpack_require__(72);
	
	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';
	
	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}
	
	var Danger = {
	
	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function(markupList) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
	      'thread. Make sure `window` and `document` are available globally ' +
	      'before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        markupList[i],
	        'dangerouslyRenderMarkup(...): Missing markup.'
	      ) : invariant(markupList[i]));
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];
	
	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      for (var resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];
	
	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(
	            OPEN_TAG_NAME_EXP,
	            // This index will be parsed back out below.
	            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
	          );
	        }
	      }
	
	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(
	        markupListByNodeName.join(''),
	        emptyFunction // Do nothing special with <script> tags.
	      );
	
	      for (i = 0; i < renderNodes.length; ++i) {
	        var renderNode = renderNodes[i];
	        if (renderNode.hasAttribute &&
	            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {
	
	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);
	
	          ("production" !== process.env.NODE_ENV ? invariant(
	            !resultList.hasOwnProperty(resultIndex),
	            'Danger: Assigning to an already-occupied result index.'
	          ) : invariant(!resultList.hasOwnProperty(resultIndex)));
	
	          resultList[resultIndex] = renderNode;
	
	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	
	        } else if ("production" !== process.env.NODE_ENV) {
	          console.error(
	            "Danger: Discarding unexpected node:",
	            renderNode
	          );
	        }
	      }
	    }
	
	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultListAssignmentCount === resultList.length,
	      'Danger: Did not assign to every index of resultList.'
	    ) : invariant(resultListAssignmentCount === resultList.length));
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultList.length === markupList.length,
	      'Danger: Expected markup to render %s nodes, but rendered %s.',
	      markupList.length,
	      resultList.length
	    ) : invariant(resultList.length === markupList.length));
	
	    return resultList;
	  },
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
	      'worker thread. Make sure `window` and `document` are available ' +
	      'globally before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      oldChild.tagName.toLowerCase() !== 'html',
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
	      '<html> node. This is because browser quirks make this unreliable ' +
	      'and/or slow. If you want to render to the root you must use ' +
	      'server rendering. See renderComponentToString().'
	    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));
	
	    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }
	
	};
	
	module.exports = Danger;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules
	
	var Utils = __webpack_require__(211);
	
	
	// Declare internals
	
	var internals = {
	    delimiter: '&',
	    indices: true
	};
	
	
	internals.stringify = function (obj, prefix, options) {
	
	    if (Utils.isBuffer(obj)) {
	        obj = obj.toString();
	    }
	    else if (obj instanceof Date) {
	        obj = obj.toISOString();
	    }
	    else if (obj === null) {
	        obj = '';
	    }
	
	    if (typeof obj === 'string' ||
	        typeof obj === 'number' ||
	        typeof obj === 'boolean') {
	
	        return [encodeURIComponent(prefix) + '=' + encodeURIComponent(obj)];
	    }
	
	    var values = [];
	
	    if (typeof obj === 'undefined') {
	        return values;
	    }
	
	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        if (!options.indices &&
	            Array.isArray(obj)) {
	
	            values = values.concat(internals.stringify(obj[key], prefix, options));
	        }
	        else {
	            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', options));
	        }
	    }
	
	    return values;
	};
	
	
	module.exports = function (obj, options) {
	
	    options = options || {};
	    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;
	    options.indices = typeof options.indices === 'boolean' ? options.indices : internals.indices;
	
	    var keys = [];
	
	    if (typeof obj !== 'object' ||
	        obj === null) {
	
	        return '';
	    }
	
	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        keys = keys.concat(internals.stringify(obj[key], key, options));
	    }
	
	    return keys.join(delimiter);
	};


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules
	
	var Utils = __webpack_require__(211);
	
	
	// Declare internals
	
	var internals = {
	    delimiter: '&',
	    depth: 5,
	    arrayLimit: 20,
	    parameterLimit: 1000
	};
	
	
	internals.parseValues = function (str, options) {
	
	    var obj = {};
	    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);
	
	    for (var i = 0, il = parts.length; i < il; ++i) {
	        var part = parts[i];
	        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;
	
	        if (pos === -1) {
	            obj[Utils.decode(part)] = '';
	        }
	        else {
	            var key = Utils.decode(part.slice(0, pos));
	            var val = Utils.decode(part.slice(pos + 1));
	
	            if (!obj.hasOwnProperty(key)) {
	                obj[key] = val;
	            }
	            else {
	                obj[key] = [].concat(obj[key]).concat(val);
	            }
	        }
	    }
	
	    return obj;
	};
	
	
	internals.parseObject = function (chain, val, options) {
	
	    if (!chain.length) {
	        return val;
	    }
	
	    var root = chain.shift();
	
	    var obj = {};
	    if (root === '[]') {
	        obj = [];
	        obj = obj.concat(internals.parseObject(chain, val, options));
	    }
	    else {
	        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
	        var index = parseInt(cleanRoot, 10);
	        var indexString = '' + index;
	        if (!isNaN(index) &&
	            root !== cleanRoot &&
	            indexString === cleanRoot &&
	            index >= 0 &&
	            index <= options.arrayLimit) {
	
	            obj = [];
	            obj[index] = internals.parseObject(chain, val, options);
	        }
	        else {
	            obj[cleanRoot] = internals.parseObject(chain, val, options);
	        }
	    }
	
	    return obj;
	};
	
	
	internals.parseKeys = function (key, val, options) {
	
	    if (!key) {
	        return;
	    }
	
	    // The regex chunks
	
	    var parent = /^([^\[\]]*)/;
	    var child = /(\[[^\[\]]*\])/g;
	
	    // Get the parent
	
	    var segment = parent.exec(key);
	
	    // Don't allow them to overwrite object prototype properties
	
	    if (Object.prototype.hasOwnProperty(segment[1])) {
	        return;
	    }
	
	    // Stash the parent if it exists
	
	    var keys = [];
	    if (segment[1]) {
	        keys.push(segment[1]);
	    }
	
	    // Loop through children appending to the array until we hit depth
	
	    var i = 0;
	    while ((segment = child.exec(key)) !== null && i < options.depth) {
	
	        ++i;
	        if (!Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
	            keys.push(segment[1]);
	        }
	    }
	
	    // If there's a remainder, just add whatever is left
	
	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }
	
	    return internals.parseObject(keys, val, options);
	};
	
	
	module.exports = function (str, options) {
	
	    if (str === '' ||
	        str === null ||
	        typeof str === 'undefined') {
	
	        return {};
	    }
	
	    options = options || {};
	    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
	    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
	    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
	    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;
	
	    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
	    var obj = {};
	
	    // Iterate over the keys and setup the new object
	
	    var keys = Object.keys(tempObj);
	    for (var i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        var newObj = internals.parseKeys(key, tempObj[key], options);
	        obj = Utils.merge(obj, newObj);
	    }
	
	    return Utils.compact(obj);
	};


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */
	
	"use strict";
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType == 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(328)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(281).Buffer))

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(346)
	
	var md5 = toConstructor(__webpack_require__(336))
	var rmd160 = toConstructor(__webpack_require__(351))
	
	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}
	
	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(310)
	
	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)
	
	module.exports = Hmac
	
	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg
	
	  var blocksize = (alg === 'sha512') ? 128 : 64
	
	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key
	
	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }
	
	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)
	
	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }
	
	  this._hash = createHash(alg).update(ipad)
	}
	
	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}
	
	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(349)
	
	module.exports = function (crypto, exports) {
	  exports = exports || {}
	
	  var exported = pbkdf2Export(crypto)
	
	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync
	
	  return exports
	}


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	var kerberos = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../build/Release/kerberos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	  , KerberosNative = kerberos.Kerberos;
	
	var Kerberos = function() {
	  this._native_kerberos = new KerberosNative(); 
	}
	
	Kerberos.prototype.authGSSClientInit = function(uri, flags, callback) {
	  return this._native_kerberos.authGSSClientInit(uri, flags, callback);
	}
	
	Kerberos.prototype.authGSSClientStep = function(context, challenge, callback) {
	  if(typeof challenge == 'function') {
	    callback = challenge;
	    challenge = '';
	  }
	
	  return this._native_kerberos.authGSSClientStep(context, challenge, callback);
	}
	
	Kerberos.prototype.authGSSClientUnwrap = function(context, challenge, callback) {
	  if(typeof challenge == 'function') {
	    callback = challenge;
	    challenge = '';
	  }
	
	  return this._native_kerberos.authGSSClientUnwrap(context, challenge, callback);
	}
	
	Kerberos.prototype.authGSSClientWrap = function(context, challenge, user_name, callback) {
	  if(typeof user_name == 'function') {
	    callback = user_name;
	    user_name = '';
	  }
	
	  return this._native_kerberos.authGSSClientWrap(context, challenge, user_name, callback);
	}
	
	Kerberos.prototype.authGSSClientClean = function(context, callback) {
	  return this._native_kerberos.authGSSClientClean(context, callback);
	}
	
	Kerberos.prototype.acquireAlternateCredentials = function(user_name, password, domain) {
	  return this._native_kerberos.acquireAlternateCredentials(user_name, password, domain); 
	}
	
	Kerberos.prototype.prepareOutboundPackage = function(principal, inputdata) {
	  return this._native_kerberos.prepareOutboundPackage(principal, inputdata); 
	}
	
	Kerberos.prototype.decryptMessage = function(challenge) {
	  return this._native_kerberos.decryptMessage(challenge);
	}
	
	Kerberos.prototype.encryptMessage = function(challenge) {
	  return this._native_kerberos.encryptMessage(challenge); 
	}
	
	Kerberos.prototype.queryContextAttribute = function(attribute) {
	  if(typeof attribute != 'number' && attribute != 0x00) throw new Error("Attribute not supported");
	  return this._native_kerberos.queryContextAttribute(attribute);
	}
	
	// Some useful result codes
	Kerberos.AUTH_GSS_CONTINUE     = 0;
	Kerberos.AUTH_GSS_COMPLETE     = 1;
	     
	// Some useful gss flags 
	Kerberos.GSS_C_DELEG_FLAG      = 1;
	Kerberos.GSS_C_MUTUAL_FLAG     = 2;
	Kerberos.GSS_C_REPLAY_FLAG     = 4;
	Kerberos.GSS_C_SEQUENCE_FLAG   = 8;
	Kerberos.GSS_C_CONF_FLAG       = 16; 
	Kerberos.GSS_C_INTEG_FLAG      = 32;
	Kerberos.GSS_C_ANON_FLAG       = 64;
	Kerberos.GSS_C_PROT_READY_FLAG = 128; 
	Kerberos.GSS_C_TRANS_FLAG      = 256;
	
	// Export Kerberos class
	exports.Kerberos = Kerberos;
	
	// If we have SSPI (windows)
	if(kerberos.SecurityCredentials) {
	  // Put all SSPI classes in it's own namespace
	  exports.SSIP = {
	      SecurityCredentials: __webpack_require__(337).SecurityCredentials
	    , SecurityContext: __webpack_require__(338).SecurityContext
	    , SecurityBuffer: __webpack_require__(339).SecurityBuffer
	    , SecurityBufferDescriptor: __webpack_require__(340).SecurityBufferDescriptor
	  }
	}


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var format = __webpack_require__(282).format;
	
	var MongoAuthProcess = function(host, port, service_name) {  
	  // Check what system we are on
	  if(process.platform == 'win32') {
	    this._processor = new Win32MongoProcessor(host, port, service_name);
	  } else {
	    this._processor = new UnixMongoProcessor(host, port, service_name);
	  }
	}
	
	MongoAuthProcess.prototype.init = function(username, password, callback) {
	  this._processor.init(username, password, callback);
	}
	
	MongoAuthProcess.prototype.transition = function(payload, callback) {
	  this._processor.transition(payload, callback);
	}
	
	/*******************************************************************
	 *
	 * Win32 SSIP Processor for MongoDB
	 *
	 *******************************************************************/
	var Win32MongoProcessor = function(host, port, service_name) {
	  this.host = host;
	  this.port = port  
	  // SSIP classes
	  this.ssip = __webpack_require__(313).SSIP;
	  // Set up first transition
	  this._transition = Win32MongoProcessor.first_transition(this);
	  // Set up service name
	  service_name = service_name || "mongodb";
	  // Set up target
	  this.target = format("%s/%s", service_name, host);
	  // Number of retries
	  this.retries = 10;
	}
	
	Win32MongoProcessor.prototype.init = function(username, password, callback) {
	  var self = this;
	  // Save the values used later
	  this.username = username;
	  this.password = password;
	  // Aquire credentials
	  this.ssip.SecurityCredentials.aquire_kerberos(username, password, function(err, security_credentials) {
	    if(err) return callback(err);
	    // Save credentials
	    self.security_credentials = security_credentials;
	    // Callback with success
	    callback(null);
	  });
	}
	
	Win32MongoProcessor.prototype.transition = function(payload, callback) {
	  if(this._transition == null) return callback(new Error("Transition finished"));
	  this._transition(payload, callback);
	}
	
	Win32MongoProcessor.first_transition = function(self) {
	  return function(payload, callback) {    
	    self.ssip.SecurityContext.initialize(
	      self.security_credentials, 
	      self.target, 
	      payload, function(err, security_context) {   
	        if(err) return callback(err);
	        
	        // If no context try again until we have no more retries
	        if(!security_context.hasContext) {
	          if(self.retries == 0) return callback(new Error("Failed to initialize security context"));
	          // Update the number of retries
	          self.retries = self.retries - 1;
	          // Set next transition
	          return self.transition(payload, callback);
	        }
	
	        // Set next transition
	        self._transition = Win32MongoProcessor.second_transition(self);
	        self.security_context = security_context;
	        // Return the payload
	        callback(null, security_context.payload);
	    });
	  }
	}
	
	Win32MongoProcessor.second_transition = function(self) {
	  return function(payload, callback) {    
	    // Perform a step
	    self.security_context.initialize(self.target, payload, function(err, security_context) {
	      if(err) return callback(err);
	
	      // If no context try again until we have no more retries
	      if(!security_context.hasContext) {
	        if(self.retries == 0) return callback(new Error("Failed to initialize security context"));
	        // Update the number of retries
	        self.retries = self.retries - 1;
	        // Set next transition
	        self._transition = Win32MongoProcessor.first_transition(self);
	        // Retry
	        return self.transition(payload, callback);
	      }
	
	      // Set next transition
	      self._transition = Win32MongoProcessor.third_transition(self);
	      // Return the payload
	      callback(null, security_context.payload);
	    });
	  }  
	}
	
	Win32MongoProcessor.third_transition = function(self) {
	  return function(payload, callback) {   
	    var messageLength = 0;
	    // Get the raw bytes
	    var encryptedBytes = new Buffer(payload, 'base64');
	    var encryptedMessage = new Buffer(messageLength);
	    // Copy first byte
	    encryptedBytes.copy(encryptedMessage, 0, 0, messageLength);
	    // Set up trailer
	    var securityTrailerLength = encryptedBytes.length - messageLength;
	    var securityTrailer = new Buffer(securityTrailerLength);
	    // Copy the bytes
	    encryptedBytes.copy(securityTrailer, 0, messageLength, securityTrailerLength);
	
	    // Types used
	    var SecurityBuffer = self.ssip.SecurityBuffer;
	    var SecurityBufferDescriptor = self.ssip.SecurityBufferDescriptor;
	
	    // Set up security buffers
	    var buffers = [
	        new SecurityBuffer(SecurityBuffer.DATA, encryptedBytes)
	      , new SecurityBuffer(SecurityBuffer.STREAM, securityTrailer)
	    ];
	
	    // Set up the descriptor
	    var descriptor = new SecurityBufferDescriptor(buffers);
	
	    // Decrypt the data
	    self.security_context.decryptMessage(descriptor, function(err, security_context) {
	      if(err) return callback(err);
	
	      var length = 4;
	      if(self.username != null) {
	        length += self.username.length;          
	      }
	
	      var bytesReceivedFromServer = new Buffer(length);
	      bytesReceivedFromServer[0] = 0x01;  // NO_PROTECTION
	      bytesReceivedFromServer[1] = 0x00;  // NO_PROTECTION
	      bytesReceivedFromServer[2] = 0x00;  // NO_PROTECTION
	      bytesReceivedFromServer[3] = 0x00;  // NO_PROTECTION        
	
	      if(self.username != null) {
	        var authorization_id_bytes = new Buffer(self.username, 'utf8');
	        authorization_id_bytes.copy(bytesReceivedFromServer, 4, 0);
	      }
	
	      self.security_context.queryContextAttributes(0x00, function(err, sizes) {
	        if(err) return callback(err);
	
	        var buffers = [
	            new SecurityBuffer(SecurityBuffer.TOKEN, new Buffer(sizes.securityTrailer))
	          , new SecurityBuffer(SecurityBuffer.DATA, bytesReceivedFromServer)
	          , new SecurityBuffer(SecurityBuffer.PADDING, new Buffer(sizes.blockSize))
	        ]
	
	        var descriptor = new SecurityBufferDescriptor(buffers);
	
	        self.security_context.encryptMessage(descriptor, 0x80000001, function(err, security_context) {
	          if(err) return callback(err);
	          callback(null, security_context.payload);
	        });
	      });
	    });
	  }  
	}
	
	/*******************************************************************
	 *
	 * UNIX MIT Kerberos processor
	 *
	 *******************************************************************/
	var UnixMongoProcessor = function(host, port, service_name) {
	  this.host = host;
	  this.port = port  
	  // SSIP classes
	  this.Kerberos = __webpack_require__(313).Kerberos;
	  this.kerberos = new this.Kerberos();
	  service_name = service_name || "mongodb";
	  // Set up first transition
	  this._transition = UnixMongoProcessor.first_transition(this);
	  // Set up target
	  this.target = format("%s@%s", service_name, host);
	  // Number of retries
	  this.retries = 10;
	}
	
	UnixMongoProcessor.prototype.init = function(username, password, callback) {
	  var self = this;
	  this.username = username;
	  this.password = password;
	  // Call client initiate
	  this.kerberos.authGSSClientInit(
	      self.target
	    , this.Kerberos.GSS_C_MUTUAL_FLAG, function(err, context) {
	      self.context = context;
	      // Return the context
	      callback(null, context);
	  });
	}
	
	UnixMongoProcessor.prototype.transition = function(payload, callback) {
	  if(this._transition == null) return callback(new Error("Transition finished"));
	  this._transition(payload, callback);
	}
	
	UnixMongoProcessor.first_transition = function(self) {
	  return function(payload, callback) {    
	    self.kerberos.authGSSClientStep(self.context, '', function(err, result) {
	      if(err) return callback(err);
	      // Set up the next step
	      self._transition = UnixMongoProcessor.second_transition(self);
	      // Return the payload
	      callback(null, self.context.response);
	    })
	  }
	}
	
	UnixMongoProcessor.second_transition = function(self) {
	  return function(payload, callback) {    
	    self.kerberos.authGSSClientStep(self.context, payload, function(err, result) {
	      if(err && self.retries == 0) return callback(err);
	      // Attempt to re-establish a context
	      if(err) {
	        // Adjust the number of retries
	        self.retries = self.retries - 1;
	        // Call same step again
	        return self.transition(payload, callback);
	      }
	      
	      // Set up the next step
	      self._transition = UnixMongoProcessor.third_transition(self);
	      // Return the payload
	      callback(null, self.context.response || '');
	    });
	  }
	}
	
	UnixMongoProcessor.third_transition = function(self) {
	  return function(payload, callback) {    
	    // GSS Client Unwrap
	    self.kerberos.authGSSClientUnwrap(self.context, payload, function(err, result) {
	      if(err) return callback(err, false);
	      
	      // Wrap the response
	      self.kerberos.authGSSClientWrap(self.context, self.context.response, self.username, function(err, result) {
	        if(err) return callback(err, false);
	        // Set up the next step
	        self._transition = UnixMongoProcessor.fourth_transition(self);
	        // Return the payload
	        callback(null, self.context.response);
	      });
	    });
	  }
	}
	
	UnixMongoProcessor.fourth_transition = function(self) {
	  return function(payload, callback) {    
	    // Clean up context
	    self.kerberos.authGSSClientClean(self.context, function(err, result) {
	      if(err) return callback(err, false);
	      // Set the transition to null
	      self._transition = null;
	      // Callback with valid authentication
	      callback(null, true);
	    });
	  }
	}
	
	// Set the process
	exports.MongoAuthProcess = MongoAuthProcess;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85), __webpack_require__(281).Buffer))

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Readable;
	
	/*<replacement>*/
	var isArray = __webpack_require__(347);
	/*</replacement>*/
	
	
	/*<replacement>*/
	var Buffer = __webpack_require__(281).Buffer;
	/*</replacement>*/
	
	Readable.ReadableState = ReadableState;
	
	var EE = __webpack_require__(298).EventEmitter;
	
	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/
	
	var Stream = __webpack_require__(295);
	
	/*<replacement>*/
	var util = __webpack_require__(353);
	util.inherits = __webpack_require__(354);
	/*</replacement>*/
	
	var StringDecoder;
	
	util.inherits(Readable, Stream);
	
	function ReadableState(options, stream) {
	  options = options || {};
	
	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = false;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;
	
	  // In streams that never have any data, and do push(null) right away,
	  // the consumer can miss the 'end' event if they do some I/O before
	  // consuming the stream.  So, we don't emit('end') until some reading
	  // happens.
	  this.calledRead = false;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, becuase any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	
	
	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;
	
	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;
	
	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(348).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	
	function Readable(options) {
	  if (!(this instanceof Readable))
	    return new Readable(options);
	
	  this._readableState = new ReadableState(options, this);
	
	  // legacy
	  this.readable = true;
	
	  Stream.call(this);
	}
	
	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;
	
	  if (typeof chunk === 'string' && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }
	
	  return readableAddChunk(this, state, chunk, encoding, false);
	};
	
	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};
	
	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null || chunk === undefined) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);
	
	      // update the buffer info.
	      state.length += state.objectMode ? 1 : chunk.length;
	      if (addToFront) {
	        state.buffer.unshift(chunk);
	      } else {
	        state.reading = false;
	        state.buffer.push(chunk);
	      }
	
	      if (state.needReadable)
	        emitReadable(stream);
	
	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }
	
	  return needMoreData(state);
	}
	
	
	
	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}
	
	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(348).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	};
	
	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}
	
	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;
	
	  if (state.objectMode)
	    return n === 0 ? 0 : 1;
	
	  if (n === null || isNaN(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }
	
	  if (n <= 0)
	    return 0;
	
	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);
	
	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }
	
	  return n;
	}
	
	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  var state = this._readableState;
	  state.calledRead = true;
	  var nOrig = n;
	  var ret;
	
	  if (typeof n !== 'number' || n > 0)
	    state.emittedReadable = false;
	
	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    emitReadable(this);
	    return null;
	  }
	
	  n = howMuchToRead(n, state);
	
	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    ret = null;
	
	    // In cases where the decoder did not receive enough data
	    // to produce a full chunk, then immediately received an
	    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].
	    // howMuchToRead will see this and coerce the amount to
	    // read to zero (because it's looking at the length of the
	    // first <Buffer > in state.buffer), and we'll end up here.
	    //
	    // This can only happen via state.decoder -- no other venue
	    // exists for pushing a zero-length chunk into state.buffer
	    // and triggering this behavior. In this case, we return our
	    // remaining data and end the stream, if appropriate.
	    if (state.length > 0 && state.decoder) {
	      ret = fromList(n, state);
	      state.length -= ret.length;
	    }
	
	    if (state.length === 0)
	      endReadable(this);
	
	    return ret;
	  }
	
	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	
	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	
	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length - n <= state.highWaterMark)
	    doRead = true;
	
	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading)
	    doRead = false;
	
	  if (doRead) {
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }
	
	  // If _read called its callback synchronously, then `reading`
	  // will be false, and we need to re-evaluate how much data we
	  // can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);
	
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;
	
	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  }
	
	  state.length -= n;
	
	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;
	
	  // If we happened to read() exactly the remaining amount in the
	  // buffer, and the EOF has been seen at this point, then make sure
	  // that we emit 'end' on the very next tick.
	  if (state.ended && !state.endEmitted && state.length === 0)
	    endReadable(this);
	
	  return ret;
	};
	
	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) &&
	      'string' !== typeof chunk &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}
	
	
	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	
	  // if we've ended and we have some data left, then emit
	  // 'readable' now to make sure it gets picked up.
	  if (state.length > 0)
	    emitReadable(stream);
	  else
	    endReadable(stream);
	}
	
	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (state.emittedReadable)
	    return;
	
	  state.emittedReadable = true;
	  if (state.sync)
	    process.nextTick(function() {
	      emitReadable_(stream);
	    });
	  else
	    emitReadable_(stream);
	}
	
	function emitReadable_(stream) {
	  stream.emit('readable');
	}
	
	
	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}
	
	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}
	
	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};
	
	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;
	
	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);
	
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    if (readable !== src) return;
	    cleanup();
	  }
	
	  function onend() {
	    dest.end();
	  }
	
	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	
	  function cleanup() {
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	
	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (!dest._writableState || dest._writableState.needDrain)
	      ondrain();
	  }
	
	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];
	
	
	
	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	
	  function unpipe() {
	    src.unpipe(dest);
	  }
	
	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);
	
	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    // the handler that waits for readable events after all
	    // the data gets sucked out in flow.
	    // This would be easier to follow with a .once() handler
	    // in flow(), but that is too slow.
	    this.on('readable', pipeOnReadable);
	
	    state.flowing = true;
	    process.nextTick(function() {
	      flow(src);
	    });
	  }
	
	  return dest;
	};
	
	function pipeOnDrain(src) {
	  return function() {
	    var dest = this;
	    var state = src._readableState;
	    state.awaitDrain--;
	    if (state.awaitDrain === 0)
	      flow(src);
	  };
	}
	
	function flow(src) {
	  var state = src._readableState;
	  var chunk;
	  state.awaitDrain = 0;
	
	  function write(dest, i, list) {
	    var written = dest.write(chunk);
	    if (false === written) {
	      state.awaitDrain++;
	    }
	  }
	
	  while (state.pipesCount && null !== (chunk = src.read())) {
	
	    if (state.pipesCount === 1)
	      write(state.pipes, 0, null);
	    else
	      forEach(state.pipes, write);
	
	    src.emit('data', chunk);
	
	    // if anyone needs a drain, then we have to wait for that.
	    if (state.awaitDrain > 0)
	      return;
	  }
	
	  // if every destination was unpiped, either before entering this
	  // function, or in the while loop, then stop flowing.
	  //
	  // NB: This is a pretty rare edge case.
	  if (state.pipesCount === 0) {
	    state.flowing = false;
	
	    // if there were data event listeners added, then switch to old mode.
	    if (EE.listenerCount(src, 'data') > 0)
	      emitDataEvents(src);
	    return;
	  }
	
	  // at this point, no one needed a drain, so we just ran out of data
	  // on the next readable event, start it over again.
	  state.ranOut = true;
	}
	
	function pipeOnReadable() {
	  if (this._readableState.ranOut) {
	    this._readableState.ranOut = false;
	    flow(this);
	  }
	}
	
	
	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;
	
	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;
	
	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;
	
	    if (!dest)
	      dest = state.pipes;
	
	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    this.removeListener('readable', pipeOnReadable);
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }
	
	  // slow case. multiple pipe destinations.
	
	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    this.removeListener('readable', pipeOnReadable);
	    state.flowing = false;
	
	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }
	
	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;
	
	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];
	
	  dest.emit('unpipe', this);
	
	  return this;
	};
	
	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	
	  if (ev === 'data' && !this._readableState.flowing)
	    emitDataEvents(this);
	
	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        this.read(0);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }
	
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	
	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  emitDataEvents(this);
	  this.read(0);
	  this.emit('resume');
	};
	
	Readable.prototype.pause = function() {
	  emitDataEvents(this, true);
	  this.emit('pause');
	};
	
	function emitDataEvents(stream, startPaused) {
	  var state = stream._readableState;
	
	  if (state.flowing) {
	    // https://github.com/isaacs/readable-stream/issues/16
	    throw new Error('Cannot switch to old mode now.');
	  }
	
	  var paused = startPaused || false;
	  var readable = false;
	
	  // convert to an old-style stream.
	  stream.readable = true;
	  stream.pipe = Stream.prototype.pipe;
	  stream.on = stream.addListener = Stream.prototype.on;
	
	  stream.on('readable', function() {
	    readable = true;
	
	    var c;
	    while (!paused && (null !== (c = stream.read())))
	      stream.emit('data', c);
	
	    if (c === null) {
	      readable = false;
	      stream._readableState.needReadable = true;
	    }
	  });
	
	  stream.pause = function() {
	    paused = true;
	    this.emit('pause');
	  };
	
	  stream.resume = function() {
	    paused = false;
	    if (readable)
	      process.nextTick(function() {
	        stream.emit('readable');
	      });
	    else
	      this.read(0);
	    this.emit('resume');
	  };
	
	  // now make it start, just in case it hadn't already.
	  stream.emit('readable');
	}
	
	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;
	
	  var self = this;
	  stream.on('end', function() {
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }
	
	    self.push(null);
	  });
	
	  stream.on('data', function(chunk) {
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	
	    // don't skip over falsy values in objectMode
	    //if (state.objectMode && util.isNullOrUndefined(chunk))
	    if (state.objectMode && (chunk === null || chunk === undefined))
	      return;
	    else if (!state.objectMode && (!chunk || !chunk.length))
	      return;
	
	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });
	
	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (typeof stream[i] === 'function' &&
	        typeof this[i] === 'undefined') {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }
	
	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });
	
	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	
	  return self;
	};
	
	
	
	// exposed for testing purposes only.
	Readable._fromList = fromList;
	
	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;
	
	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;
	
	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);
	
	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);
	
	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);
	
	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();
	
	        c += cpy;
	      }
	    }
	  }
	
	  return ret;
	}
	
	function endReadable(stream) {
	  var state = stream._readableState;
	
	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');
	
	  if (!state.endEmitted && state.calledRead) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}
	
	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.
	
	module.exports = Writable;
	
	/*<replacement>*/
	var Buffer = __webpack_require__(281).Buffer;
	/*</replacement>*/
	
	Writable.WritableState = WritableState;
	
	
	/*<replacement>*/
	var util = __webpack_require__(353);
	util.inherits = __webpack_require__(354);
	/*</replacement>*/
	
	var Stream = __webpack_require__(295);
	
	util.inherits(Writable, Stream);
	
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}
	
	function WritableState(options, stream) {
	  options = options || {};
	
	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;
	
	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;
	
	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;
	
	  // a flag to see when we're in the middle of a write.
	  this.writing = false;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, becuase any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;
	
	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };
	
	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;
	
	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	
	  this.buffer = [];
	
	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}
	
	function Writable(options) {
	  var Duplex = __webpack_require__(318);
	
	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);
	
	  this._writableState = new WritableState(options, this);
	
	  // legacy.
	  this.writable = true;
	
	  Stream.call(this);
	}
	
	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};
	
	
	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}
	
	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!Buffer.isBuffer(chunk) &&
	      'string' !== typeof chunk &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}
	
	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;
	
	  if (typeof cb !== 'function')
	    cb = function() {};
	
	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb))
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	
	  return ret;
	};
	
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      typeof chunk === 'string') {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}
	
	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;
	
	  state.length += len;
	
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;
	
	  if (state.writing)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, len, chunk, encoding, cb);
	
	  return ret;
	}
	
	function doWrite(stream, state, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	
	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      cb(er);
	    });
	  else
	    cb(er);
	
	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}
	
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	
	  onwriteStateUpdate(state);
	
	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);
	
	    if (!finished && !state.bufferProcessing && state.buffer.length)
	      clearBuffer(stream, state);
	
	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}
	
	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  cb();
	  if (finished)
	    finishMaybe(stream, state);
	}
	
	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}
	
	
	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	
	  for (var c = 0; c < state.buffer.length; c++) {
	    var entry = state.buffer[c];
	    var chunk = entry.chunk;
	    var encoding = entry.encoding;
	    var cb = entry.callback;
	    var len = state.objectMode ? 1 : chunk.length;
	
	    doWrite(stream, state, len, chunk, encoding, cb);
	
	    // if we didn't call the onwrite immediately, then
	    // it means that we need to wait until it does.
	    // also, that means that the chunk and cb are currently
	    // being processed, so move the buffer counter past them.
	    if (state.writing) {
	      c++;
	      break;
	    }
	  }
	
	  state.bufferProcessing = false;
	  if (c < state.buffer.length)
	    state.buffer = state.buffer.slice(c);
	  else
	    state.buffer.length = 0;
	}
	
	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};
	
	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;
	
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (typeof chunk !== 'undefined' && chunk !== null)
	    this.write(chunk, encoding);
	
	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};
	
	
	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}
	
	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    state.finished = true;
	    stream.emit('finish');
	  }
	  return need;
	}
	
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.
	
	module.exports = Duplex;
	
	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/
	
	
	/*<replacement>*/
	var util = __webpack_require__(353);
	util.inherits = __webpack_require__(354);
	/*</replacement>*/
	
	var Readable = __webpack_require__(316);
	var Writable = __webpack_require__(317);
	
	util.inherits(Duplex, Readable);
	
	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});
	
	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);
	
	  Readable.call(this, options);
	  Writable.call(this, options);
	
	  if (options && options.readable === false)
	    this.readable = false;
	
	  if (options && options.writable === false)
	    this.writable = false;
	
	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;
	
	  this.once('end', onend);
	}
	
	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;
	
	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}
	
	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	
	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.
	
	module.exports = Transform;
	
	var Duplex = __webpack_require__(318);
	
	/*<replacement>*/
	var util = __webpack_require__(353);
	util.inherits = __webpack_require__(354);
	/*</replacement>*/
	
	util.inherits(Transform, Duplex);
	
	
	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };
	
	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}
	
	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;
	
	  var cb = ts.writecb;
	
	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));
	
	  ts.writechunk = null;
	  ts.writecb = null;
	
	  if (data !== null && data !== undefined)
	    stream.push(data);
	
	  if (cb)
	    cb(er);
	
	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	
	
	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);
	
	  Duplex.call(this, options);
	
	  var ts = this._transformState = new TransformState(options, this);
	
	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;
	
	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;
	
	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;
	
	  this.once('finish', function() {
	    if ('function' === typeof this._flush)
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}
	
	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};
	
	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};
	
	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};
	
	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;
	
	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	
	
	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);
	
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var rs = stream._readableState;
	  var ts = stream._transformState;
	
	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');
	
	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');
	
	  return stream.push(null);
	}


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.
	
	module.exports = PassThrough;
	
	var Transform = __webpack_require__(319);
	
	/*<replacement>*/
	var util = __webpack_require__(353);
	util.inherits = __webpack_require__(354);
	/*</replacement>*/
	
	util.inherits(PassThrough, Transform);
	
	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);
	
	  Transform.call(this, options);
	}
	
	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	exports.read = function(buffer, offset, isLE, mLen, nBytes) {
	  var e, m,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      nBits = -7,
	      i = isLE ? (nBytes - 1) : 0,
	      d = isLE ? -1 : 1,
	      s = buffer[offset + i];
	
	  i += d;
	
	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
	
	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
	
	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity);
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	};
	
	exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
	      i = isLE ? 0 : (nBytes - 1),
	      d = isLE ? 1 : -1,
	      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
	
	  value = Math.abs(value);
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
	
	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
	
	  buffer[offset + i - d] |= s * 128;
	};


/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * isArray
	 */
	
	var isArray = Array.isArray;
	
	/**
	 * toString
	 */
	
	var str = Object.prototype.toString;
	
	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */
	
	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(342);
	exports.Stream = __webpack_require__(295);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(341);
	exports.Duplex = __webpack_require__(343);
	exports.Transform = __webpack_require__(344);
	exports.PassThrough = __webpack_require__(345);


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(341)


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(343)


/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(344)


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(345)


/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	/* (ignored) */

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSCore
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(72);
	
	/**
	 * The CSSCore module specifies the API (and implements most of the methods)
	 * that should be used when dealing with the display of elements (via their
	 * CSS classes and visibility on screen. It is an API focused on mutating the
	 * display and not reading it as no logical state should be encoded in the
	 * display of elements.
	 */
	
	var CSSCore = {
	
	  /**
	   * Adds the class passed in to the element if it doesn't already have it.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  addClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.addClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));
	
	    if (className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else if (!CSSCore.hasClass(element, className)) {
	        element.className = element.className + ' ' + className;
	      }
	    }
	    return element;
	  },
	
	  /**
	   * Removes the class passed in from the element
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  removeClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.removeClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));
	
	    if (className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else if (CSSCore.hasClass(element, className)) {
	        element.className = element.className
	          .replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1')
	          .replace(/\s+/g, ' ') // multiple spaces to one
	          .replace(/^\s*|\s*$/g, ''); // trim the ends
	      }
	    }
	    return element;
	  },
	
	  /**
	   * Helper to add or remove a class from an element based on a condition.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @param {*} bool condition to whether to add or remove the class
	   * @return {DOMElement} the element passed in
	   */
	  conditionClass: function(element, className, bool) {
	    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
	  },
	
	  /**
	   * Tests whether the element has the class specified.
	   *
	   * @param {DOMNode|DOMWindow} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {boolean} true if the element has the class, false if not
	   */
	  hasClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSS.hasClass takes only a single class name.'
	    ) : invariant(!/\s/.test(className)));
	    if (element.classList) {
	      return !!className && element.classList.contains(className);
	    }
	    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	  }
	
	};
	
	module.exports = CSSCore;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionEvents
	 */
	
	"use strict";
	
	var ExecutionEnvironment = __webpack_require__(66);
	
	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },
	
	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};
	
	var endEvents = [];
	
	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;
	
	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }
	
	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }
	
	  for (var baseEventName in EVENT_NAME_MAP) {
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}
	
	if (ExecutionEnvironment.canUseDOM) {
	  detectEvents();
	}
	
	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.
	
	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}
	
	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}
	
	var ReactTransitionEvents = {
	  addEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },
	
	  removeEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};
	
	module.exports = ReactTransitionEvents;


/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	
	;(function (exports) {
		'use strict';
	
	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array
	
		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)
	
		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}
	
		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr
	
			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}
	
			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0
	
			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)
	
			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length
	
			var L = 0
	
			function push (v) {
				arr[L++] = v
			}
	
			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}
	
			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}
	
			return arr
		}
	
		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length
	
			function encode (num) {
				return lookup.charAt(num)
			}
	
			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}
	
			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}
	
			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}
	
			return output
		}
	
		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}(false ? (this.base64js = {}) : exports))


/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */
	
	/*jslint evil: true, sub: true */
	
	var ExecutionEnvironment = __webpack_require__(66);
	
	var createArrayFrom = __webpack_require__(350);
	var getMarkupWrap = __webpack_require__(334);
	var invariant = __webpack_require__(72);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      handleScript,
	      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
	    ) : invariant(handleScript));
	    createArrayFrom(scripts).forEach(handleScript);
	  }
	
	  var nodes = createArrayFrom(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */
	
	var ExecutionEnvironment = __webpack_require__(66);
	
	var invariant = __webpack_require__(72);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	var shouldWrap = {
	  // Force wrapping for SVG elements because if they get created inside a <div>,
	  // they will be initialized in the wrong namespace (and will not display).
	  'circle': true,
	  'defs': true,
	  'ellipse': true,
	  'g': true,
	  'line': true,
	  'linearGradient': true,
	  'path': true,
	  'polygon': true,
	  'polyline': true,
	  'radialGradient': true,
	  'rect': true,
	  'stop': true,
	  'text': true
	};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg>', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap,
	
	  'circle': svgWrap,
	  'defs': svgWrap,
	  'ellipse': svgWrap,
	  'g': svgWrap,
	  'line': svgWrap,
	  'linearGradient': svgWrap,
	  'path': svgWrap,
	  'polygon': svgWrap,
	  'polyline': svgWrap,
	  'radialGradient': svgWrap,
	  'rect': svgWrap,
	  'stop': svgWrap,
	  'text': svgWrap
	};
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	
	module.exports = getMarkupWrap;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */
	
	var helpers = __webpack_require__(352);
	
	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;
	
	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;
	
	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;
	
	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);
	
	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);
	
	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);
	
	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);
	
	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);
	
	}
	
	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}
	
	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}
	
	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}
	
	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	var SecurityCredentialsNative = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../../build/Release/kerberos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).SecurityCredentials;
	
	// Add simple kebros helper
	SecurityCredentialsNative.aquire_kerberos = function(username, password, domain, callback) {
	  if(typeof password == 'function') {
	    callback = password;
	    password = null;
	  } else if(typeof domain == 'function') {
	    callback = domain;
	    domain = null;
	  }
	
	  // We are going to use the async version
	  if(typeof callback == 'function') {
	    return SecurityCredentialsNative.aquire('Kerberos', username, password, domain, callback);
	  } else {
	    return SecurityCredentialsNative.aquireSync('Kerberos', username, password, domain);
	  }
	}
	
	// Export the modified class
	exports.SecurityCredentials = SecurityCredentialsNative;

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	var SecurityContextNative = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../../build/Release/kerberos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).SecurityContext;
	// Export the modified class
	exports.SecurityContext = SecurityContextNative;

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	var SecurityBufferNative = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../../build/Release/kerberos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).SecurityBuffer;
	
	// Add some attributes
	SecurityBufferNative.VERSION  = 0;
	SecurityBufferNative.EMPTY    = 0;
	SecurityBufferNative.DATA     = 1;
	SecurityBufferNative.TOKEN    = 2;
	SecurityBufferNative.PADDING  = 9;
	SecurityBufferNative.STREAM   = 10;
	
	// Export the modified class
	exports.SecurityBuffer = SecurityBufferNative;

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	var SecurityBufferDescriptorNative = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../../build/Release/kerberos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).SecurityBufferDescriptor;
	// Export the modified class
	exports.SecurityBufferDescriptor = SecurityBufferDescriptorNative;

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.
	
	module.exports = Writable;
	
	/*<replacement>*/
	var Buffer = __webpack_require__(281).Buffer;
	/*</replacement>*/
	
	Writable.WritableState = WritableState;
	
	
	/*<replacement>*/
	var util = __webpack_require__(363);
	util.inherits = __webpack_require__(364);
	/*</replacement>*/
	
	var Stream = __webpack_require__(295);
	
	util.inherits(Writable, Stream);
	
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}
	
	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(343);
	
	  options = options || {};
	
	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;
	
	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;
	
	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;
	
	  // a flag to see when we're in the middle of a write.
	  this.writing = false;
	
	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;
	
	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };
	
	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;
	
	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	
	  this.buffer = [];
	
	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;
	
	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;
	
	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}
	
	function Writable(options) {
	  var Duplex = __webpack_require__(343);
	
	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);
	
	  this._writableState = new WritableState(options, this);
	
	  // legacy.
	  this.writable = true;
	
	  Stream.call(this);
	}
	
	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};
	
	
	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}
	
	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}
	
	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	
	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;
	
	  if (!util.isFunction(cb))
	    cb = function() {};
	
	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }
	
	  return ret;
	};
	
	Writable.prototype.cork = function() {
	  var state = this._writableState;
	
	  state.corked++;
	};
	
	Writable.prototype.uncork = function() {
	  var state = this._writableState;
	
	  if (state.corked) {
	    state.corked--;
	
	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};
	
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}
	
	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;
	
	  state.length += len;
	
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;
	
	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	
	  return ret;
	}
	
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	
	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }
	
	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}
	
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	
	  onwriteStateUpdate(state);
	
	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);
	
	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }
	
	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}
	
	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}
	
	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}
	
	
	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	
	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);
	
	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });
	
	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }
	
	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }
	
	  state.bufferProcessing = false;
	}
	
	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	
	};
	
	Writable.prototype._writev = null;
	
	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;
	
	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);
	
	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }
	
	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};
	
	
	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}
	
	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}
	
	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}
	
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Readable;
	
	/*<replacement>*/
	var isArray = __webpack_require__(362);
	/*</replacement>*/
	
	
	/*<replacement>*/
	var Buffer = __webpack_require__(281).Buffer;
	/*</replacement>*/
	
	Readable.ReadableState = ReadableState;
	
	var EE = __webpack_require__(298).EventEmitter;
	
	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/
	
	var Stream = __webpack_require__(295);
	
	/*<replacement>*/
	var util = __webpack_require__(363);
	util.inherits = __webpack_require__(364);
	/*</replacement>*/
	
	var StringDecoder;
	
	
	/*<replacement>*/
	var debug = __webpack_require__(355);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/
	
	
	util.inherits(Readable, Stream);
	
	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(343);
	
	  options = options || {};
	
	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	
	
	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;
	
	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;
	
	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(356).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	
	function Readable(options) {
	  var Duplex = __webpack_require__(343);
	
	  if (!(this instanceof Readable))
	    return new Readable(options);
	
	  this._readableState = new ReadableState(options, this);
	
	  // legacy
	  this.readable = true;
	
	  Stream.call(this);
	}
	
	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;
	
	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }
	
	  return readableAddChunk(this, state, chunk, encoding, false);
	};
	
	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};
	
	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);
	
	      if (!addToFront)
	        state.reading = false;
	
	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);
	
	        if (state.needReadable)
	          emitReadable(stream);
	      }
	
	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }
	
	  return needMoreData(state);
	}
	
	
	
	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}
	
	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(356).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};
	
	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}
	
	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;
	
	  if (state.objectMode)
	    return n === 0 ? 0 : 1;
	
	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }
	
	  if (n <= 0)
	    return 0;
	
	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);
	
	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }
	
	  return n;
	}
	
	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;
	
	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;
	
	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }
	
	  n = howMuchToRead(n, state);
	
	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }
	
	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	
	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);
	
	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }
	
	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }
	
	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }
	
	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);
	
	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;
	
	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }
	
	  state.length -= n;
	
	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;
	
	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);
	
	  if (!util.isNull(ret))
	    this.emit('data', ret);
	
	  return ret;
	};
	
	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}
	
	
	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	
	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}
	
	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}
	
	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}
	
	
	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}
	
	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}
	
	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};
	
	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;
	
	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);
	
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }
	
	  function onend() {
	    debug('onend');
	    dest.end();
	  }
	
	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);
	
	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }
	
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }
	
	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];
	
	
	
	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }
	
	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);
	
	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	
	  return dest;
	};
	
	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	
	
	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;
	
	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;
	
	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;
	
	    if (!dest)
	      dest = state.pipes;
	
	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }
	
	  // slow case. multiple pipe destinations.
	
	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	
	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }
	
	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;
	
	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];
	
	  dest.emit('unpipe', this);
	
	  return this;
	};
	
	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	
	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }
	
	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }
	
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	
	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};
	
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}
	
	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}
	
	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};
	
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}
	
	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;
	
	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }
	
	    self.push(null);
	  });
	
	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;
	
	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });
	
	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }
	
	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });
	
	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	
	  return self;
	};
	
	
	
	// exposed for testing purposes only.
	Readable._fromList = fromList;
	
	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;
	
	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;
	
	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);
	
	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);
	
	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);
	
	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();
	
	        c += cpy;
	      }
	    }
	  }
	
	  return ret;
	}
	
	function endReadable(stream) {
	  var state = stream._readableState;
	
	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');
	
	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}
	
	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.
	
	module.exports = Duplex;
	
	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/
	
	
	/*<replacement>*/
	var util = __webpack_require__(363);
	util.inherits = __webpack_require__(364);
	/*</replacement>*/
	
	var Readable = __webpack_require__(342);
	var Writable = __webpack_require__(341);
	
	util.inherits(Duplex, Readable);
	
	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});
	
	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);
	
	  Readable.call(this, options);
	  Writable.call(this, options);
	
	  if (options && options.readable === false)
	    this.readable = false;
	
	  if (options && options.writable === false)
	    this.writable = false;
	
	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;
	
	  this.once('end', onend);
	}
	
	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;
	
	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}
	
	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	
	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.
	
	module.exports = Transform;
	
	var Duplex = __webpack_require__(343);
	
	/*<replacement>*/
	var util = __webpack_require__(363);
	util.inherits = __webpack_require__(364);
	/*</replacement>*/
	
	util.inherits(Transform, Duplex);
	
	
	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };
	
	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}
	
	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;
	
	  var cb = ts.writecb;
	
	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));
	
	  ts.writechunk = null;
	  ts.writecb = null;
	
	  if (!util.isNullOrUndefined(data))
	    stream.push(data);
	
	  if (cb)
	    cb(er);
	
	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	
	
	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);
	
	  Duplex.call(this, options);
	
	  this._transformState = new TransformState(options, this);
	
	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;
	
	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;
	
	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;
	
	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}
	
	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};
	
	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};
	
	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};
	
	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;
	
	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	
	
	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);
	
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;
	
	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');
	
	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');
	
	  return stream.push(null);
	}


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.
	
	module.exports = PassThrough;
	
	var Transform = __webpack_require__(344);
	
	/*<replacement>*/
	var util = __webpack_require__(363);
	util.inherits = __webpack_require__(364);
	/*</replacement>*/
	
	util.inherits(PassThrough, Transform);
	
	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);
	
	  Transform.call(this, options);
	}
	
	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}
	
	var Buffer = __webpack_require__(281).Buffer
	var Hash   = __webpack_require__(357)(Buffer)
	
	exports.sha1 = __webpack_require__(358)(Buffer, Hash)
	exports.sha256 = __webpack_require__(359)(Buffer, Hash)
	exports.sha512 = __webpack_require__(360)(Buffer, Hash)


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var Buffer = __webpack_require__(281).Buffer;
	
	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }
	
	
	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}
	
	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }
	
	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};
	
	
	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;
	
	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;
	
	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }
	
	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);
	
	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
	
	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;
	
	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }
	
	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);
	
	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }
	
	  charStr += buffer.toString(this.encoding, 0, end);
	
	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }
	
	  // or just emit the charStr
	  return charStr;
	};
	
	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;
	
	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];
	
	    // See http://en.wikipedia.org/wiki/UTF-8#Description
	
	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }
	
	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }
	
	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};
	
	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);
	
	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }
	
	  return res;
	};
	
	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}
	
	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}
	
	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }
	
	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')
	
	    setTimeout(function() {
	      var result
	
	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }
	
	      callback(undefined, result)
	    })
	  }
	
	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')
	
	    if (iterations < 0)
	      throw new TypeError('Bad iterations')
	
	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')
	
	    if (keylen < 0)
	      throw new TypeError('Bad key length')
	
	    digest = digest || 'sha1'
	
	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)
	
	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)
	
	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)
	
	      var U = crypto.createHmac(digest, password).update(block1).digest()
	
	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen
	
	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }
	
	      U.copy(T, 0, 0, hLen)
	
	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()
	
	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }
	
	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }
	
	    return DK
	  }
	
	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFrom
	 * @typechecks
	 */
	
	var toArray = __webpack_require__(361);
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj &&
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    ('length' in obj) &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    (typeof obj.nodeType != 'number') &&
	    (
	      // a real array
	      (// HTMLCollection/NodeList
	      (Array.isArray(obj) ||
	      // arguments
	      ('callee' in obj) || 'item' in obj))
	    )
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFrom = require('createArrayFrom');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFrom(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFrom(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFrom;


/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160
	
	
	
	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.
	
	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
	
	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	
	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];
	
	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];
	
	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};
	
	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};
	
	var processBlock = function (H, M, offset) {
	
	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];
	
	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }
	
	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;
	
	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;
	
	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};
	
	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}
	
	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}
	
	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}
	
	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}
	
	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}
	
	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}
	
	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];
	
	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');
	
	  var m = bytesToWords(message);
	
	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;
	
	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );
	
	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }
	
	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];
	
	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }
	
	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}
	
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;
	
	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }
	
	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}
	
	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}
	
	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}
	
	module.exports = { hash: hash };
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	function isBuffer(arg) {
	  return Buffer.isBuffer(arg);
	}
	exports.isBuffer = isBuffer;
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	/* (ignored) */

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var Buffer = __webpack_require__(281).Buffer;
	
	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }
	
	
	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}
	
	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }
	
	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};
	
	
	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;
	
	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;
	
	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }
	
	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);
	
	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
	
	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;
	
	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }
	
	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);
	
	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }
	
	  charStr += buffer.toString(this.encoding, 0, end);
	
	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }
	
	  // or just emit the charStr
	  return charStr;
	};
	
	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;
	
	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];
	
	    // See http://en.wikipedia.org/wiki/UTF-8#Description
	
	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }
	
	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }
	
	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};
	
	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);
	
	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }
	
	  return res;
	};
	
	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}
	
	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}
	
	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (Buffer) {
	
	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }
	
	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }
	
	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }
	
	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block
	
	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)
	
	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }
	
	      s += ch
	      f += ch
	
	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s
	
	    return this
	  }
	
	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8
	
	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80
	
	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)
	
	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }
	
	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)
	
	    var hash = this._update(this._block) || this._hash()
	
	    return enc ? hash.toString(enc) : hash
	  }
	
	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }
	
	  return Hash
	}


/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */
	
	var inherits = __webpack_require__(282).inherits
	
	module.exports = function (Buffer, Hash) {
	
	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0
	
	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)
	
	  var POOL = []
	
	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()
	
	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)
	
	    this._h = null
	    this.init()
	  }
	
	  inherits(Sha1, Hash)
	
	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0
	
	    Hash.prototype.init.call(this)
	    return this
	  }
	
	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {
	
	    var a, b, c, d, e, _a, _b, _c, _d, _e
	
	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e
	
	    var w = this._w
	
	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)
	
	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )
	
	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }
	
	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }
	
	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }
	
	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }
	
	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }
	
	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }
	
	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }
	
	  return Sha1
	}


/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */
	
	var inherits = __webpack_require__(282).inherits
	
	module.exports = function (Buffer, Hash) {
	
	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]
	
	  var W = new Array(64)
	
	  function Sha256() {
	    this.init()
	
	    this._w = W //new Array(64)
	
	    Hash.call(this, 16*4, 14*4)
	  }
	
	  inherits(Sha256, Hash)
	
	  Sha256.prototype.init = function () {
	
	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0
	
	    this._len = this._s = 0
	
	    return this
	  }
	
	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }
	
	  function R (X, n) {
	    return (X >>> n);
	  }
	
	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }
	
	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }
	
	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }
	
	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }
	
	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }
	
	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }
	
	  Sha256.prototype._update = function(M) {
	
	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2
	
	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0
	
	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]
	
	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w
	
	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }
	
	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0
	
	  };
	
	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)
	
	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)
	
	    return H
	  }
	
	  return Sha256
	
	}


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(282).inherits
	
	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]
	
	  var W = new Array(160)
	
	  function Sha512() {
	    this.init()
	    this._w = W
	
	    Hash.call(this, 128, 112)
	  }
	
	  inherits(Sha512, Hash)
	
	  Sha512.prototype.init = function () {
	
	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0
	
	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0
	
	    this._len = this._s = 0
	
	    return this
	  }
	
	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }
	
	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }
	
	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }
	
	  Sha512.prototype._update = function(M) {
	
	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl
	
	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0
	
	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0
	
	    for (var i = 0; i < 80; i++) {
	      var j = i * 2
	
	      var Wi, Wil
	
	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)
	
	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)
	
	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)
	
	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]
	
	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]
	
	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)
	
	        W[j] = Wi
	        W[j + 1] = Wil
	      }
	
	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)
	
	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)
	
	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]
	
	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)
	
	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)
	
	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)
	
	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }
	
	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0
	
	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }
	
	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)
	
	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }
	
	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)
	
	    return H
	  }
	
	  return Sha512
	
	}


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(72);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFrom.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(obj) &&
	    (typeof obj === 'object' || typeof obj === 'function'),
	    'toArray: Array-like object expected'
	  ) : invariant(!Array.isArray(obj) &&
	  (typeof obj === 'object' || typeof obj === 'function')));
	
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof length === 'number',
	    'toArray: Object needs a length property'
	  ) : invariant(typeof length === 'number'));
	
	  ("production" !== process.env.NODE_ENV ? invariant(
	    length === 0 ||
	    (length - 1) in obj,
	    'toArray: Object should have keys for indices'
	  ) : invariant(length === 0 ||
	  (length - 1) in obj));
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	module.exports = toArray;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	function isBuffer(arg) {
	  return Buffer.isBuffer(arg);
	}
	exports.isBuffer = isBuffer;
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(281).Buffer))

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ }
/******/ ]);
//# sourceMappingURL=client.js.map